@page "/Record/ManageEvent/{EventNumber}/{id}"
@inject IRecordService RecordService
@inject IRecordEventService RecordEventService
@inject AppData AppData
@using System.IO
@using System.Threading
@using RapidNRIMs.Model.PersonalDose
@using System.Globalization
@inject IToastService ToastService
@inject HttpClient Http
@inject IJSRuntime jsRuntime
@inject IConfiguration Config
@inject IMasterData _masterData
@inject IMasterDataPhase2 _masterDataPhase2
@inject ImageService _imageService
<!--EditForm--->

<PageTitle>Manage Event Page</PageTitle>

<BSTabGroup>
    <BSTabList>
        <BSTab>
            <div>
                <BSTabLabel><span>@AppData.LangResource[AppData.LanguageID, 247]</span></BSTabLabel>
            </div>
                <BSTabContent>
                    
                        <div class="row margin-row-card" style="margin-top: 0.4rem;">
                            <div class="col-md-12">
                                <div class="card">
                                    <div class="card-header">@AppData.LangResource[AppData.LanguageID, 249]</div>
                                <div class="card-body">
                                    <div class="form-row ml-3">
                                        <div class="form-group row col-md-6">
                                            <label class="col-sm-4 col-form-label">@AppData.LangResource[AppData.LanguageID, 250] <b style="color:red; font-size:16px;">*</b></label>
                                            <div class="col-sm-8">
                                            <div class="input-group">

                                                <input type="date" class="form-control"  value="@(record.EventStartDate.HasValue ? record.EventStartDate.Value.ToString("yyyy-MM-dd") : string.Empty)" @oninput="OnDateChanged"  placeholder="dd/mm/yyyy" />

                                                <input type="text" id="timeInput" placeholder="Ex. 1400 or 14:00" name="timeInput" value="@(record.EventStartDate.HasValue ? record.EventStartDate.Value.TimeOfDay.ToString("hh\\:mm"): string.Empty)" @onchange="@(e => ConvertTime("timeInput"))" class="form-control ml-2">
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group row col-md-6">
                                        <label class="col-md-4 col-form-label">@AppData.LangResource[AppData.LanguageID, 251] <b style="color:red; font-size:16px;">*</b></label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                   @*  <input type="text" class="form-control" @ref="endDatePicker" id="setEndDatepicker" value="@(record.EventEndDate.HasValue ? record.EventEndDate.Value.Date.ToString("dd\\/MM\\/yyyy") : string.Empty)" name="setEndDatepicker" placeholder="dd-mm-yyyy" /> *@
                                                    <input type="date" class="form-control" value="@(record.EventEndDate.HasValue ? record.EventEndDate.Value.ToString("yyyy-MM-dd") : string.Empty)" @oninput="OnDateEndChanged" placeholder="dd/mm/yyyy" />
                                                    <input type="text" id="timeEndInput" placeholder="Ex. 1400 or 14:00" name="timeEndInput" value="@(record.EventEndDate.HasValue ? record.EventEndDate.Value.TimeOfDay.ToString("hh\\:mm"): string.Empty)" @onchange="@(e => ConverTimeEnd("timeEndInput"))" class="form-control ml-2">
                                                </div>

                                            </div>
                                        </div>

                                    </div>
                                   @*  <div class="row">
                                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                                            <span> @AppData.LangResource[AppData.LanguageID, 250] :</span>
                                        </label>
                                        <div class="col-12 col-md-8 col-lg-3">
                                            <div class="input-group input-box-bottom">
                                                <InputDate @bind-Value="record.EventStartDate" class="form-control" />
                                            </div>
                                        </div>
                                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                                            <span>@AppData.LangResource[AppData.LanguageID, 251] :</span>
                                        </label>
                                        <div class="col-12 col-md-8 col-lg-3">
                                            <div class="input-group input-box-bottom">
                                                <InputDate @bind-Value="record.EventEndDate" class="form-control" />
                                            </div>
                                        </div>
                                    </div> *@
                                    <div class="text-center">
                                        @if (AppData.CurrentPermission.Find(i => i.permissionID == 2).permissionU)
                                        {
                                            <button type="submit" @onclick="SaveOnputEvent" class="btn margin-btn" style="background-color:#4CBB17; color:#fff">@AppData.LangResource[AppData.LanguageID, 44]</button>
                                        }
                                    </div>
                                </div>


                            </div>
                        </div>
                    </div>

               
                <div class="row margin-row-card">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header">@AppData.LangResource[AppData.LanguageID, 252]</div>
                            <div class="card-body">

                                <BSTabGroup>
                                    <BSTabList IsPills="true" IsList="true">
                                        <!--Tab Team--->
                                        <BSTab>
                                            <BSTabLabel>@AppData.LangResource[AppData.LanguageID, 253]</BSTabLabel>
                                                <BSTabContent>
                                                    <EditForm Model="@addEventTeam" OnValidSubmit="@OnAddTeam">
                                                        <div class="form-row mt-3 ml-2">
                                                            <div class="form-group row col-md-4">
                                                                <label class="col-sm-4 col-form-label">
                                                                    <span>@AppData.LangResource[AppData.LanguageID, 253] :</span>
                                                                </label>

                                                                <div class="col-sm-8">
                                                                    <div class="input-group">
                                                                        <InputSelect class="form-control" @bind-Value="addEventTeam.UserID">
                                                                            <option value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                                                            @foreach (var item in projectTeams)
                                                                            {

                                                                                <option value="@item.UserID">@(accounts.Find(x => x.UserID == item.UserID).FirstName)</option>

                                                                            }
                                                                        </InputSelect>
                                                                        
                                                                    </div>
                                                           
                                                                </div>

                                                             </div>
                                                            <div class="form-group row">
                                                                <div class="input-group">
                                                                    <span>
                                                                        @if (AppData.CurrentPermission.Find(i => i.permissionID == 2).permissionC)
                                                                        {

                                                                            <button type="submit" class="btn btn-warning ml-3">
                                                                                @AppData.LangResource[AppData.LanguageID, 254]
                                                                            </button>
                                                                        }

                                                                    </span>

                                                                </div>
                                                                   
                                                            </div>
                                                           
                                                        
                                                        </div>
                                                </EditForm>
                                                <div class="row">
                                                    <div class="col-md-12">
                                                        <div class="card">
                                                            <div class="card-header">@AppData.LangResource[AppData.LanguageID, 255]</div>
                                                            <div class="card-body">
                                                                <div class="scrollBar fixTableHead table-responsive scroll-inner" style="margin-top: 0.5rem; height:335px;">
                                                                    <table class="table table-bordered table-striped text-center" style="width: 100%; margin-bottom: 0.5rem;">
                                                                        <thead class="fixedthead">
                                                                            <tr>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 244]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 117]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 146]</th>
                                                                            </tr>
                                                                        </thead>
                                                                        <tbody class="scrollContent">
                                                                            @foreach (var i in teams)
                                                                            {
                                                                                <tr>
                                                                                    <td>@(teams.IndexOf(i) + 1)</td>
                                                                                    <td>@accounts.Find(j => j.UserID == @i.UserID).FirstName  @accounts.Find(j => j.UserID == @i.UserID).LastName</td>
                                                                                    <td>
                                                                                        @if (AppData.CurrentPermission.Find(i => i.permissionID == 2).permissionD)
                                                                                        {
                                                                                            <i class="far fa-trash-alt" @onclick="() => OnPutTeam(i.EventTeamID)"></i>
                                                                                        }
                                                                                    </td>
                                                                                </tr>
                                                                            }
                                                                        </tbody>
                                                                    </table>
                                                                </div>
                                                                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                                                    <button type="button" @onclick="PostScheduler" class="btn btn-warning">
                                                                        @AppData.LangResource[AppData.LanguageID, 436]
                                                                    </button>
                                                                </div>

                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </BSTabContent>
                                        </BSTab>
                                        <!--Tab Support Team---->
                                        <BSTab>
                                            <BSTabLabel>@AppData.LangResource[AppData.LanguageID, 437]</BSTabLabel>
                                                <BSTabContent>
                                                    <div class="form-row mt-3 ml-2">
                                                        <div class="form-group row col-md-4">
                                                                <label class="col-sm-4 col-form-label">@AppData.LangResource[AppData.LanguageID, 437]:</label>
                                                            <div class="col-sm-8">
                                                                <div class="input-group">
                                                                    <select class="form-control" @bind="addSupportTeam.ProjectSupportTeamID">
                                                                        <option value="0">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                                                        @foreach (var item in projectSupportTeam)
                                                                        {
                                                                            if(item.OrderProject == 1)
                                                                            {
                                                                            <option value="@item.ProjectSupportTeamID">@item.Name</option>
                                                                            }
                                                                            

                                                                        }
                                                                    </select>
                                                                </div>

                                                            </div>
                                                        </div>
                                                        <div class="form-group row">
                                                            <div class="input-group">
                                                                <span>
                                                                    @if (AppData.CurrentPermission.Find(i => i.permissionID == 2).permissionC)
                                                                    {
                                                                        <button type="submit" @onclick="OnAddSupportEventTeam" class="btn btn-warning ml-3">
                                                                            Add to Support Team
                                                                        </button>
                                                                    }

                                                                </span>

                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="form-row ml-2">
                                                        <div class="form-group row col-md-4">
                                                            <label class="col-sm-4 col-form-label">@AppData.LangResource[AppData.LanguageID, 420]:</label>
                                                            <div class="col-sm-8">
                                                                <div class="input-group">
                                                                    @if (addSupportTeam.ProjectSupportTeamID > 0)
                                                                    {
                                                                        <input class="form-control" disabled @bind-value="projectSupportTeam.Find(x=>x.ProjectSupportTeamID == addSupportTeam.ProjectSupportTeamID).Name" />

                                                                    }
                                                                    else
                                                                    {
                                                                        <input class="form-control" disabled @bind-value="addSupportTeam.Name" />
                                                                    }
                                                                </div>

                                                            </div>
                                                        </div>
                                                        
                                                    </div>

                                                    <div class="form-row ml-2">
                                                        <div class="form-group row col-md-4">
                                                            <label class="col-sm-4 col-form-label">@AppData.LangResource[AppData.LanguageID, 439]:</label>
                                                            <div class="col-sm-8">
                                                                <div class="input-group">
                                                                   @if (addSupportTeam.ProjectSupportTeamID > 0)
                                                                   {
                                                                       <input class="form-control" disabled @bind-value="projectSupportTeam.Find(x=>x.ProjectSupportTeamID == addSupportTeam.ProjectSupportTeamID).Position" />

                                                                   }
                                                                   else
                                                                   {
                                                                       <input class="form-control" disabled @bind-value="addSupportTeam.Position" />
                                                                   }
                                                                </div>

                                                            </div>
                                                        </div>
                                                        <div class="form-group row col-md-4">
                                                            <label class="col-sm-4 col-form-label">@AppData.LangResource[AppData.LanguageID, 402]:</label>
                                                            <div class="col-sm-8">
                                                                <div class="input-group">
                                                                    @if (addSupportTeam.ProjectSupportTeamID > 0)
                                                                    {
                                                                        <input class="form-control" disabled @bind-value="projectSupportTeam.Find(x=>x.ProjectSupportTeamID == addSupportTeam.ProjectSupportTeamID).Department" />

                                                                    }
                                                                    else
                                                                    {
                                                                        <input class="form-control" disabled @bind-value="addSupportTeam.Department" />
                                                                    }
                                                                </div>

                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="form-row ml-2">
                                                        <div class="form-group row col-md-4">
                                                            <label class="col-sm-4 col-form-label">@AppData.LangResource[AppData.LanguageID, 403]:</label>
                                                            <div class="col-sm-8">
                                                                <div class="input-group">
                                                                    @if (addSupportTeam.ProjectSupportTeamID > 0)
                                                                    {
                                                                        <input class="form-control" disabled @bind-value="projectSupportTeam.Find(x=>x.ProjectSupportTeamID == addSupportTeam.ProjectSupportTeamID).PhoneNumber" />

                                                                    }
                                                                    else
                                                                    {
                                                                        <input class="form-control" disabled @bind-value="addSupportTeam.PhoneNumber" />
                                                                    }
                                                                </div>

                                                            </div>
                                                        </div>
                                                        <div class="form-group row col-md-4">
                                                            <label class="col-sm-4 col-form-label">@AppData.LangResource[AppData.LanguageID, 404]:</label>
                                                            <div class="col-sm-8">
                                                                <div class="input-group">
                                                                    @if (addSupportTeam.ProjectSupportTeamID > 0)
                                                                    {
                                                                        <input class="form-control" disabled @bind-value="projectSupportTeam.Find(x=>x.ProjectSupportTeamID == addSupportTeam.ProjectSupportTeamID).Email" />

                                                                    }
                                                                    else
                                                                    {
                                                                        <input class="form-control" disabled @bind-value="addSupportTeam.Email" />
                                                                    }

                                                                </div>

                                                            </div>

                                                        </div>
                                                        

                                                    </div>
       
                                                    <div class="row">
                                                    <div class="col-md-12">
                                                        <div class="card">
                                                            <div class="card-header">@AppData.LangResource[AppData.LanguageID, 440]</div>
                                                            <div class="card-body">
                                                                <div class="scrollBar fixTableHead table-responsive scroll-inner" style="margin-top: 0.5rem; height:335px;">
                                                                    <table class="table table-bordered table-striped text-center" style="width: 100%; margin-bottom: 0.5rem;">
                                                                        <thead class="fixedthead">
                                                                            <tr>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 244]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 438]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 439]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 402]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 403]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 404]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 421]</th>
                                                                            </tr>
                                                                        </thead>
                                                                        <tbody class="scrollContent">
                                                                            @foreach (var i in SupportTeam)
                                                                            {
                                                                                


                                                                                <tr>
                                                                                    <td>@(SupportTeam.IndexOf(i) + 1)</td>
                                                                                    <td>@(listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.ProjectSupportTeamID) != null ? listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.ProjectSupportTeamID).Name : "-")</td>
                                                                                    <td>@(listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.ProjectSupportTeamID) != null ? listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.ProjectSupportTeamID).Position : "-")</td>
                                                                                    <td>@(listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.ProjectSupportTeamID) != null ? listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.ProjectSupportTeamID).Department : "-")</td>
                                                                                    <td>@(listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.ProjectSupportTeamID) != null ? listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.ProjectSupportTeamID).PhoneNumber : "-")</td>
                                                                                    <td>@(listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.ProjectSupportTeamID) != null ? listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.ProjectSupportTeamID).Email : "-")</td>
                                                                                    <td>
                                                                                        @if (AppData.CurrentPermission.Find(i => i.permissionID == 2).permissionD)
                                                                                        {
                                                                                            <i class="far fa-trash-alt" @onclick="() => OnDeletSupport(i.EventSupportTeamID)"></i>
                                                                                        }
                                                                                    </td>
                                                                                </tr>
                                                                                

                                                                                
                                                                            }
                                                                        </tbody>
                                                                    </table>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                            </BSTabContent>
                                        </BSTab>
                                        <!--Tab Instrument----->
                                        <BSTab>
                                            <BSTabLabel>@AppData.LangResource[AppData.LanguageID, 10]</BSTabLabel>
                                                <BSTabContent>
                                                    <div class="form-row mt-3 ml-2">
                                                        <div class="form-group row col-md-4">
                                                            <label class="col-sm-4 col-form-label">@AppData.LangResource[AppData.LanguageID, 10]:</label>
                                                            <div class="col-sm-8">
                                                                <div class="input-group">
                                                                    <select class="form-control" @bind="ins.instrumentNumber">
                                                                        <option value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                                                        @foreach (var item in projectInstruments)
                                                                        {

                                                                            <option value="@item.InstrumentNumber">@item.InstrumentNumber.ToUpper()&nbsp;
                                                                            <b>(@(listInstrument.Find(x => x.InstrumentID == item.InstrumentID) != null ? listInstrument.Find(x => x.InstrumentID == item.InstrumentID).InstrumentENName:"-"))</b>
                                                                            </option>

                                                                        }
                                                                    </select>

                                                                </div>

                                                            </div>
                                                        </div>
                                                        <div class="form-group row">
                                                            <div class="input-group">
                                                                @if (AppData.CurrentPermission.Find(i => i.permissionID == 2).permissionC)
                                                                {
                                                                    <button type="submit" @onclick="OnAddIns" class="btn btn-warning ml-4">
                                                                        @AppData.LangResource[AppData.LanguageID, 256]
                                                                    </button>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="row">
                                                    <div class="col-md-12">
                                                        <div class="card">
                                                            <div class="card-header">@AppData.LangResource[AppData.LanguageID, 257]</div>
                                                            <div class="card-body">
                                                                <div class="scrollBar fixTableHead table-responsive scroll-inner" style="margin-top: 0.5rem; height:335px;">
                                                                    <table class="table table-bordered table-striped text-center" style="width: 100%;">
                                                                        <thead class="fixedthead">
                                                                            <tr>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 244]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 93]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 61]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 258]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 71]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 70]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 246]</th>
                                                                            </tr>
                                                                        </thead>
                                                                        <tbody class="scrollContent">

                                                                            @foreach (var i in instrument)
                                                                            {
                                                                                //int statusID = 0;
                                                                                var resultProjectStatus = recordProjectRecords.Find(x => x.ProjectID == int.Parse(id));
                                                                                if (resultProjectStatus != null)
                                                                                {
                                                                                    statusID = resultProjectStatus.ProjectInsStatusID;
                                                                                }

                                                                                <tr>

                                                                                    <td>@(instrument.IndexOf(i) + 1)</td>
                                                                                    <td>

                                                                                        @if (statusID == 3)
                                                                                        {
                                                                                            <span class="badge badge-pill badge-success">
                                                                                                Normal
                                                                                            </span>
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            <span class="@i.Status.ColorTag">
                                                                                                @i.Status.InstrumentStatusENName
                                                                                            </span>
                                                                                        }
                                                                                    </td>
                                                                                    <td>@i.InstrumentNumber</td>
                                                                                    <td>@i.InstrumentENName</td>
                                                                                    <td>@(instrumentBrands.Find(c => c.InstrumentBrandID == i.InstrumentBrandID) != null ? instrumentBrands.Find(c => c.InstrumentBrandID == i.InstrumentBrandID).InstrumentBrandName : "-")</td>
                                                                                    <td>@(instrumentModels.Find(c => c.InstrumentModelID == i.InstrumentModelID) != null ? instrumentModels.Find(c => c.InstrumentModelID == i.InstrumentModelID).InstrumentModelName : "-")</td>
                                                                                    <td>
                                                                                        @if (AppData.CurrentPermission.Find(i => i.permissionID == 2).permissionD)
                                                                                        {
                                                                                            <i class="far fa-trash-alt" @onclick="()=>OnPutIns(i.InstrumentNumber)"></i>
                                                                                        }
                                                                                    </td>

                                                                                </tr>
                                                                            }

                                                                        </tbody>
                                                                    </table>
                                                                </div>
                                                                @* <div class="text-cente">
                                                                    <button type="button" @onclick="PostInstrumentCheckOut" class="btn margin-btn  " style="background-color:#2E2BFF; color:#fff">
                                                                        @AppData.LangResource[AppData.LanguageID, 441]
                                                                    </button>
                                                                    <button type="button" @onclick="PostInstrumentCheckIn" class="btn margin-btn  " style="background-color:#2E2BFF; color:#fff">
                                                                        @AppData.LangResource[AppData.LanguageID, 442]
                                                                    </button>
                                                                </div> *@
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </BSTabContent>
                                        </BSTab>
                                        <!--Tab Comsumable-->
                                        <BSTab>
                                            <BSTabLabel>@AppData.LangResource[AppData.LanguageID, 272]</BSTabLabel>
                                                <BSTabContent>
                                                    <div class="form-row ml-2 mt-3">
                                                        <div class="form-group row col-md-4">
                                                            <label class="col-sm-4 col-form-label">@AppData.LangResource[AppData.LanguageID, 259]:</label>
                                                            <div class="col-sm-8">
                                                                <div class="input-group">
                                                                    <select class="form-control" @bind="stock.eventStockNumber">
                                                                        <option value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                                                        @foreach (var item in projectInventoryStocks)
                                                                        {
                                                                            <option value="@item.ProjectStockNumber">
                                                                                @item.ProjectStockNumber.ToUpper()&nbsp;
                                                                                @{
                                                                                    string stockName = "";
                                                                                    var resultStock = inventoryStocks.Find(x => x.InventoryStockID == item.ProjectStockID);
                                                                                    if (resultStock != null)
                                                                                    {
                                                                                        stockName = resultStock.inventory.InventoryENName;
                                                                                        //var resultConsumable = inventories.Find(x => x.InventoryNumber == resultStock.InventoryNumber);
                                                                                        //if (resultConsumable != null)
                                                                                        //{
                                                                                        
                                                                                        //}
                                                                                    }
                                                                                }
                                                                                @if (string.IsNullOrEmpty(stockName))
                                                                                {
                                                                                    <b>(-)</b>
                                                                                }
                                                                                else
                                                                                {
                                                                                    <b>(@stockName)</b>
                                                                                }
                                                                            </option>
                                                                        }
                                                                    </select>
                                                                </div>

                                                            </div>
                                                        </div>
                                                        <div class="form-group row col-md-4">
                                                            @{
                                                                var resultQuantity = projectInventoryStocks.Find(x => x.ProjectID == int.Parse(id) && x.ProjectStockNumber == stock.eventStockNumber);
                                                                if (resultQuantity != null)
                                                                {
                                                                    stockinproject = resultQuantity.RemainQuantity;
                                                                }
                                                                else
                                                                {
                                                                    stockinproject = 0;
                                                                }
                                                             }
                                                            <label class="col-sm-4 col-form-label">@AppData.LangResource[AppData.LanguageID, 260]: @stockinproject</label>
                                                            <div class="col-sm-8"> 
                                                                <div class="input-group">
                                                                
                                                                    @if (stock.eventStockNumber != null && stock.eventStockNumber != "")
                                                                    {
                                                                       
                                                                    <input type="number" @bind-value="stock.eventStockQuantity" class="form-control" />


                                                                }
                                                                else
                                                                {
                                                                    stock.eventStockQuantity = 0;
                                                                    stockinproject = 0;
                                                                    <input type="number" disabled @bind-value="stock.eventStockQuantity" class="form-control" />
                                                                    }
                                                                </div>

                                                            </div>
                                                        </div>
                                                        <div class="form-group row">
                                                            <div class="input-group">
                                                            @if (AppData.CurrentPermission.Find(i => i.permissionID == 2).permissionC)
                                                            {

                                                                <button type="button" @onclick="OnAddStock" class="btn btn-warning ml-3">
                                                                    <i class="fas fa-plus"></i>
                                                                </button>
                                                            }


                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="row">
                                                    <div class="col-md-12">
                                                        <div class="card">
                                                            <div class="card-header">@AppData.LangResource[AppData.LanguageID, 273]</div>
                                                            <div class="card-body">
                                                                <div class="scrollBar fixTableHead table-responsive scroll-inner" style="margin-top: 0.5rem; height:335px;">
                                                                    <table class="table table-bordered table-striped text-center" style="width: 100%; margin-bottom: 0.5rem;">
                                                                        <thead class="fixedthead">
                                                                            <tr>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 244]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 259]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 261]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 260]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 246]</th>
                                                                            </tr>
                                                                        </thead>
                                                                        <tbody class="scrollContent">

                                                                            @foreach (var i in eventStocks)
                                                                            {
                                                                                <tr>
                                                                                    <td>@(eventStocks.IndexOf(i) + 1)</td>
                                                                                    <td>@i.eventStockNumber</td>
                                                                                    <td>@(inventoryStocks.Find(j => j.InventoryStockNumber == i.eventStockNumber) != null ? inventoryStocks.Find(j => j.InventoryStockNumber == i.eventStockNumber).inventory.InventoryENName : "-")</td>
                                                                                    
                                                                                    <td>@i.eventStockQuantity</td>                                                                            
                                                                                    
                                                                                    <td>
                                                                                        @if (AppData.CurrentPermission.Find(i => i.permissionID == 2).permissionD || this.record.isCheckOutConsumableAll())
                                                                                        {
                                                                                            <i class="far fa-trash-alt" @onclick="() => OnputStock(i.eventInventoryID)"></i>
                                                                                        }
                                                                                    </td>
                                                                                </tr>
                                                                            }

                                                                        </tbody>
                                                                    </table>
                                                                </div>
                                                                @* <div class="text-cente">
                                                                    <button type="button" @onclick="PostInventoryStockCheckOut" class="btn  " style="background-color:#2E2BFF; color:#fff">
                                                                        @AppData.LangResource[AppData.LanguageID, 16]
                                                                    </button>
                                                                </div> *@
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </BSTabContent>
                                        </BSTab>
                                        <!--Tab PersonalDose-->
                                        <BSTab>
                                            <BSTabLabel>@AppData.LangResource[AppData.LanguageID, 589]</BSTabLabel>
                                            <BSTabContent>
                                                <div class="form-row mt-3 ml-2">
                                                    <div class="form-group row col-md-4">
                                                        <label class="col-sm-4 col-form-label">@AppData.LangResource[AppData.LanguageID, 253]:</label>
                                                        <div class="col-sm-8">
                                                            <div class="input-group">
                                                                @if (addEventPersonalDose.EventPDSupportId != null && addEventPersonalDose.EventPDSupportId != 0)
                                                                {
                                                                    <select class="form-control" @bind="addEventPersonalDose.EventPDUserName" disabled>
                                                                        <option value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                                                        @foreach (var item in teams)
                                                                        {

                                                                            <option value="@item.UserID">@(accounts.Find(x => x.UserID == item.UserID).FirstName)</option>

                                                                        }
                                                                    </select>
                                                                }
                                                                else
                                                                {
                                                                    <select class="form-control" @bind="addEventPersonalDose.EventPDUserName">
                                                                        <option value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                                                        @foreach (var item in teams)
                                                                        {

                                                                            <option value="@item.UserID">@(accounts.Find(x => x.UserID == item.UserID).FirstName)</option>

                                                                        }
                                                                    </select>
                                                                }


                                                            </div>

                                                        </div>
                                                    </div>
                                                    <div class="form-group row col-md-4">
                                                        <label class="col-sm-4 col-form-label">Support Team:</label>
                                                        <div class="col-sm-8">
                                                            <div class="input-group">
                                                                @if (addEventPersonalDose.EventPDUserName != null)
                                                                {
                                                                    <select class="form-control" @bind="addEventPersonalDose.EventPDSupportId" disabled>
                                                                        <option value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                                                        @foreach (var i in SupportTeam)
                                                                        {

                                                                            <option value="@i.ProjectSupportTeamID">@(listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.ProjectSupportTeamID) != null ? listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.ProjectSupportTeamID).Name : "-")</option>

                                                                        }
                                                                    </select>

                                                                }
                                                                else
                                                                {
                                                                    <select class="form-control" @bind="addEventPersonalDose.EventPDSupportId">
                                                                        <option value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                                                        @foreach (var i in SupportTeam)
                                                                        {

                                                                            <option value="@i.ProjectSupportTeamID">@(listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.ProjectSupportTeamID) != null ? listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.ProjectSupportTeamID).Name : "-")</option>

                                                                        }
                                                                    </select>
                                                                }



                                                            </div>

                                                        </div>
                                                    </div>
                                                    <div class="form-group row">
                                                        <div class="input-group">
                                                            <span>
                                                                @if (AppData.CurrentPermission.Find(i => i.permissionID == 2).permissionC)
                                                                {
                                                                    <button type="submit" @onclick="OnAddEventPersonalDose" class="btn btn-warning ml-3">
                                                                        @AppData.LangResource[AppData.LanguageID, 620]
                                                                    </button>

                                                                }
                                                            </span>


                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="row">
                                                    <div class="col-md-12">
                                                        <div class="card">
                                                            <div class="card-header">@AppData.LangResource[AppData.LanguageID, 590]</div>
                                                            <div class="card-body">
                                                                <div class="scrollBar fixTableHead table-responsive scroll-inner" style="margin-top: 0.5rem; height:335px;">
                                                                    <table class="table table-bordered table-striped text-center" style="width: 100%; margin-bottom: 0.5rem;">
                                                                        <thead class="fixedthead">
                                                                            <tr>
                                                                                <th width="24">@AppData.LangResource[AppData.LanguageID, 244]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 117]</th>
                                                                                <th width="300">@AppData.LangResource[AppData.LanguageID, 168]</th>
                                                                                <th width="150">@AppData.LangResource[AppData.LanguageID, 589]</th>
                                                                                <th width="150">@AppData.LangResource[AppData.LanguageID, 146]</th>
                                                                            </tr>
                                                                        </thead>
                                                                        <tbody class="scrollContent">
                                                                           
                                                                            @foreach (var i in eventPersonalDoses)
                                                                            {
                                                                                <tr>
                                                                                    <td>@(eventPersonalDoses.IndexOf(i) + 1)</td>
                                                                                    @if (i.EventPDUserName != new Guid("00000000-0000-0000-0000-000000000000"))
                                                                                    {
                                                                                        <td>
                                                                                            @accounts.Find(j => j.UserID == @i.EventPDUserName).FirstName  @accounts.Find(j => j.UserID == @i.EventPDUserName).LastName
                                                                                        </td>
                                                                                    }
                                                                                    else if (i.EventPDSupportId != 0)
                                                                                    {
                                                                                        <td>@(listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.EventPDSupportId) != null ? listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.EventPDSupportId).Name : "-")</td>
                      
                                                                                    }
                                                                                    
                                                                                        <td>
                                                                                           @*  <select class="form-control" @bind="i.EventPDInstumentName">
                                                                                                <option value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                                                                                @foreach (var item in listInstrument)
                                                                                                {
                                                                                                    var result = instrumentTypes.Find(x => x.InstrumentTypeID == item.InstrumentTypeID);
                                                                                                    if (result != null && result.InstrumentTypeID == 13 && result.IsActive == true)
                                                                                                    {
                                                                                                        <option value="@item.InstrumentENName">@item.InstrumentENName</option>
                                                                                                    }

                                                                                                }
                                                                                            </select> *@

                                                                                             <select class="form-control" @bind="i.EventPDInstumentName">
                                                                                                <option value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                                                                                @foreach (var item in instrument)
                                                                                                {
                                                                                                    var result = instrumentTypes.Find(x => x.InstrumentTypeID == item.InstrumentTypeID);
                                                                                                    if (result != null && result.InstrumentTypeID == 17 && result.IsActive == true)
                                                                                                    {
                                                                                                        <option value="@item.InstrumentENName">@item.InstrumentENName</option>
                                                                                                    }

                                                                                                }
                                                                                            </select>

                                                                                        </td>
                                                                                        <td>
                                                                                        <div style="display: flex; align-items: center;">
                                                                                            <input type="number" min="0" @bind="i.EventPDAccumulation" class="form-control" placeholder="Personal Dose" step="0.0001" />
                                                                                            <span style="margin-left: 5px;">
                                                                                                @(AppData.recordEventUnits.Find(x => x.RecordEventUnitID == i.EventPDAccumulationUnit) != null ? AppData.recordEventUnits.Find(x => x.RecordEventUnitID == i.EventPDAccumulationUnit).RecordEventUnitName : "-")
                                                                                            </span>
                                                                                        </div>

                                                                                        </td>
                                                                                        <td>
                                                                                            @if (AppData.CurrentPermission.Find(i => i.permissionID == 2).permissionD)
                                                                                            {
                                                                                                <i class="far fa-trash-alt" @onclick="() => OnDeleteEventPersonalDose(i.EventPDId)"></i>
                                                                                            }
                                                                                        </td>
                                                                                    
                                                                                    
                                                                                    
                                                                                </tr>
                                                                            }
                                                                        </tbody>
                                                                    </table>
                                                                </div>

                                                                <div class="text-right">
                                                                    <span>

                                                                        <button type="submit" disabled="@isSaving" @onclick="SaveEventPersonalDoseTeamAndSupportTeam" class="btn btn-warning">
                                                                            @AppData.LangResource[AppData.LanguageID, 621]
                                                                        </button>


                                                                    </span>


                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </BSTabContent>
                                        </BSTab>

                                    </BSTabList>
                                    <BSTabSelectedContent />
                                </BSTabGroup>
                            </div>
                        </div>
                    </div>
                </div>
            </BSTabContent>
        </BSTab>
        <BSTab>
            <div>
                <BSTabLabel><span>@AppData.LangResource[AppData.LanguageID, 248]</span></BSTabLabel>
            </div>
                <BSTabContent>

                    <div class="row margin-row-card">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header">@AppData.LangResource[AppData.LanguageID, 262]</div>
                            <div class="card-body">

                                <BSTabGroup>
                                    <BSTabList>
                                        <BSTab>
                                            <BSTabLabel>@AppData.LangResource[AppData.LanguageID, 263]  </BSTabLabel>
                                            <BSTabContent>

                                                <div class="row">
                                                    <div class="col-md-12">
                                                        <div class="card">
                                                            <div class="card-header">
                                                                @AppData.LangResource[AppData.LanguageID, 265]
                                                               
                                                                @if (AppData.CurrentPermission.Find(i => i.permissionID == 2).permissionC)
                                                                {
                                                                    <button type="button" @onclick="ShowSubEvent" class="btn btn-warning margin-btn">
                                                                        <i class="fas fa-plus"></i>
                                                                    </button>
                                                                }
                                                                
                                                                
                                                            </div>
                                                            <div class="card-body">
                                                                <div class="scrollBar fixTableHead table-responsive scroll-inner" style="height:535px;">
                                                                    <table class="table table-bordered table-striped text-center">
                                                                        <thead class="fixedthead">
                                                                            <tr>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 56]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 237]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 266]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 238]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 145]</th>
                                                                                <th>@AppData.LangResource[AppData.LanguageID, 146]</th>
                                                                            </tr>
                                                                        </thead>
                                                                        <tbody class="scrollContent">

                                                                            @foreach (var item in eventResults)
                                                                            {
                                                                                <tr @key=item.eventResultID>
                                                                                    <td>@(item.eventResultDate != null ? item.eventResultDate.Value.Date.ToString("dd/MM/yyyy") : "-")</td>
                                                                                    <td>@item.eventResultDescription</td>
                                                                                    <td>@item.result</td>
                                                                                    <td>
                                                                                        <div class="text-center">
                                                                                            <div>
                                                                                                @if (!string.IsNullOrEmpty(item.eventResultImageData))
                                                                                                {
                                                                                                    <a href="@($"{Config["nurl"]}{Config["nurlFileRecordEvent"]}{item.eventResultImageData}")" data-lightbox="gallery" data-title="@AppData.LangResource[AppData.LanguageID, 296]">
                                                                                                        <img class="img-show m-2" loading="lazy" src="@($"{Config["nurl"]}{Config["nurlFileRecordEvent"]}{item.eventResultImageData}")" alt="Event Image" />
                                                                                                    </a>
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    <img class="img-show m-2" loading="lazy" src="assets/images/no-img/ImageNotFount.png">
                                                                                                }
                                                                                            </div>
                                                                                        </div>

                                                                                    </td>
                                                                                               
                                                                                    <td>
                                                                                        @if (AppData.CurrentPermission.Find(j => j.permissionID == 2).permissionU)
                                                                                        {
                                                                                            <a class="btn btn-warning" @onclick="@(() => OnUpdate(item))"><i class="far fa-edit"></i></a>
                                                                                        }
                                                                                    </td>
                                                                                    <td>
                                                                                        @if (AppData.CurrentPermission.Find(j => j.permissionID == 2).permissionD)
                                                                                        {
                                                                                            <a class="btn btn-danger" @onclick="() => OnDeletedResult(item.eventResultID)"><i class="far fa-trash-alt"></i></a>
                                                                                        }
                                                                                    </td>
                                                                                </tr>

                                                                            }

                                                                        </tbody>
                                                                    </table>

                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                            </BSTabContent>
                                        </BSTab>
                                        <BSTab>
                                            <BSTabLabel> @AppData.LangResource[AppData.LanguageID, 264]</BSTabLabel>
                                                <BSTabContent>

                                                    <EditForm Model="@record" OnValidSubmit="SaveOnputEvent">
                                                        <div class="row" style="margin-top: 1rem;">
                                                            <label class="col-12 col-md-4 col-lg-2 col-form-label">
                                                                <span>@AppData.LangResource[AppData.LanguageID, 267]</span>
                                                        </label>
                                                        <div class="col-12 col-md-12 col-lg-8 input-box-bottom">
                                                            <InputTextArea rows="5" @bind-Value="record.eventContaminationDescription" class="form-control"></InputTextArea>
                                                        </div>
                                                        <!---ValidationMessage For="@(() => recordEvent.EventDetail)" id="validationTextArea" /-->
                                                    </div>
                                                    <div class="row">
                                                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                                                            <span>@AppData.LangResource[AppData.LanguageID, 268]</span>
                                                        </label>
                                                        <div class="col-12 col-md-12 col-lg-8 input-box-bottom">
                                                            <InputTextArea rows="5" @bind-Value="record.eventRadiationScreening" class="form-control"></InputTextArea>
                                                        </div>
                                                        <!---ValidationMessage For="@(() => recordEvent.EventDetail)" id="validationTextArea" /-->
                                                    </div>
                                                    <div class="row">
                                                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                                                            <span>@AppData.LangResource[AppData.LanguageID, 269] :</span>
                                                        </label>
                                                        <div class="col-12 col-md-12 col-lg-8 input-box-bottom">
                                                            <InputTextArea rows="5" @bind-Value="record.eventRecommendResult" class="form-control"></InputTextArea>
                                                        </div>
                                                        <!---ValidationMessage For="@(() => recordEvent.EventDetail)" id="validationTextArea" /-->
                                                    </div>
                                                    <div class="text-center">
                                                        @if (AppData.CurrentPermission.Find(i => i.permissionID == 2).permissionU)
                                                        {
                                                            <button type="submit" class="btn margin-btn" style="background-color:#4CBB17; color:#fff">@AppData.LangResource[AppData.LanguageID, 44]</button>
                                                        }
                                                        @if (AppData.CurrentPermission.Find(i => i.permissionID == 2).permissionE)
                                                        {
                                                            <button type="button" @onclick="OnReport" class="btn btn-warning margin-btn">@AppData.LangResource[AppData.LanguageID, 274]</button>
                                                        }
                                                    </div>
                                                </EditForm>




                                            </BSTabContent>
                                        </BSTab>
                                    </BSTabList>
                                    <BSTabSelectedContent />
                                </BSTabGroup>


                            </div>
                        </div>
                    </div>
                </div>

            </BSTabContent>
        </BSTab>
    </BSTabList>
    <BSTabSelectedContent />
    <a href="@($"Record/EventRegister/{EventNumber}")" class="btn margin-btn" style="background-color:#7F7F7F; color:#fff" name="back" id="back">@AppData.LangResource[AppData.LanguageID, 49]</a>

</BSTabGroup>


@if (showModalSubEvent)
{
    <div class="modal @((showModalSubEvent) ? "show" : "")" tabindex="-1" role="dialog" style="display:@((showModalSubEvent) ? "block" : "none")">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header btn-header-color">
                    @if (addEventResult.eventResultID == 0)
                    {
                        <h5 class="modal-title">@AppData.LangResource[AppData.LanguageID, 58]</h5>
                    }
                    else
                    {
                        <h5 class="modal-title">@AppData.LangResource[AppData.LanguageID, 580] </h5>
                    }

                    <button type="button" class="close" aria-label="Close" @onclick="Onclear">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-4 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 56]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-8">
                            <div class="input-group input-box-bottom">
                                @if (addEventResult.eventResultID == 0)
                                {
                                    <!-- Set default date value if EventStartDate has value -->
                                    <input type="date" value="@(record.EventStartDate.HasValue ? record.EventStartDate.Value.Date.ToString("yyyy-MM-dd") : DateTime.Now.Date.ToString("yyyy-MM-dd"))" @oninput="OnEventResultDateChanged" class="form-control" />
                                }
                                else
                                {
                                    <input type="date" @bind="addEventResult.eventResultDate" class="form-control" />
                                }
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-4 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 237]</span>
                        </label>
                        <div class="col-12 col-md-12 col-lg-8 input-box-bottom">
                            <textarea rows="2" @bind="addEventResult.eventResultDescription" class="form-control" />
                        </div>
                    </div>
                    
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-4 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 241]</span>
                        </label>
                        <div class="col-12 col-md-12 col-lg-8 input-box-bottom">
                            @if (addEventResult.SupportTeam != null && addEventResult.SupportTeam != 0)
                            {
                                <select class="form-control" @bind="addEventResult.eventResultBy" disabled>
                                    <option selected value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                    @foreach (var item in teams)
                                    {
                                        <option value="@item.UserID">@accounts.Find(i => i.UserID == @item.UserID).FirstName</option>
                                    }
                                </select>
                            }
                            else
                            {
                                <select class="form-control" @bind="addEventResult.eventResultBy">
                                    <option selected value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                    @foreach (var item in teams)
                                    {
                                        <option value="@item.UserID">@accounts.Find(i => i.UserID == @item.UserID).FirstName</option>
                                    }
                                </select>
                            }

                        </div>
                    </div>
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-4 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 486]:</span>
                        </label>
                        <div class="col-12 col-md-12 col-lg-8 input-box-bottom">
                            @if (addEventResult.eventResultBy != null)
                            {
                                <select class="form-control" @bind="addEventResult.SupportTeam" disabled>
                                    <option selected value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                    @foreach (var item in SupportTeam)
                                    {

                                        <option value="@item.EventSupportTeamID">@(listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == item.ProjectSupportTeamID) != null ? listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == item.ProjectSupportTeamID).Name : "-") </option>
                                    }
                                </select>
                            }
                            else
                            {
                                <select class="form-control" @bind="addEventResult.SupportTeam">
                                    <option selected value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                    @foreach (var item in SupportTeam)
                                    {
                                        <option value="@item.EventSupportTeamID">@(listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == item.ProjectSupportTeamID) != null ? listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == item.ProjectSupportTeamID).Name : "-") </option>
                                    }
                                </select>
                            }

                        </div>

                    </div>

                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-4 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 240]</span>
                        </label>
                        <div class="col-12 col-md-12 col-lg-8 input-box-bottom">
                            <select class="form-control" @bind="addEventResult.eventResultInstrumentNumber">
                                <option selected value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                @foreach (var item in instrument)
                                {
                                    <option value="@item.InstrumentNumber">@item.InstrumentENName</option>
                                }
                            </select>
                        </div>

                    </div>

                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-4 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 443] :</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-8">
                            <div class="input-group input-box-bottom">
                                <input type="text" @bind-value="addEventResult.RadiationNuclide" class="form-control" />

                            </div>
                        </div>

                    </div>
                    <div class="row">

                        <label class="col-12 col-md-4 col-lg-4 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 444]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <input type="text" @bind-value="addEventResult.result" class="form-control" />

                            </div>
                        </div>

                        <label class="col-12 col-md-4 col-lg-1 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 243]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <select class="form-control" @bind="addEventResult.eventResultUnit">
                                    <option selected value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                    @foreach (var item in iunit)
                                    {
                                        <option value="@item.InstrumentUnitID">@item.InstrumentUnitName</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="row">

                        <label class="col-12 col-md-4 col-lg-4 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 445]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <input type="text" @bind-value="addEventResult.MeterDistance" class="form-control" />

                            </div>
                        </div>

                        <label class="col-12 col-md-4 col-lg-1 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 243]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <select class="form-control" @bind="addEventResult.MeterDistanceUnit">
                                    <option selected value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                    @foreach (var item in iunit)
                                    {
                                        <option value="@item.InstrumentUnitID">@item.InstrumentUnitName</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="row">

                        <label class="col-12 col-md-4 col-lg-4 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 446]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <input type="text" @bind-value="addEventResult.FeetDistance" class="form-control" />

                            </div>
                        </div>

                        <label class="col-12 col-md-4 col-lg-1 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 243]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <select class="form-control" @bind="addEventResult.FeetDistanceUnit">
                                    <option selected value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                    @foreach (var item in iunit)
                                    {
                                        <option value="@item.InstrumentUnitID">@item.InstrumentUnitName</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">

                        <label class="col-12 col-md-4 col-lg-4 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 447]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <input type="text" @bind="addEventResult.Backgroud" class="form-control" />

                            </div>
                        </div>

                        <label class="col-12 col-md-4 col-lg-1 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 243]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <select class="form-control" @bind="addEventResult.BackgroudUnit">
                                    <option selected value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                    @foreach (var item in iunit)
                                    {
                                        <option value="@item.InstrumentUnitID">@item.InstrumentUnitName</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    @* <div class="row">

                <label class="col-12 col-md-4 col-lg-4 col-form-label">
                <span>@AppData.LangResource[AppData.LanguageID, 544]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-3">
                <div class="input-group input-box-bottom">
                <input type="text" @bind-value="addEventResult.DoseAccumulation" class="form-control" />

                </div>
                </div>

                <label class="col-12 col-md-4 col-lg-1 col-form-label">
                <span>@AppData.LangResource[AppData.LanguageID, 243]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-3">
                <div class="input-group input-box-bottom">
                <select class="form-control" @bind="addEventResult.DoseAccumulationUnit">
                <option selected value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                @foreach (var item in AppData.recordEventUnits)
                {
                <option value="@item.RecordEventUnitID">@item.RecordEventUnitName</option>
                }
                </select>
                </div>
                </div>
                </div> *@



                    <div class="row">

                        <label class="col-12 col-md-4 col-lg-4 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 574]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-4">
                            <div class="input-group input-box-bottom">

                                <input type="time" @bind-value="addEventResult.StartWorkingHour" @oninput="ClearCalculateResult" class="form-control" />

                            </div>
                        </div>

                    </div>

                    <div class="row">

                        <label class="col-12 col-md-4 col-lg-4 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 575]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-4">
                            <div class="input-group input-box-bottom">
                                <input type="time" @bind-value="addEventResult.EndWorkingHour" @oninput="CalculateResult" class="form-control" />

                            </div>
                        </div>
                    </div>
                    <div class="row">

                        <label class="col-12 col-md-4 col-lg-4 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 573]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-4">
                            <div class="input-group input-box-bottom">
                                <input disabled type="text" @bind-value="addEventResult.Hour" class="form-control" />

                            </div>
                        </div>
                    </div>


                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-4 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 238]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-8">
                            <div class="input-group input-box-bottom">

                                <InputFile OnChange="OnAddInputFileDefaultChange" @ref="fileInput" class="custom-file-input file-name-custom" id="documentFile" />


                                @if (AppData.LanguageID == 0)
                                {
                                    <label class="custom-file-label" id="documentFileLabel" for="documentFile" data-browse="@AppData.LangResource[AppData.LanguageID, 313]">@AppData.LangResource[AppData.LanguageID, 313]</label>
                                }
                                else
                                {
                                    <label class="custom-file-label" id="documentFileLabel" for="documentFile" data-browse="@AppData.LangResource[AppData.LanguageID, 313]">@AppData.LangResource[AppData.LanguageID, 313]</label>
                                }

                            </div>
                        </div>

                    </div>
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-4 col-form-label">
                            <span></span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-8">
                            <div class="input-group input-box-bottom">

                                @if (addEventResult.eventResultImageData != "")
                                {
                                    <div class="card" style="width:30rem;">
                                        <div class="card-body">
                                            @if (!string.IsNullOrEmpty(AddImageShow))
                                            {
                                                <a href="@("data:image/png;base64,"+AddImageShow+"")" data-lightbox="gallery" data-title="@AppData.LangResource[AppData.LanguageID, 296]">
                                                    <img class="img-show float-left m-2" loading="lazy" src="@("data:image/png;base64,"+AddImageShow+"")" />
                                                </a>

                                            }
                                            else
                                            {
                                                <a href="@($"{Config["nurl"]}{Config["nurlFileRecordEvent"]}{addEventResult.eventResultImageData}")" data-lightbox="gallery" data-title="@AppData.LangResource[AppData.LanguageID, 296]">
                                                    <img class="img-show float-left m-2" loading="lazy" src="@($"{Config["nurl"]}{Config["nurlFileRecordEvent"]}{addEventResult.eventResultImageData}")" />
                                                </a>

                                            }

                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <img class="img-show text-center" src="assets/images/no-img/ImageNotFount.png">
                                }

                            </div>


                        </div>
                    </div>

                    <div class="row">

                        <label class="col-12 col-md-4 col-lg-4 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 239]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-8">
                            <div class="input-group input-box-bottom">
                                <textarea @bind="addEventResult.eventResultImageName" class="form-control" />

                            </div>
                        </div>
                        <!---ValidationMessage For="@(() => recordEvent.EventDetail)" id="validationTextArea" /-->
                    </div>


                </div>
                <div class="modal-footer">
                    <button type="button" class="btn" style="background-color:#4CBB17; color:#fff" @onclick="OnAddResult">@AppData.LangResource[AppData.LanguageID, 44]</button>
                    <button type="reset" class="btn" style="background-color:#B90F1B; color:#fff" @onclick="Onclear">@AppData.LangResource[AppData.LanguageID, 158]</button>
                    <!--button type="button" class="btn" style="background-color:#4CBB17; color:#fff" @onclick="PostPersonalDose">Test</button--->
                </div>
            </div>
        </div>
    </div>
}



<BSModal class="row style-justify mt-5" @ref="Load" IsCentered="true" Size="Size.Small" IgnoreEscape="true" IgnoreClickOnBackdrop="true">
    <BSModalBody>
        <div class="text-center mt-3">
            <span class="spinner-border text-warning spinner-border-sm " role="status" aria-hidden="true"
                  style="font-size: 16pt; width: 36px; height: 36px; color: Gold " />
        </div>
        <div class="text-center pt-3" style=" font-size: 16pt">
            Loading...
        </div>
    </BSModalBody>
</BSModal>


<!--ModalResponseConfirmDeleteTeam-->
<BSModal @ref="ModalResponseConfirmDeleteTeam">

    <BSModalHeader OnClick="@(() => ModalResponseConfirmDeleteTeam.Hide())">@AppData.LangResource[AppData.LanguageID, 592]</BSModalHeader>
    <BSModalBody>
        <div class="row">
            <div class="col-md-12">
                <div class="alert-modal-delete">
                    @{
                        var result = teams.Find(x => x.EventTeamID == deleteTeamID);
                        string firstName = "-";
                        string lastName = "-";
                        if (result != null)
                        {
                            var account = accounts.Find(x => x.UserID == result.UserID);
                            if (account != null)
                            {
                                firstName = account.FirstName;
                                lastName = account.LastName;
                            }
                        }
                    }
                    @AppData.LangResource[AppData.LanguageID, 593]<br/> @firstName @lastName?

                </div>
            </div>
        </div>
    </BSModalBody>
    <BSModalFooter>

        <button type="submit" class="btn btn-danger" @onclick="SaveDeleteEventTeam">@AppData.LangResource[AppData.LanguageID, 610]</button>


        <button type="reset" class="btn btn-info" @onclick="@(() => ModalResponseConfirmDeleteTeam.Hide())">@AppData.LangResource[AppData.LanguageID, 158]</button>
    </BSModalFooter>
</BSModal>

<!--ModalResponseConfirmDeleteSupportTeam-->
<BSModal @ref="ModalResponseConfirmDeleteSupportTeam">

    <BSModalHeader OnClick="@(() => ModalResponseConfirmDeleteSupportTeam.Hide())">@AppData.LangResource[AppData.LanguageID, 594]</BSModalHeader>
    <BSModalBody>
        <div class="row">
            <div class="col-md-12">
                <div class="alert-modal-delete">
                    @{
                        string firstName = "-";
                        var resultSuppportEvent = SupportTeam.Find(x => x.EventSupportTeamID == deleteSupportTeamID);
                        if(resultSuppportEvent != null)
                        {
                            var result = listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == resultSuppportEvent.ProjectSupportTeamID);
                            if (result != null)
                            {

                                firstName = result.Name;


                            }
                        }
                        
                    }
                    @AppData.LangResource[AppData.LanguageID, 595]<br />@firstName?

                </div>
            </div>
        </div>
    </BSModalBody>
    <BSModalFooter>

        <button type="submit" class="btn btn-danger" @onclick="SaveDeleteEventSupportTeam">@AppData.LangResource[AppData.LanguageID, 610]</button>
        <button type="reset" class="btn btn-info" @onclick="@(() => ModalResponseConfirmDeleteSupportTeam.Hide())">@AppData.LangResource[AppData.LanguageID, 158]</button>
    </BSModalFooter>
</BSModal>

<!--ModalResponseConfirmDeleteInstrument-->
<BSModal @ref="ModalResponseConfirmDeleteInstrument">

    <BSModalHeader OnClick="@(() => ModalResponseConfirmDeleteInstrument.Hide())">@AppData.LangResource[AppData.LanguageID, 597]</BSModalHeader>
    <BSModalBody>
        <div class="row">
            <div class="col-md-12">
                <div class="alert-modal-delete">
                    @AppData.LangResource[AppData.LanguageID, 598]<br />
                    @(Lins.Find(x => x.eventInstrumentID == deleteInstrumentID) != null ? Lins.Find(x => x.eventInstrumentID == deleteInstrumentID).instrumentNumber.ToUpper() : "-")?
                </div>
            </div>
        </div>
    </BSModalBody>
    <BSModalFooter>

        <button type="submit" class="btn btn-danger" @onclick="SaveDeleteEventInstrument">@AppData.LangResource[AppData.LanguageID, 610]</button>


        <button type="reset" class="btn btn-info" @onclick="@(() => ModalResponseConfirmDeleteInstrument.Hide())">@AppData.LangResource[AppData.LanguageID, 158]</button>
    </BSModalFooter>
</BSModal>

<!--ModalResponseConfirmDeleteInventory-->
<BSModal @ref="ModalResponseConfirmDeleteInventory">

    <BSModalHeader OnClick="@(() => ModalResponseConfirmDeleteInventory.Hide())">@AppData.LangResource[AppData.LanguageID, 599]</BSModalHeader>
    <BSModalBody>
        <div class="row">
            <div class="col-md-12">
                <div class="alert-modal-delete">
                    @AppData.LangResource[AppData.LanguageID, 600] <br />
                    @(eventStocks.Find(x => x.eventInventoryID == deleteInventoryStockID) != null ? eventStocks.Find(x => x.eventInventoryID == deleteInventoryStockID).eventStockNumber.ToUpper() : "-")?
                </div>
            </div>
        </div>
    </BSModalBody>
    <BSModalFooter>

        <button type="submit" class="btn btn-danger" @onclick="SaveDeleteEventInventoryStock">@AppData.LangResource[AppData.LanguageID, 610]</button>


        <button type="reset" class="btn btn-info" @onclick="@(() => ModalResponseConfirmDeleteInventory.Hide())">@AppData.LangResource[AppData.LanguageID, 158]</button>
    </BSModalFooter>
</BSModal>

<!--ModalResponseConfirmDeletePersonalDoseTeam-->
<BSModal @ref="ModalResponseConfirmDeletePersonalDose">

    <BSModalHeader OnClick="@(() => ModalResponseConfirmDeletePersonalDose.Hide())">@AppData.LangResource[AppData.LanguageID, 596]</BSModalHeader>
    <BSModalBody>
        <div class="row">
            <div class="col-md-12">
                <div class="alert-modal-delete">
                    @{
                        var result = eventPersonalDoses.Find(x => x.EventPDId == deletePersonalDoseTeamID);
                        string firstName = "-";
                        string lastName = "-";
                        string supportName = "-";
                        if (result != null)
                        {
                            var account = accounts.Find(x => x.UserID == result.EventPDUserName);
                            var supportTeam = listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == result.EventPDSupportId);
                           
                            if (account != null)
                            {
                                firstName = account.FirstName;
                                lastName = account.LastName;
                            }

                            if (supportTeam != null)
                            {
                                supportName = supportTeam.Name;
                            }

                            if (result.EventPDUserName != new Guid("00000000-0000-0000-0000-000000000000"))
                            {

                                <div>@AppData.LangResource[AppData.LanguageID, 593]<br /> @firstName @lastName?</div>
                            }
                            else if (result.EventPDSupportId != 0)
                            {
                                 <div>@AppData.LangResource[AppData.LanguageID, 595]<br /> @supportName?</div>

                            }
                        }

                       
                    }

                    

                    @* @if (result != null)
                    {
                        if (result.EventPDUserName != new Guid("00000000-0000-0000-0000-000000000000") && result.EventPDInstumentName != "" && result.EventPDInstumentName != null && result.EventPDAccumulation != null)
                        {

                            <h3> Because this person's name has been <br /> saved to Personal Dose,  Do you want to <br /> delete the team data for @firstName @lastName?</h3>

                        }
                        else if (result.EventPDSupportId != 0 && result.EventPDInstumentName != "" && result.EventPDInstumentName != null && result.EventPDAccumulation != null)
                        {
                            <h3> Because this person's name has been <br /> saved to Personal Dose,  Do you want to <br /> delete the  team data for @supportName?</h3>
                        }
                        else if (result.EventPDUserName != new Guid("00000000-0000-0000-0000-000000000000"))
                        {

                            <h3> Do you want to delete the Team data for<br /> @firstName @lastName?</h3>
                        }
                        else if (result.EventPDSupportId != 0)
                        {
                            <h3> Do you want to delete the Support Team data for<br /> @supportName?</h3>

                        }
                        
                       
                    } *@
                   



                </div>
            </div>
        </div>
    </BSModalBody>
    <BSModalFooter>

        <button type="submit" class="btn btn-danger" @onclick="SavaDeleteEventPersonalDose">@AppData.LangResource[AppData.LanguageID, 610]</button>


        <button type="reset" class="btn btn-info" @onclick="@(() => ModalResponseConfirmDeletePersonalDose.Hide())">@AppData.LangResource[AppData.LanguageID, 158]</button>
    </BSModalFooter>
</BSModal>

<!--ModalResponseConfirmSavePersonalDoseTeam-->
<BSModal @ref="ModalResponseConfirmSavePersonalDose">

    <BSModalHeader OnClick="@(() => ModalResponseConfirmSavePersonalDose.Hide())">Confirm Save Personal Dose</BSModalHeader>
    <BSModalBody>
        <div class="row">
            <div class="col-md-12">
                <div class="alert-modal-delete">
                    

                    Do you want to Save the Personal Doses All?


                </div>
            </div>
        </div>
    </BSModalBody>
    <BSModalFooter>

        <button type="submit" class="btn btn-success" @onclick="SaveEventPersonalDoseTeamAndSupportTeam">@AppData.LangResource[AppData.LanguageID, 44]</button>


        <button type="reset" class="btn btn-danger" @onclick="@(() => ModalResponseConfirmSavePersonalDose.Hide())">@AppData.LangResource[AppData.LanguageID, 158]</button>
    </BSModalFooter>
</BSModal>





@code {
    int progress = 0;

    /// <summary>
    /// Parameter Event Number for Manage
    /// </summary>
    [Parameter]
    public string EventNumber { get; set; }

    [Parameter]
    public string id { get; set; }

    public int? statusID;
    /// <summary>
    /// Main Event
    /// </summary>
    public RecordEvent record = new RecordEvent();
    public RecordProject recordProject = new RecordProject();

    /// <summary>
    /// RecordEventTeam
    /// </summary>
    public RecordEventTeam addEventTeam = new RecordEventTeam();
    Guid? userID;//กำหนดค่าให้เป็น null ป้องกันไม่ให้ขึ้น reload

    /// <summary>
    /// Inital Accout List
    /// </summary>
    List<Account> accounts = new List<Account>();

    /// <summary>
    /// Record EventTeam
    /// </summary>
    List<RecordEventTeam> teams = new List<RecordEventTeam>();

    /// <summary>
    /// SupportTeam
    /// </summary>
    public EventSupportTeam addSupportTeam = new EventSupportTeam();

    /// <summary>
    /// Record EventSupportTeam
    /// </summary>
    List<EventSupportTeam> SupportTeam = new List<EventSupportTeam>();

    List<EventResultImage> LImage = new List<EventResultImage>();

    List<ProjectSupportTeam> listProjectSupportTeams = new List<ProjectSupportTeam>();




    /// <summary>
    /// Initial Instrument
    /// </summary>
    EvntInstrument ins = new EvntInstrument();

    List<EvntInstrument> Lins = new List<EvntInstrument>();
    List<Instrument> instrument = new List<Instrument>();
    Instrument nolistiInstrument = new Instrument();


    /// <summary>
    ///
    ///Initial  Stock
    /// </summary>
    ///

    EventStock stock = new EventStock();
    List<EventStock> eventStocks = new List<EventStock>();

    /// <summary>
    /// for Check
    /// </summary>
    List<InventoryStock> inventoryStocks = new List<InventoryStock>();
    /// <summary>
    /// for Getlooup
    /// </summary>
    List<Inventory> inventories = new List<Inventory>();


    public EventPersonalDose addEventPersonalDose= new EventPersonalDose();
    public EventPersonalDose editEventPersonalDose = new EventPersonalDose();

    private List<Instrument> listInstrument = new List<Instrument>();
    private List<InstrumentBrand> instrumentBrands = new List<InstrumentBrand>();
    private List<InstrumentModel> instrumentModels = new List<InstrumentModel>();
    private List<InstrumentAgency> instrumentAgencys = new List<InstrumentAgency>();
    private List<InstrumentType> instrumentTypes = new List<InstrumentType>();
    private List<InstrumentStatus> instrumentStatus = new List<InstrumentStatus>();
    private List<InstrumentLocation> instrumentLocations = new List<InstrumentLocation>();

    /// <summary>
    /// Resuit Sub Event
    /// </summary>
    EventResult addEventResult = new EventResult();
    EventResult editEventResult = new EventResult();

    List<EventResult> eventResults = new List<EventResult>();

    List<InstrumentUnit> iunit = new List<InstrumentUnit>();
    List<RecordEvent> records = new List<RecordEvent>();


    public List<ProjectTeam> projectTeams = new List<ProjectTeam>();
    public List<ProjectSupportTeam> projectSupportTeam = new List<ProjectSupportTeam>();
    public List<ProjectInstrument> projectInstruments = new List<ProjectInstrument>();
    public List<ProjectInventoryStock> projectInventoryStocks = new List<ProjectInventoryStock>();
    public List<RecordProject> recordProjectRecords = new List<RecordProject>();
    public List<EventPersonalDose> eventPersonalDoses = new List<EventPersonalDose>();
    public List<RecordEventProvince> recordEventProvinces = new List<RecordEventProvince>();
    public List<PersonalDose> personalDoses = new List<PersonalDose>();

    public List<InventoryBrand> inventoryBrands = new List<InventoryBrand>();
    public List<InventoryStockType> inventoryStockTypes = new List<InventoryStockType>();
    public List<InventoryLocation> inventoryLocations = new List<InventoryLocation>();


    private bool showModalSubEvent = false;
    private bool showModalEditSubEvent = false;
    private InputFile fileInput;

    public string currentDate { get; set; }
    public string currentTime { get; set; }
    public DateTime Time_Current { get; set; }
    public string ConvertedStartTime { get; set; } = string.Empty;
    public string ConvertedEndTime { get; set; } = string.Empty;
    public string StartDate { get; set; } = string.Empty;
    public string EndDate { get; set; } = string.Empty;
    public string recordEventStartDate { get; set; } = string.Empty;

    public BSModal? ModalResponseConfirmDeleteTeam { get; set; }
    public BSModal? ModalResponseConfirmDeleteSupportTeam { get; set; }
    public BSModal? ModalResponseConfirmDeleteInventory { get; set; }
    public BSModal? ModalResponseConfirmDeleteInstrument { get; set; }
    public BSModal? ModalResponseConfirmDeletePersonalDose { get; set; }
    public BSModal? ModalResponseConfirmSavePersonalDose { get; set; }

    protected int deleteInstrumentID;
    protected int deleteTeamID;
    protected int? deleteSupportTeamID;
    protected int deleteInventoryStockID;
    protected int deletePersonalDoseTeamID;
    public int? stockinproject = 0;
    public bool isSaving { get; set; }
    private bool checkChange { get; set; }

    private double eventPDAccumulation;
    private string formattedAccumulation = "";




    protected override async Task OnInitializedAsync()
    {
        try
        {


            recordEventProvinces = AppData.Provinces;


            inventoryStockTypes = AppData.inventoryStockTypes;
            //inventoryBrands = AppData.inventoryBrands;
            //inventoryAgencys = AppData.inventoryAgencys;
            inventoryLocations = AppData.inventoryLocations;

            inventories = AppData.inventorys;
            //var activeInventory = inventories.Find(i => i.IsActive == true).IsActive;
            //if (activeInventory == true)
            //    inventories = await _masterData.GetAllActiveMasterDataAsync<Inventory>("ActiveInventory");

            inventoryStockTypes = AppData.inventoryStockTypes;
            //var activeInventoryStockType = inventoryStockTypes.Find(i => i.IsActive == true).IsActive;
            //if(activeInventoryStockType == true)
            //    inventoryStockTypes = await _masterData.GetAllActiveMasterDataAsync<InventoryStockType>("ActiveInventoryStockType");


            inventoryLocations = AppData.inventoryLocations;

            inventoryStocks = await Http.GetFromJsonAsync<List<InventoryStock>>($"{Config["nurl"]}/api/GetInventoryStock");
            foreach (var i in inventoryStocks)
            {
                i.GetLookUp(inventories, inventoryLocations, inventoryStockTypes);
            }

            projectTeams = await Http.GetFromJsonAsync<List<ProjectTeam>>($"{Config["nurl"]}/api/GetProjectTeam/{int.Parse(id)}");

            projectSupportTeam = await Http.GetFromJsonAsync<List<ProjectSupportTeam>>($"{Config["nurl"]}/api/ProjectSupportTeam/{int.Parse(id)}");

            listProjectSupportTeams = await Http.GetFromJsonAsync<List<ProjectSupportTeam>>($"{Config["nurl"]}/api/ProjectSupportTeam");

            projectInstruments = await Http.GetFromJsonAsync<List<ProjectInstrument>>($"{Config["nurl"]}/api/GetProjectInstrument/{int.Parse(id)}");

            projectInventoryStocks = await Http.GetFromJsonAsync<List<ProjectInventoryStock>>($"{Config["nurl"]}/api/GetProjectInventory/{int.Parse(id)}");

            List<RecordEvent> re = await Http.GetFromJsonAsync<List<RecordEvent>>($"{Config["nurl"]}/api/GetEventRecord/{EventNumber}");
            this.record = re.First<RecordEvent>();




            var resultStatus = await _masterDataPhase2.GetMasterDataAsyncByID<RecordProject>("ProjectRecordByID", int.Parse(id));
            if (resultStatus != null)
            {
                statusID = resultStatus.ProjectInsStatusID;
                recordProject = resultStatus;
            }

            accounts = await Http.GetFromJsonAsync<List<Account>>($"{Config["aurl"]}/api/GetAccount");


            teams = await Http.GetFromJsonAsync<List<RecordEventTeam>>($"{Config["nurl"]}/api/GetEventTeam/{record.EventID}");


            SupportTeam = await Http.GetFromJsonAsync<List<EventSupportTeam>>($"{Config["nurl"]}/api/EventSupportTeam/{record.EventID}");

            eventPersonalDoses = await Http.GetFromJsonAsync<List<EventPersonalDose>>($"{Config["nurl"]}/api/GetEventPersonalDose/EventById/{record.EventID}");
            //อัปเดตค่า Original eventPersonalDose
            foreach (var i in eventPersonalDoses)
            {
                i.OriginalEventPDInstumentName = i.EventPDInstumentName;
                i.OriginalEventPDAccumulation = i.EventPDAccumulation;
                i.OriginalEventPDUserName = i.EventPDUserName;
                i.OriginalEventPDSupportId = i.EventPDSupportId;

            }

            inventories = AppData.inventorys;
            //instrumentBrands = AppData.instrumentBrands;

            listInstrument = await _masterData.GetMasterDataAsync<Instrument>("Instrument");

            //instrumentModels = AppData.instrumentModels
            instrumentTypes = await _masterData.GetMasterDataAsync<InstrumentType>("InstrumentType");
            //var activeInstrumentType = instrumentTypes.Find(i => i.IsActive == true).IsActive;
            //if(activeInstrumentType == true)
            //    instrumentTypes = await _masterData.GetAllActiveMasterDataAsync<InstrumentType>("ActiveInstrumentType");

            instrumentBrands = AppData.instrumentBrands;
            //var activeInstrumentBrand = instrumentBrands.Find(i => i.IsActive == true).IsActive;
            //if (activeInstrumentBrand == true)
            //    instrumentBrands = await _masterData.GetAllActiveMasterDataAsync<InstrumentBrand>("ActiveInstrumentBrand");

            instrumentAgencys = AppData.instrumentAgencies;
            //var activeInstrumentAgencies = instrumentAgencys.Find(i => i.IsActive == true).IsActive;
            //if(activeInstrumentAgencies == true)
            //    instrumentAgencys = await _masterData.GetAllActiveMasterDataAsync<InstrumentAgency>("ActiveInstrumentAgencies");

            instrumentModels = AppData.instrumentModels;
            //var activeInstrumentModel = instrumentModels.Find(i => i.IsActive == true).IsActive;
            //if(activeInstrumentModel == true)
            //    instrumentModels = await _masterData.GetAllActiveMasterDataAsync<InstrumentModel>("ActiveInstrumentModel");

            instrumentLocations = AppData.instrumentLocations;
            //var activeInstrumentLocation = instrumentLocations.Find(i => i.IsActive == true).IsActive;
            //if (activeInstrumentLocation == true)
            //    instrumentLocations = await _masterData.GetAllActiveMasterDataAsync<InstrumentLocation>("ActiveInstrumentLocation");

            instrumentStatus = AppData.instrumentStatus;

            recordProjectRecords = AppData.recordProjects;

            ///Added and edited on 17-02-65
            Lins = await Http.GetFromJsonAsync<List<EvntInstrument>>($"{Config["nurl"]}/api/GetEventInstrument/{record.EventID}");
            var resultLins = Lins.OrderBy(i => i.instrumentNumber).ToList();
            foreach (var i in resultLins)
            {
                if (i.instrumentNumber != "")
                {
                    this.instrument.AddRange(await Http.GetFromJsonAsync<IList<Instrument>>($"{Config["nurl"]}/api/GetInstrumentByInstrumentNumber/{i.instrumentNumber}"));
                }
            }
            if (this.instrument.Count() > 0)
            {

                foreach (var i in this.instrument)
                {
                    i.GetLookup(instrumentBrands, instrumentModels, instrumentAgencys, instrumentStatus, instrumentLocations);
                }


            }


            eventStocks = await Http.GetFromJsonAsync<List<EventStock>>($"{Config["nurl"]}/api/GetEventInventory/{record.EventID}");
            foreach (var i in eventStocks)
            {

                this.inventoryStocks.AddRange(await Http.GetFromJsonAsync<IList<InventoryStock>>($"{Config["nurl"]}/api/GetInventoryStockByStockNumber/{i.eventStockNumber}"));
            }

            foreach (var i in inventoryStocks)
            {
                i.GetLookUp(inventories);
            }


            iunit = await Http.GetFromJsonAsync<List<InstrumentUnit>>($"{Config["nurl"]}/api/InstrumentUnit/GetAllInstrumentUnits");
            var result = iunit.Find(i => i.IsActive == true).IsActive;
            if (result == true)
            {
                iunit = await Http.GetFromJsonAsync<List<InstrumentUnit>>($"{Config["nurl"]}/api/InstrumentUnit/GetAllActiveInstrumentUnits");
            }
            else
            {
                iunit = await Http.GetFromJsonAsync<List<InstrumentUnit>>($"{Config["nurl"]}/api/InstrumentUnit/GetAllInstrumentUnits");
            }

            eventResults = await Http.GetFromJsonAsync<List<EventResult>>($"{Config["nurl"]}/api/GetEventResult/{record.EventID}");

            personalDoses = await Http.GetFromJsonAsync<List<PersonalDose>>($"{Config["nurl"]}/api/PersonalDoses/All");



            //addEventTeam.UserID = accounts.First().UserID;
            ///Orderby
            if (AppData.LanguageID == 0)
            {
                var resultAccounts = accounts.OrderBy(a => a.FirstName).ToList();
                accounts = resultAccounts;
                var resultTeams = teams.OrderBy(t => t.EventID).ToList();
                teams = resultTeams;
                var resultSuportTeams = SupportTeam.OrderBy(s => s.Name).ToList();
                SupportTeam = resultSuportTeams;
                var resultInstrumentEN = instrument.OrderBy(i => i.InstrumentENName).ToList();
                instrument = resultInstrumentEN;
                var resultIunuit = iunit.OrderBy(u => u.InstrumentUnitName).ToList();
                iunit = resultIunuit;
            }
            else
            {
                var resultInstrumentTH = instrument.OrderBy(i => i.InstrumentTHName).ToList();
                instrument = resultInstrumentTH;
            }

            if (!addEventResult.eventResultDate.HasValue)
            {
                addEventResult.eventResultDate = record.EventStartDate;
            }


        }
        catch(Exception e)
        {
            ToastService.ShowError($"Error: {e.Message}");
        }


    }

    // private async Task OnInitalDatePicker()
    // {
    //     await jsRuntime.InvokeVoidAsync("InitDatePicker", startDatePicker, DotNetObjectReference.Create(this));
    //     await jsRuntime.InvokeVoidAsync("InitDateEndPicker", endDatePicker, DotNetObjectReference.Create(this));
    //     //await jsRuntime.InvokeVoidAsync("addClickHandler");
    // }


    public ElementReference startDatePicker;
    public ElementReference endDatePicker;

    [JSInvokable]
    public Task SetSelectedDate(string formattedDate)
    {
        if (DateTime.TryParseExact(formattedDate, "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime parsedDate))
        {
            if (record.EventStartDate.HasValue)
            {
                DateTime existingDateTime = record.EventStartDate.Value;
                record.EventStartDate = new DateTime(parsedDate.Year, parsedDate.Month, parsedDate.Day, existingDateTime.Hour, existingDateTime.Minute, existingDateTime.Second);

            }
            else
            {
                record.EventStartDate = parsedDate;
            }

            //StartDate = formattedDate;
        }

        StateHasChanged(); // อัพเดท UI
        return Task.CompletedTask;
    }


    [JSInvokable]
    public Task SetSelectedDateEnd(string formattedDateEnd)
    {
        if (DateTime.TryParseExact(formattedDateEnd, "dd/MM/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime parsedDate))
        {
            if (record.EventEndDate.HasValue)
            {
                DateTime existingDateTime = record.EventEndDate.Value;
                record.EventEndDate = new DateTime(parsedDate.Year, parsedDate.Month, parsedDate.Day, existingDateTime.Hour, existingDateTime.Minute, existingDateTime.Second);
            }
            else
            {
                record.EventEndDate = parsedDate;
            }

            //EndDate = formattedDateEnd;
        }

        StateHasChanged(); // อัพเดท UI
        return Task.CompletedTask;
    }


    public async Task ConvertTime(string inputId)
    {
        string convertedStartTime = await jsRuntime.InvokeAsync<string>("convertTime", inputId);
        if (!string.IsNullOrEmpty(convertedStartTime))
        {
            if (DateTime.TryParseExact(convertedStartTime, "HH:mm", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime parsedTime))
            {
                record.StartTime = parsedTime;
            }
            else
            {
                // Handle invalid time input
                ToastService.ShowError("Invalid time format.");
            }
        }
        else
        {
            // If no time is entered, keep the existing time
            record.StartTime = record.EventStartDate.HasValue ? record.EventStartDate.Value : DateTime.Now;
        }
    }



    public async Task ConverTimeEnd(string inputEndId)
    {
        string convertedEndTime = await jsRuntime.InvokeAsync<string>("convertEndTime", inputEndId);
        if (!string.IsNullOrEmpty(convertedEndTime))
        {
            if (DateTime.TryParseExact(convertedEndTime, "HH:mm", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime parsedTime))
            {
                record.EndTime = parsedTime;
            }
            else
            {
                // Handle invalid time input
                ToastService.ShowError("Invalid time format.");
            }
        }
        else
        {
            // If no time is entered, keep the existing time
            record.EndTime = record.EventEndDate.HasValue ? record.EventEndDate.Value : DateTime.Now;
        }

    }


    public async Task OnAddEventPersonalDose()
    {
        Load.Show();
        try
        {
            if (addEventPersonalDose.EventPDUserName != new Guid() && addEventPersonalDose.EventPDUserName != null)
            {
                if (statusID == 3)
                {
                    ToastService.ShowError("This project has been completed.");

                }
                else if (!eventPersonalDoses.Any(i => i.EventPDUserName == addEventPersonalDose.EventPDUserName))
                {

                    addEventPersonalDose.EventId = record.EventID;
                    addEventPersonalDose.ProjectId = int.Parse(id);
                    addEventPersonalDose.EventPDAccumulationUnit = 1;
                    addEventPersonalDose.EventPDSupportId = 0;
                    addEventPersonalDose.EventPDDate = DateTime.Now;
                    addEventPersonalDose.IsTeam = true;
                    addEventPersonalDose.EventPDAccumulation = 0;
                    var respond = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/RegisterEventPersonalDose", addEventPersonalDose);
                    ToastService.ShowSuccess("Successfully added Team Personal Dose");
                    eventPersonalDoses = await Http.GetFromJsonAsync<List<EventPersonalDose>>($"{Config["nurl"]}/api/GetEventPersonalDose/EventById/{record.EventID}");
                    addEventPersonalDose.EventPDUserName = null;
                    addEventPersonalDose.EventPDSupportId = null;
                    //อัปเดตค่า Original eventPersonalDose
                    foreach (var i in eventPersonalDoses)
                    {
                        i.OriginalEventPDInstumentName = i.EventPDInstumentName;
                        i.OriginalEventPDAccumulation = i.EventPDAccumulation;
                        i.OriginalEventPDUserName = i.EventPDUserName;
                        i.OriginalEventPDSupportId = i.EventPDSupportId;

                    }
                }
                else
                {
                    ToastService.ShowError("Team Add Duplicatie");
                }
            }
            else if (addEventPersonalDose.EventPDSupportId != null && addEventPersonalDose.EventPDSupportId != 0)
            {
                if (statusID == 3)
                {
                    ToastService.ShowError("This project has been completed.");

                }
                else if (!eventPersonalDoses.Any(i => i.EventPDSupportId == addEventPersonalDose.EventPDSupportId))
                {

                    addEventPersonalDose.EventId = record.EventID;
                    addEventPersonalDose.ProjectId = int.Parse(id);
                    addEventPersonalDose.EventPDAccumulationUnit = 1;
                    addEventPersonalDose.EventPDUserName = new Guid("00000000-0000-0000-0000-000000000000");
                    addEventPersonalDose.EventPDDate = DateTime.Now;
                    addEventPersonalDose.IsTeam = false;
                    addEventPersonalDose.EventPDAccumulation = 0;
                    var respond = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/RegisterEventPersonalDose", addEventPersonalDose);
                    ToastService.ShowSuccess("Successfully added Support Team Personal Dose");
                    eventPersonalDoses = await Http.GetFromJsonAsync<List<EventPersonalDose>>($"{Config["nurl"]}/api/GetEventPersonalDose/EventById/{record.EventID}");
                    addEventPersonalDose.EventPDSupportId = null;
                    addEventPersonalDose.EventPDUserName = null;
                    //อัปเดตค่า Original eventPersonalDose
                    foreach (var i in eventPersonalDoses)
                    {
                        i.OriginalEventPDInstumentName = i.EventPDInstumentName;
                        i.OriginalEventPDAccumulation = i.EventPDAccumulation;
                        i.OriginalEventPDUserName = i.EventPDUserName;
                        i.OriginalEventPDSupportId = i.EventPDSupportId;

                    }
                }
                else
                {
                    ToastService.ShowError("Support Team Add Duplicatie");
                }
            }
            else
            {
                ToastService.ShowError("Please select a team or support team");
            }
        }
        catch (Exception e)
        {
            ToastService.ShowError($"ERR: {e.Message}");
        }
        Load.Hide();
    }

    public async Task OnDeleteEventPersonalDose(int id)
    {
        if (statusID == 3)
        {
            await SavaDeleteEventPersonalDose();
        }
        else
        {
            deletePersonalDoseTeamID = id;
            ModalResponseConfirmDeletePersonalDose.Show();
        }



    }

    protected async Task SavaDeleteEventPersonalDose()
    {
        if (statusID == 3)
        {
            ToastService.ShowError("This project has been completed.");
        }
        else
        {
            var respond = await Http.PostAsync($"{Config["nurl"]}/api/DeleteEventPersonalDose/{deletePersonalDoseTeamID}", null);
            ToastService.ShowSuccess("Deleted Event PersonalDose Success");
            eventPersonalDoses = await Http.GetFromJsonAsync<List<EventPersonalDose>>($"{Config["nurl"]}/api/GetEventPersonalDose/EventById/{record.EventID}");
            //อัปเดตค่า Original eventPersonalDose
            foreach (var i in eventPersonalDoses)
            {
                i.OriginalEventPDInstumentName = i.EventPDInstumentName;
                i.OriginalEventPDAccumulation = i.EventPDAccumulation;
                i.OriginalEventPDUserName = i.EventPDUserName;
                i.OriginalEventPDSupportId = i.EventPDSupportId;

            }

            ModalResponseConfirmDeletePersonalDose.Hide();
        }

    }

    public async Task OnSaveEventPersonalDoseTeanAndSupportTeam()
    {
        if (statusID == 3)
        {
            await SaveEventPersonalDoseTeamAndSupportTeam();
        }
        else if (eventPersonalDoses.Count == 0)
        {
            await SaveEventPersonalDoseTeamAndSupportTeam();
        }
        else
        {
            ModalResponseConfirmSavePersonalDose.Show();
        }
    }


    protected async Task SaveEventPersonalDoseTeamAndSupportTeam()
    {
        try
        {
            if (statusID == 3)
            {
                ToastService.ShowError("This project has been completed.");
            }
            else if (eventPersonalDoses.Count == 0)
            {
                ToastService.ShowError("Please select a team or support team");
            }
            else
            {
                HttpResponseMessage respondUpdate = new HttpResponseMessage(System.Net.HttpStatusCode.Unused);
                HttpResponseMessage respondRegister = new HttpResponseMessage(System.Net.HttpStatusCode.Unused);
                EventPersonalDose eventpersonalDose = new EventPersonalDose();
                PersonalDose personalDose = new PersonalDose();

                currentDate = DateTime.Now.ToString("yyyy-MM-dd");
                currentTime = DateTime.Now.ToString("HH:mm");

                // Condition to convert time to 24-hour format
                if (DateTime.TryParseExact(currentTime, "HH:mm", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime convertedTime))
                    Time_Current = convertedTime;

                if (!string.IsNullOrEmpty(currentDate))
                {
                    personalDose.CreateRegister = DateTime.ParseExact(currentDate, "yyyy-MM-dd", CultureInfo.InvariantCulture);
                }

                DateTime combinedCurrentDateTime = personalDose.CreateRegister.Date + Time_Current.TimeOfDay;

                isSaving = true; // ปิดการใช้งานปุ่ม Save
                StateHasChanged(); // อัปเดต UI

                if (record.TotalHour == null || record.TotalHour == "")
                {
                    ToastService.ShowError($"Need to update the time the event.");
                }
                else
                {
                    bool checkChange = false; // Initialize checkChange as false

                    foreach (var i in eventPersonalDoses)
                    {

                        // Check for changes
                        var hasChanges = i.EventPDInstumentName != i.OriginalEventPDInstumentName ||
                          i.EventPDAccumulation != i.OriginalEventPDAccumulation ||
                          i.EventPDUserName != i.OriginalEventPDUserName ||
                          i.EventPDSupportId != i.OriginalEventPDSupportId;



                        if (hasChanges)
                        {
                            checkChange = true;

                            i.OriginalEventPDUserName = i.EventPDUserName;
                            i.OriginalEventPDSupportId = i.EventPDSupportId;
                            i.OriginalEventPDInstumentName = i.EventPDInstumentName;
                            i.OriginalEventPDAccumulation = i.EventPDAccumulation;

                            eventpersonalDose = new EventPersonalDose
                                {
                                    EventId = i.EventId,
                                    ProjectId = i.ProjectId,
                                    EventPDUserName = i.EventPDUserName,
                                    EventPDSupportId = i.EventPDSupportId,
                                    EventPDAccumulation = i.EventPDAccumulation,
                                    EventPDAccumulationUnit = i.EventPDAccumulationUnit,
                                    EventPDInstumentName = i.EventPDInstumentName,
                                    EventPDDate = i.EventPDDate,
                                    IsTeam = i.IsTeam
                                };


                            // Find existing PersonalDose entry
                            var existingPersonalDose = personalDoses.Find(x => x.FromEventPersonalDose == i.EventId &&
                                    x.FromProjectPersonalDose == i.ProjectId &&
                                    x.UserID == i.EventPDUserName &&
                                    x.UserSupportTeamID == i.EventPDSupportId);


                            if (existingPersonalDose != null)
                            {
                                string Position = "";
                                var resultPositionTeam = accounts.Find(x => x.UserID == i.EventPDUserName) != null ? accounts.Find(x => x.UserID == i.EventPDUserName).PositionName : "-";
                                if (i.EventPDUserName != new Guid("00000000-0000-0000-0000-000000000000"))
                                {
                                    Position = resultPositionTeam; 
                                }

                                var reusltPositionSupportTeam = SupportTeam.Find(x => x.ProjectSupportTeamID == i.EventPDSupportId) != null ? SupportTeam.Find(x => x.ProjectSupportTeamID == i.EventPDSupportId).Position : "-";
                                if (i.EventPDSupportId != 0)
                                {
                                    Position = reusltPositionSupportTeam;
                                }

                                // Update existing PersonalDose
                                personalDose = new PersonalDose
                                    {
                                        PersonalDoseID = existingPersonalDose.PersonalDoseID,
                                        CreateRegister = combinedCurrentDateTime,
                                        UserID = i.EventPDUserName,
                                        UserSupportTeamID = i.EventPDSupportId,
                                        StartDatetime = record.EventStartDate.HasValue ? record.EventStartDate.Value : DateTime.Now,
                                        EndDatetime = record.EventEndDate.HasValue ? record.EventEndDate.Value : DateTime.Now,
                                        LocationName = recordEventProvinces.Find(x => x.ProvinceID == record.ProvinceID)?.ProvinceTHName ?? "-",
                                        InstrumentName = i.EventPDInstumentName,
                                        DoseAccumulation = i.EventPDAccumulation ?? 0,
                                        DoseAccumulationUnit = i.EventPDAccumulationUnit,
                                        TotalHour = record.TotalHour,
                                        FromProjectPersonalDose = i.ProjectId,
                                        FromEventPersonalDose = i.EventId,
                                        PositionName = Position
                                    };

                                respondUpdate = await Http.PutAsJsonAsync($"{Config["nurl"]}/api/RegisterEventPersonalDose/{i.EventPDId}", eventpersonalDose);
                                respondRegister = await Http.PutAsJsonAsync($"{Config["nurl"]}/api/PersonalDoses/{personalDose.PersonalDoseID}", personalDose);
                            }
                            else
                            {

                                string Position = "";
                                var resultPositionTeam = accounts.Find(x => x.UserID == i.EventPDUserName) != null ? accounts.Find(x => x.UserID == i.EventPDUserName).PositionName : "-";
                                if (i.EventPDUserName != new Guid("00000000-0000-0000-0000-000000000000"))
                                {
                                    Position = resultPositionTeam;
                                }

                                var reusltPositionSupportTeam = SupportTeam.Find(x => x.ProjectSupportTeamID == i.EventPDSupportId) != null ? SupportTeam.Find(x => x.ProjectSupportTeamID == i.EventPDSupportId).Position : "-";
                                if (i.EventPDSupportId != 0)
                                {
                                    Position = reusltPositionSupportTeam;
                                }
                                // Create new PersonalDose
                                personalDose = new PersonalDose
                                    {
                                        PersonalDoseID = 0, // or any suitable default value
                                        CreateRegister = combinedCurrentDateTime,
                                        UserID = i.EventPDUserName,
                                        UserSupportTeamID = i.EventPDSupportId,
                                        StartDatetime = record.EventStartDate.HasValue ? record.EventStartDate.Value : DateTime.Now,
                                        EndDatetime = record.EventEndDate.HasValue ? record.EventEndDate.Value : DateTime.Now,
                                        LocationName = recordEventProvinces.Find(x => x.ProvinceID == record.ProvinceID)?.ProvinceTHName ?? "-",
                                        InstrumentName = i.EventPDInstumentName,
                                        DoseAccumulation = i.EventPDAccumulation ?? 0,
                                        DoseAccumulationUnit = i.EventPDAccumulationUnit,
                                        TotalHour = record.TotalHour,
                                        FromProjectPersonalDose = i.ProjectId,
                                        FromEventPersonalDose = i.EventId,
                                        PositionName = Position
                                    };

                                respondUpdate = await Http.PutAsJsonAsync($"{Config["nurl"]}/api/RegisterEventPersonalDose/{i.EventPDId}", eventpersonalDose);
                                respondRegister = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/PersonalDoses", personalDose);
                            }

                            if (respondRegister.StatusCode == System.Net.HttpStatusCode.OK)
                            {
                                if (i.EventPDUserName != new Guid("00000000-0000-0000-0000-000000000000"))
                                {
                                    ToastService.ShowSuccess($"Personal Dose {(existingPersonalDose != null ? "Update" : "Save")} {(accounts.Find(x => x.UserID == i.EventPDUserName) != null ? accounts.Find(x => x.UserID == i.EventPDUserName).FirstName : "-")} Successfully");
                                }
                                else if (i.EventPDSupportId != 0)
                                {
                                    ToastService.ShowSuccess($"Personal Dose {(existingPersonalDose != null ? "Update" : "Save")} {(listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.EventPDSupportId) != null ? listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.EventPDSupportId).Name : "-")} Successfully");
                                }
                            }
                        }

                    }
                    if (checkChange == false)
                    {
                        ToastService.ShowError($"You must choose between instrument or personal dose.");
                    }


                    StateHasChanged(); // อัปเดต UI เพื่อแสดงข้อความ Toast
                    await Task.Delay(3000); // รอ 3 วินาที
                                            //ToastService.ShowSuccess($"Success:");
                }
                ModalResponseConfirmSavePersonalDose.Hide();
            }
        }
        catch (Exception e)
        {
            ToastService.ShowError($"ERR: {e.Message}");
        }
        finally
        {
            isSaving = false; // เปิดการใช้งานปุ่ม Save
            StateHasChanged(); // อัปเดต UI
        }
    }




    /// <summary>
    /// clearURL
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("clearURL");
            await jsRuntime.InvokeAsync<object>("showFileName");

            // await jsRuntime.InvokeVoidAsync("InitDatePicker", startDatePicker, DotNetObjectReference.Create(this));
            //await jsRuntime.InvokeVoidAsync("InitDateEndPicker", endDatePicker, DotNetObjectReference.Create(this));
            // await jsRuntime.InvokeVoidAsync("addClickHandler");
        }

    }


    /// <summary>
    /// On Save Click Event
    /// </summary>
    /// <returns></returns>
    async Task OnputEvent()
    {
        // var result = await RecordService.CreateEventRegister(recordRegister);
        //NavigationManager.NavigateTo($"/Record/posts/{result.City}");

        record.eventUpdateBy = (Guid)AppData.UserID;
        record.eventUpdateDate = DateTime.Today;

        var respond = await Http.PutAsJsonAsync<RecordEvent>($"{Config["nurl"]}/api/UpdateEventRecord/{record.EventID}", record);
        if (respond.StatusCode == System.Net.HttpStatusCode.OK)
        {

            //ToastService.ShowSuccess("Successfully");


            try
            {
                List<RecordEvent> result = await respond.Content.ReadFromJsonAsync<List<RecordEvent>>();
                // var rec =result.First<RecordEvent>();
                this.record = result.First<RecordEvent>();

            }
            catch (Exception e)
            {
                ToastService.ShowError("Error! ");
            }
        }
        else
        {
            ToastService.ShowError("Error! "); //
            Console.WriteLine(respond);
        }

    }

    protected void OnDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out var newDate))
        {
            if (record.EventStartDate.HasValue)
            {
                DateTime existingDateTime = record.EventStartDate.Value;
                record.EventStartDate = new DateTime(newDate.Year, newDate.Month, newDate.Day, existingDateTime.Hour, existingDateTime.Minute, existingDateTime.Second);

            }
            else
            {
                record.EventStartDate = newDate.Date;
            }


        }
    }

    protected void OnDateEndChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out var newEndDate))
        {
            if (record.EventEndDate.HasValue)
            {
                DateTime existingDateTime = record.EventEndDate.Value;
                record.EventEndDate = new DateTime(newEndDate.Year, newEndDate.Month, newEndDate.Day, existingDateTime.Hour, existingDateTime.Minute, existingDateTime.Second);
            }
            else
            {
                record.EventEndDate = newEndDate;
            }
        }
    }

    private string forceChange = DateTime.Now.ToString("yyyyMMddHHmmss");

    protected void OnEventResultDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out var newEventResultDate))
        {
            addEventResult.eventResultDate = newEventResultDate;
        }
    }

    async Task SaveOnputEvent()
    {


        record.eventUpdateBy = (Guid)AppData.UserID;
        record.eventUpdateDate = DateTime.Today;


        if (record.EventStartDate == default(DateTime))
        {
            record.EventStartDate = DateTime.Now;
        }


        if (record.EventEndDate == default(DateTime))
        {
            record.EventEndDate = DateTime.Now;
        }



        // Ensure that time is set correctly
        if (record.StartTime == default(DateTime))
        {
            record.StartTime = record.EventStartDate.HasValue ? record.EventStartDate.Value : DateTime.Now;
        }

        if (record.EndTime == default(DateTime))
        {
            record.EndTime = record.EventEndDate.HasValue ? record.EventEndDate.Value : DateTime.Now;
        }



        if (statusID == 3)
        {
            ToastService.ShowError("This project has been completed.");
        }
        else
        {
            DateTime combinedStartDateTime = record.EventStartDate.Value.Date + record.StartTime.TimeOfDay;
            DateTime combinedEndDateTime = record.EventEndDate.Value.Date + record.EndTime.TimeOfDay;

            if (record.EventRegisterDate.HasValue && combinedStartDateTime.Date >= record.EventRegisterDate.Value.Date && combinedEndDateTime.Date <= recordProject.ProjectEndDate.Date)
            {
                if (combinedEndDateTime < combinedStartDateTime)
                {
                    ToastService.ShowError("End date/time must be greater than start date/time");
                }
                else
                {
                    // Calculate duration
                    TimeSpan duration = combinedEndDateTime - combinedStartDateTime;
                    int totalMinutes = (int)Math.Max(duration.TotalMinutes, 0);
                    int totalHours = (int)Math.Floor(duration.TotalHours);
                    int minutes = totalMinutes % 60;

                    string formattedDuration = $"{totalHours} ชั่วโมง {minutes} นาที";
                    record.TotalHour = formattedDuration;

                    // Update EventStartDate and EventEndDate with combined date and time
                    record.EventStartDate = combinedStartDateTime;
                    record.EventEndDate = combinedEndDateTime;

                    var respond = await Http.PutAsJsonAsync<RecordEvent>($"{Config["nurl"]}/api/UpdateEventRecord/{record.EventID}", record);
                    if (respond.StatusCode == System.Net.HttpStatusCode.OK)
                    {
                        ToastService.ShowSuccess("Successfully");

                        try
                        {
                            List<RecordEvent> result = await respond.Content.ReadFromJsonAsync<List<RecordEvent>>();
                            this.record = result.First();
                        }
                        catch (Exception e)
                        {
                            ToastService.ShowError("Error! ");
                        }
                    }
                    else
                    {
                        ToastService.ShowError("Error! ");
                    }
                }

            }
            else
            {
                ToastService.ShowError("The operating dates fall outside the event/project dates.");
            }
        }
        // if (combinedEndDateTime < combinedStartDateTime)
        // {
        //     ToastService.ShowError("End date/time must be greater than start date/time");
        // }
        // else
        // {
        //     // Calculate duration
        //     TimeSpan duration = combinedEndDateTime - combinedStartDateTime;
        //     int totalMinutes = (int)Math.Max(duration.TotalMinutes, 0);
        //     int totalHours = (int)Math.Floor(duration.TotalHours);
        //     int minutes = totalMinutes % 60;

        //     string formattedDuration = $"{totalHours} ชั่วโมง {minutes} นาที";
        //     record.TotalHour = formattedDuration;

        //     // Update EventStartDate and EventEndDate with combined date and time
        //     record.EventStartDate = combinedStartDateTime;
        //     record.EventEndDate = combinedEndDateTime;

        //     var respond = await Http.PutAsJsonAsync<RecordEvent>($"{Config["nurl"]}/api/UpdateEventRecord/{record.EventID}", record);
        //     if (respond.StatusCode == System.Net.HttpStatusCode.OK)
        //     {
        //         ToastService.ShowSuccess("Successfully");

        //         try
        //         {
        //             List<RecordEvent> result = await respond.Content.ReadFromJsonAsync<List<RecordEvent>>();
        //             this.record = result.First();
        //         }
        //         catch (Exception e)
        //         {
        //             ToastService.ShowError("Error! ");
        //         }
        //     }
        //     else
        //     {
        //         ToastService.ShowError("Error! ");
        //     }
        // }
    }



    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    public async Task OnAddSupportEventTeam()
    {

        if (addSupportTeam.ProjectSupportTeamID > 0 && addSupportTeam.ProjectSupportTeamID != 0)
        {
            if (statusID == 3)
            {
                ToastService.ShowError("This project has been completed.");

            }
            else if (!SupportTeam.Any(i => i.ProjectSupportTeamID == addSupportTeam.ProjectSupportTeamID))
            {
                addSupportTeam.EventID = record.EventID;
                addSupportTeam.Name = projectSupportTeam.Find(x => x.ProjectSupportTeamID == addSupportTeam.ProjectSupportTeamID) != null ? projectSupportTeam.Find(x => x.ProjectSupportTeamID == addSupportTeam.ProjectSupportTeamID).Name:"-";
                addSupportTeam.Position = projectSupportTeam.Find(x => x.ProjectSupportTeamID == addSupportTeam.ProjectSupportTeamID) != null ? projectSupportTeam.Find(x => x.ProjectSupportTeamID == addSupportTeam.ProjectSupportTeamID).Position : "-";
                addSupportTeam.Department = projectSupportTeam.Find(x => x.ProjectSupportTeamID == addSupportTeam.ProjectSupportTeamID) != null ? projectSupportTeam.Find(x => x.ProjectSupportTeamID == addSupportTeam.ProjectSupportTeamID).Department : "-";
                addSupportTeam.PhoneNumber = projectSupportTeam.Find(x => x.ProjectSupportTeamID == addSupportTeam.ProjectSupportTeamID) != null ? projectSupportTeam.Find(x => x.ProjectSupportTeamID == addSupportTeam.ProjectSupportTeamID).PhoneNumber:"-";
                addSupportTeam.Email = projectSupportTeam.Find(x => x.ProjectSupportTeamID == addSupportTeam.ProjectSupportTeamID) != null ? projectSupportTeam.Find(x => x.ProjectSupportTeamID == addSupportTeam.ProjectSupportTeamID).Email:"-";
                var respond = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/EventSupportTeam", addSupportTeam);
                ToastService.ShowSuccess("Successfully added Team");
                SupportTeam = await Http.GetFromJsonAsync<List<EventSupportTeam>>($"{Config["nurl"]}/api/EventSupportTeam/{record.EventID}");
                addSupportTeam.ProjectSupportTeamID = 0;
                addSupportTeam.Name = "";
                addSupportTeam.Position = "";
                addSupportTeam.Department = "";
                addSupportTeam.PhoneNumber = "";
                addSupportTeam.Email = "";


            }
            else
            {
                ToastService.ShowError("EventSupportTeam Add Duplicatie");
            }


        }
        else
        {
            ToastService.ShowError("Please select a Support Team");
        }


    }

    private async Task PostInstrumentCheckOut()
    {
        /*
        * ตรวจสอบ InstrumentStatusID ต้องเป็น Normal ทั้งหมดถึงจะกด CheckOut ได้
        */
        if (this.instrument.Count() > 0 && this.instrument.Any(i => i.InstrumentStatusID != 1))
        {
            ToastService.ShowError(" Some Instrument Can't Checkout. Please Checked All Instruments Are  Normal Status.");
        }
        else if (this.record.isCheckOutInstrumentAll())
        {
            ToastService.ShowError(" You have checckout already done ! ");
        }
        else
        {
            HttpResponseMessage respond = new HttpResponseMessage(System.Net.HttpStatusCode.Unused);
            InstrumentCheckOut instrumentCheckOut;
            foreach (var i in instrument)
            {


                instrumentCheckOut = new InstrumentCheckOut
                    {
                        InstrumentCheckOutGiveTo = AppData.UserID,
                        InstrumentCheckOutAction = 2,
                        InstrumentCheckOutDate = DateTime.Now,
                        InstrumentCheckOutReturnDate = record.EventEndDate,
                        InstrumentCheckOutNote = "Use In EventNumber:" + record.EventNumber + "  EventName : " + record.EventName,
                        InstrumentNumber = i.InstrumentNumber,
                        IsStaff = true,
                        ByUserID = AppData.UserID
                    };


                var checkinstrumentnumber = (await Http.GetFromJsonAsync<List<Instrument>>($"{Config["nurl"]}/api/GetInstrumentByInstrumentNumber/{instrumentCheckOut.InstrumentNumber}")).Find(i => i.InstrumentNumber == instrumentCheckOut.InstrumentNumber && i.InstrumentStatusID == 1);
                if (checkinstrumentnumber == null)
                {

                    ToastService.ShowError(" InstrumentNumber" + i.InstrumentNumber + " Can not checkout.");
                }
                else
                {
                    respond = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/RegisterInstrumentCheckOut", instrumentCheckOut);
                    if (respond.StatusCode == System.Net.HttpStatusCode.OK)
                    {

                        List<InstrumentCheckOut> checkout = await respond.Content.ReadFromJsonAsync<List<InstrumentCheckOut>>();
                        instrumentCheckOut = checkout.First();

                        i.InstrumentStatusID = 2;
                        //  record.setCheckOutInstrumentAll();


                        ///string url = $"{Config["rurl"]}/api/InstrumentCheckOutReport?CheckOutID={instrumentCheckOut.InstrumentCheckOutID}&USerID={instrumentCheckOut.InstrumentCheckOutGiveTo}&s={(instrumentCheckOut.IsStaff ? 1 : 0) }&CSerID={AppData.UserID}";
                        //((IJSInProcessRuntime)jsRuntime).InvokeVoid("OpenURL", url);

                        ToastService.ShowSuccess($"Check Out Save {i.InstrumentNumber} Successfully");
                    }
                    else
                    {

                        ToastService.ShowError("ERR:" + respond.StatusCode);
                    }


                }
            }

            if (respond.StatusCode == System.Net.HttpStatusCode.OK)
            {

                this.record.setCheckOutInstrumentAll();

                await OnputEvent();


                Lins = await Http.GetFromJsonAsync<List<EvntInstrument>>($"{Config["nurl"]}/api/GetEventInstrument/{record.EventID}");
                var resultLins = Lins.OrderBy(i => i.instrumentNumber).ToList();
                instrument = new List<Instrument>();
                foreach (var i in resultLins)
                {
                    this.instrument.AddRange(await Http.GetFromJsonAsync<IList<Instrument>>($"{Config["nurl"]}/api/GetInstrumentByInstrumentNumber/{i.instrumentNumber}"));

                }
                foreach (var i in instrument)
                {
                    i.GetLookup(instrumentBrands, instrumentModels, instrumentAgencys, instrumentStatus, instrumentLocations);
                }

                // ToastService.ShowError("  Status."+ record.EventStatusID +"");
            }
            StateHasChanged();

        }

    }

    private async Task PostInstrumentCheckIn()
    {
        if (record.isCheckInInstrumentAll())
        {
            ToastService.ShowError(" You have checckIn already done ! ");
        }
        else
        {
            HttpResponseMessage res = new HttpResponseMessage(System.Net.HttpStatusCode.Unused);
            InstrumentCheckIn instrumentCheckIn;
            foreach (var i in instrument)
            {
                instrumentCheckIn = new InstrumentCheckIn
                    {
                        InstrumentNumber = i.InstrumentNumber,
                        InstrumentCheckInLocation = i.InstrumentLocationID,
                        InstrumentCheckInReturnDate = DateTime.Now,
                        InstrumentCheckInGiveTo = AppData.UserID,
                        IsStaff = true,
                        ByUserID = AppData.UserID

                    };

                try
                {
                    var checkinstrumentnumber = (await Http.GetFromJsonAsync<List<Instrument>>($"{Config["nurl"]}/api/GetInstrumentByInstrumentNumber/{instrumentCheckIn.InstrumentNumber}")).Find(i => i.InstrumentNumber == instrumentCheckIn.InstrumentNumber && i.InstrumentStatusID != 1);
                    if (checkinstrumentnumber == null)
                    {

                        ToastService.ShowError("InstrumentNumber " + i.InstrumentNumber + " Can not checkin.");
                    }
                    else
                    {
                        res = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/RegisterInstrumentCheckIn", instrumentCheckIn);
                        if (res.StatusCode == System.Net.HttpStatusCode.OK)
                        {
                            i.InstrumentStatusID = 1;

                            ToastService.ShowSuccess($"Check In Save {i.InstrumentNumber} Successfully");
                        }
                        else
                        {
                            ToastService.ShowError("ERR:" + res.StatusCode);
                        }
                    }
                }
                catch (Exception e)
                {
                    ToastService.ShowError($"ERR:{e.Message}");
                }




                StateHasChanged();

                // NavigationManager.NavigateTo("Instrument/InstrumentSearch");
            }

            if (res.StatusCode == System.Net.HttpStatusCode.OK)
            {
                this.record.setCheckInInstrumentAll();
                await OnputEvent();

                Lins = await Http.GetFromJsonAsync<List<EvntInstrument>>($"{Config["nurl"]}/api/GetEventInstrument/{record.EventID}");
                var resultLins = Lins.OrderBy(i => i.instrumentNumber).ToList();
                instrument = new List<Instrument>();
                foreach (var j in resultLins)
                {
                    this.instrument.AddRange(await Http.GetFromJsonAsync<IList<Instrument>>($"{Config["nurl"]}/api/GetInstrumentByInstrumentNumber/{j.instrumentNumber}"));

                }
                foreach (var j in instrument)
                {
                    j.GetLookup(instrumentBrands, instrumentModels, instrumentAgencys, instrumentStatus, instrumentLocations);
                }
            }
        }

    }

    private async Task PostInventoryStockCheckOut()
    {
        //var checkstocknumber =  inventoryStocks.Find(i => i.InventoryStockNumber == inventoryStockCheckOut.InventoryStockNumber && i.InventoryStockQuantity >= inventoryStockCheckOut.InventoryStockCheckOutQuantity);

        if (record.isCheckOutConsumableAll())
        {
            ToastService.ShowError(" You have checckOut already done ! ");
        }
        else
        {
            InventoryStockCheckOut inventoryStockCheckOut = new InventoryStockCheckOut
                {
                    InventoryStockCheckOutGiveTo = AppData.UserID,
                    InventoryStockCheckOutAction = 1,
                    InventoryStockCheckOutDate = DateTime.Now,
                    ByUserID = AppData.UserID,
                    InventoryStockNumber = stock.eventStockNumber
                };



            try
            {

                using var respond = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/RegisterInventoryCheckOut", inventoryStockCheckOut);

                if (respond.StatusCode == System.Net.HttpStatusCode.OK)
                {

                    List<InventoryStockCheckOut> CheckOut = await respond.Content.ReadFromJsonAsync<List<InventoryStockCheckOut>>();
                    inventoryStockCheckOut = CheckOut.First();

                    inventoryStockCheckOut.InventoryStockNumber = CheckOut.First().InventoryStockNumber;
                    foreach (var i in eventStocks)
                    {

                        await Http.PostAsJsonAsync($"{Config["nurl"]}/api/RegisterInventoryStockCheckOutitem", new InventoryStockCheckOutItem
                            {

                                InventoryStockQuantity = i.eventStockQuantity,
                                InventoryStockNumber = i.eventStockNumber,
                                InventoryStockCheckOutID = inventoryStockCheckOut.InventoryStockCheckOutID
                            });

                        ToastService.ShowSuccess($"CheckOut {i.eventStockNumber} Successfully ");
                    }
                    record.setCheckOutConsumableAll();

                    await OnputEvent();


                    string url = $"{Config["rurl"]}/api/InventoryCheckOutReport?CheckOutID={inventoryStockCheckOut.InventoryStockCheckOutID}&USerID={inventoryStockCheckOut.InventoryStockCheckOutGiveTo}";
                    await jsRuntime.InvokeVoidAsync("OpenURL", url);
                    //((IJSInProcessRuntime)jsRuntime).InvokeVoid("OpenURL", url);
                    // Console.WriteLine(res);

                }
                else
                {

                    ToastService.ShowError(" Error!");

                }

            }
            catch (Exception e)
            {
                ToastService.ShowError($"ERR:{e.Message}");
            }
        }






        // NavigationManager.;



    }

    public async Task PostScheduler()
    {
        /// <summary>
        /// AddSchedule
        /// </summary>
        if (statusID == 3)
        {
            ToastService.ShowError("This project has been completed.");

        }        
        else if(teams.Count == 0)
        {
            ToastService.ShowError("You haven't added the team yet.");
        }
        else
        {
            Scheduler addUserSheduler;

            foreach (var i in teams)
            {
                addUserSheduler = new Scheduler
                    {
                        UserID = i.UserID,
                        ScheduleName = record.EventName + "::" + accounts.Find(j => j.UserID == @i.UserID).FirstName + "  " + accounts.Find(j => j.UserID == @i.UserID).LastName
                                                                                                ,
                        ScheduleStartDate = record.EventStartDate.Value
                                                                                                ,
                        ScheduleEndDate = record.EventEndDate.Value.AddHours(23).AddMinutes(59)
                                                                                                ,
                        ScheduleTypeID = record.EventType

                    };
                var res = await Http.PostAsJsonAsync($"{Config["aurl"]}/api/RegisterSchedule", addUserSheduler);
                if (res.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    ToastService.ShowSuccess(" Scheduler Save Successfully");
                }
                else
                {
                    ToastService.ShowError(" Scheduler Save Error");
                }

            }

        }
    }



    // public async Task PostPersonalDose()
    // {
    //     try
    //     {
    //         PersonalDose addSubPersonal = new PersonalDose();

    //         currentDate = DateTime.Now.ToString("yyyy-MM-dd");
    //         currentTime = DateTime.Now.ToString("HH:mm");

    //         // Condition to convert time to 24-hour format
    //         if (DateTime.TryParseExact(currentTime, "HH:mm", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime convertedTime))
    //             Time_Current = convertedTime;

    //         if (!string.IsNullOrEmpty(currentDate))
    //         {
    //             addSubPersonal.CreateRegister = DateTime.ParseExact(currentDate, "yyyy-MM-dd", CultureInfo.InvariantCulture);
    //         }

    //         DateTime combinedCurrentDateTime = addSubPersonal.CreateRegister.Date + Time_Current.TimeOfDay;

    //         // Check if AppData.instrumentLocations and AppData.instrumentsList are not null
    //         if (AppData.instrumentLocations != null && AppData.instrumentsList != null)
    //         {
    //             // Find the location and instrument
    //             var location = instrumentLocations.Find(x => x.InstrumentLocationName == addEventResult.eventResultDescription);
    //             var instrument = AppData.instrumentsList.Find(x => x.InstrumentENName == addEventResult.eventResultInstrumentNumber);

    //             // Check if location and instrument are found
    //             if(location != null)
    //             {
    //                 addSubPersonal = new PersonalDose
    //                 {
    //                     CreateRegister = combinedCurrentDateTime,
    //                     LocationID = location.InstrumentLocationID,
    //                     StartDatetime = DateTime.Now,
    //                     EndDatetime = DateTime.Now,
    //                     DoseAccumulationUnit = 1,
    //                     DoseAccumulation = double.Parse(addEventResult.DoseAccumulation),
    //                     UserID = addEventResult.eventResultBy,
    //                     InstrumentID = 1,
    //                     TotalHour = addEventResult.Hour
    //                 };
    //                 var res = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/PersonalDoses", addSubPersonal);
    //                 if (res.StatusCode == System.Net.HttpStatusCode.OK)
    //                 {
    //                     ToastService.ShowSuccess("Personal Dose Saved Successfully");
    //                 }
    //                 else
    //                 {
    //                     ToastService.ShowError("Error while saving personal dose.");
    //                 }
    //             }
    //             else{
    //                 ToastService.ShowError("Error Save");
    //             }

    //         }
    //         else
    //         {
    //             ToastService.ShowError("Error: AppData.instrumentLocations or AppData.instrumentsList is null.");
    //         }
    //     }
    //     catch (Exception e)
    //     {
    //         ToastService.ShowError($"Error: {e.Message}");
    //     }
    // }






    public async Task OnAddIns()
    {
        Load.Show();
        try
        {
            if (ins.instrumentNumber != "")
            {


                List<Instrument> lIns = await Http.GetFromJsonAsync<List<Instrument>>($"{Config["nurl"]}/api/GetInstrumentByInstrumentNumber/{ins.instrumentNumber}");
                nolistiInstrument = lIns.First();
                // Check not haveInstrument Status is not normal
                if (statusID == 3)
                {
                    ToastService.ShowError("This project has been completed.");

                }
                else if (lIns.Any(x => x.InstrumentStatusID != 3))
                {
                    ToastService.ShowError("Haven't checked out from Manage Project!");
                }
                else
                {
                    // Check not haveInstrument Drupicate
                    if (lIns.Count > 0 && !instrument.Any(i => i.InstrumentNumber == ins.instrumentNumber.ToUpper()))
                    {

                        ins.eventID = record.EventID;
                        ins.instrumentID = nolistiInstrument.InstrumentID;


                        var respond = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/RegisterEventInstrument", ins);
                        if (respond.StatusCode == System.Net.HttpStatusCode.OK)
                        {

                            // teams = await Http.GetFromJsonAsync<List<RecordEventTeam>>($"https://182.52.132.169:4001/api/GetEventTeam/{record.EventID}");
                            Lins = await Http.GetFromJsonAsync<List<EvntInstrument>>($"{Config["nurl"]}/api/GetEventInstrument/{record.EventID}");
                            var resultLins = Lins.OrderBy(i => i.instrumentNumber).ToList();
                            instrument = new List<Instrument>();
                            foreach (var i in resultLins)
                            {
                                this.instrument.AddRange(await Http.GetFromJsonAsync<IList<Instrument>>($"{Config["nurl"]}/api/GetInstrumentByInstrumentNumber/{i.instrumentNumber}"));

                            }
                            foreach (var i in instrument)
                            {
                                i.GetLookup(instrumentBrands, instrumentModels, instrumentAgencys, instrumentStatus, instrumentLocations);
                            }


                            ToastService.ShowSuccess("Successfully added Instrument");
                            ins.instrumentNumber = "";
                        }


                    }
                    else { ToastService.ShowError("Instrument Number Duplicatie"); }
                }


            }
            else
            {
                ToastService.ShowError("Please select a Instrument");
            }



        }
        catch (Exception e)
        {
            ToastService.ShowError("ERR:" + e.Message);
        }
        Load.Hide();

    }
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    public async Task OnAddTeam()
    {
        Load.Show();
        if (addEventTeam.UserID != new Guid() && addEventTeam.UserID != null)
        {
            if (statusID == 3)
            {
                ToastService.ShowError("This project has been completed.");

            }
            else if(!teams.Any(i => i.UserID == addEventTeam.UserID))
            {
                addEventTeam.EventID = record.EventID;
                var respond = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/RegisterEventTeam", addEventTeam);
                ToastService.ShowSuccess("Successfully added Team");
                teams = await Http.GetFromJsonAsync<List<RecordEventTeam>>($"{Config["nurl"]}/api/GetEventTeam/{record.EventID}");
                addEventTeam.UserID = null;
            }
            else
            {
                ToastService.ShowError("EventTeam Add Duplicatie");
            }

        }
        else
        {
            ToastService.ShowError("Please select a user");
        }
        Load.Hide();
    }


    public int totalStock = 0;
    /// <summary>
    /// /OnAddStock
    /// </summary>
    public async Task OnAddStock()
    {
        Load.Show();
        try
        {
            if(stock.eventStockNumber != null && stock.eventStockNumber != "")
            {
                var a = await Http.GetFromJsonAsync<List<InventoryStock>>($"{Config["nurl"]}/api/GetInventoryStockByStockNumber/{stock.eventStockNumber}");
                if (statusID == 3)
                {
                    ToastService.ShowError("This project has been completed.");

                }
                else if (a.Any(x => x.IsActive != true))
                {
                    ToastService.ShowError("Comsumable not available");
                }
                else if (!eventStocks.Any(i => i.eventStockNumber == stock.eventStockNumber && i.eventID == stock.eventID))
                {
                    
                    var resultQuantity = projectInventoryStocks.Find(x => x.ProjectID == int.Parse(id) && x.ProjectStockNumber == stock.eventStockNumber);
                    if (stock.eventStockNumber != "" && stock.eventStockQuantity > 0 && /* a.Count() > 0 && stock.eventStockQuantity <= a.First().InventoryStockQuantity && */ stock.eventStockQuantity <= stockinproject)
                    {
                        var resultStatusInvs = await _masterDataPhase2.GetMasterDataAsyncByID<RecordProject>("ProjectRecordByID", int.Parse(id));
                        if (resultStatusInvs != null)
                        {
                            if (resultStatusInvs.ProjectInvsStatusID != 1)
                            {
                                stock.projectInventoryID = resultQuantity.ProjectInventoryID;
                                stock.eventID = record.EventID;
                                stock.eventStockNumber = a.First().InventoryStockNumber;
                                stock.eventStockID = a.First().InventoryStockID;


                                var respond = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/RegisterEventInventory", stock);
                                if (respond.StatusCode == System.Net.HttpStatusCode.OK)
                                {
                                    ToastService.ShowSuccess("Successfully add Stock");
                                    // teams = await Http.GetFromJsonAsync<List<RecordEventTeam>>($"https://ppunix.org:4001/api/GetEventTeam/{record.EventID}");
                                    eventStocks = await Http.GetFromJsonAsync<List<EventStock>>($"{Config["nurl"]}/api/GetEventInventory/{record.EventID}");
                                    foreach (var i in eventStocks)
                                    {

                                        this.inventoryStocks.AddRange(await Http.GetFromJsonAsync<IList<InventoryStock>>($"{Config["nurl"]}/api/GetInventoryStockByStockNumber/{i.eventStockNumber}"));
                                    }
                                    foreach (var i in inventoryStocks)
                                    {
                                        i.GetLookUp(AppData.inventorys);
                                    }
                                    projectInventoryStocks = await Http.GetFromJsonAsync<List<ProjectInventoryStock>>($"{Config["nurl"]}/api/GetProjectInventory/{int.Parse(id)}");
                                    stock.eventStockNumber = "";
                                    stock.eventStockQuantity = 0;

                                    // Refresh UI
                                    StateHasChanged();

                                }





                            }
                            else
                            {
                                ToastService.ShowError("Haven't checked out from Manage Project! ");
                            }
                        }


                    }
                    else { ToastService.ShowError("There is no remaining stock.! "); }


                }
                else
                {
                    ToastService.ShowError("Comsumable StockNumber Duplicatie");
                }


            }
            else
            {

                ToastService.ShowError("Please select a Comsumable Stock");
            }

        }
        catch(Exception e)
        {
            ToastService.ShowError($"Error: {e.Message}");
        }

        Load.Hide();
    }


    private void CalculateResult(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime selectedDateTime))
        {

            addEventResult.EndWorkingHour = selectedDateTime;
            // เรียกใช้ฟังก์ชันที่ต้องการให้ทำงานตามที่คุณต้องการ
            Calculate(addEventResult.EndWorkingHour);
        }
    }

    private void Calculate(DateTime? selectedDateTime)
    {

        if (addEventResult.EndWorkingHour != null && addEventResult.StartWorkingHour != null)
        {

            TimeSpan? duration = addEventResult.EndWorkingHour - addEventResult.StartWorkingHour;

            // Get total minutes
            int totalMinutes = (int)Math.Max(duration.Value.TotalMinutes, 0);

            if (totalMinutes >= 60)
            {
                // Calculate hours and minutes separately
                int hours = totalMinutes / 60;
                int minutes = totalMinutes % 60;

                // Format the result as "H ชั่วโมง m นาที" (e.g., "1 ชั่วโมง 30 นาที")
                string formattedDuration = $"{hours} ชั่วโมง {minutes} นาที";
                addEventResult.Hour = formattedDuration;
            }
            else
            {
                // Display the duration in minutes
                string formattedDuration = $"{totalMinutes} นาที";
                addEventResult.Hour = formattedDuration;
            }

        }
        else
        {
            addEventResult.Hour = "";
        }
    }




    private void ClearCalculateResult()
    {

        addEventResult.EndWorkingHour = null;

    }


    private bool showFileInput = true;


    public void ShowSubEvent()
    {
        if (statusID == 3)
        {
            ToastService.ShowError("This project has been completed.");
        }
        else
        {
            showModalSubEvent = true;
        }
    }

    /// <summary>
    ///OnAddResult
    /// </summary>
    /// <returns></returns>
    public async Task OnAddResult()
    {
        //forceChange = DateTime.Now.ToString("yyyyMMddHHmmss"); // Force change the hidden input value
        Load.Show();
        await Task.Run(Loading);
        try
        {
            if (statusID == 3)
            {
                ToastService.ShowError("This project has been completed.");
            }
            else
            {
                if (addEventResult.eventResultDate.HasValue &&
                record.EventStartDate.HasValue &&
                record.EventEndDate.HasValue &&
                addEventResult.eventResultDate.Value.Date >= record.EventStartDate.Value.Date &&
                addEventResult.eventResultDate.Value.Date <= record.EventEndDate.Value.Date)
                {
                    HttpResponseMessage respond = new HttpResponseMessage();
                    addEventResult.eventID = record.EventID;

                    if (addEventResult.eventResultID != 0)
                    {

                        respond = await Http.PutAsJsonAsync($"{Config["nurl"]}/api/EventResult", addEventResult);

                    }
                    else
                    {
                        respond = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/EventResult", addEventResult);

                    }

                    if (respond.StatusCode == System.Net.HttpStatusCode.OK)
                    {


                        ToastService.ShowSuccess("Save Sub Event Successfully");
                        eventResults = await Http.GetFromJsonAsync<List<EventResult>>($"{Config["nurl"]}/api/GetEventResult/{record.EventID}");

                        await AddImageDefaultFile();
                        AddImageShow = "";

                        await jsRuntime.InvokeVoidAsync("clearFileInput", "documentFile", "documentFileLabel");

                        // Reset form fields and the event result date
                        addEventResult.SupportTeam = null;
                        addEventResult.eventResultInstrumentNumber = "";
                        addEventResult.RadiationNuclide = "";
                        addEventResult.result = "";
                        addEventResult.eventResultUnit = null;
                        addEventResult.MeterDistance = "";
                        addEventResult.MeterDistanceUnit = null;
                        addEventResult.FeetDistance = "";
                        addEventResult.FeetDistanceUnit = null;
                        addEventResult.Backgroud = "";
                        addEventResult.BackgroudUnit = null;
                        addEventResult.StartWorkingHour = null;
                        addEventResult.EndWorkingHour = null;
                        addEventResult.Hour = "";
                        addEventResult.eventResultImageName = "";
                        addEventResult.MeterDistance = "";
                        addEventResult.eventResultDescription = "";
                        addEventResult.eventResultBy = null;
                        addEventResult.eventResultImageData = "";
                        addEventResult.eventResultImageFile = "";
                        addEventResult.eventResultID = 0;


                        showModalSubEvent = false;

                        // รีเซ็ตค่า input ให้กลับไปเป็นค่าเริ่มต้น
                        addEventResult.eventResultDate = record.EventStartDate;
                        StateHasChanged(); // บอก Blazor ว่า State ของ UI เปลี่ยนแปลงแล้ว





                    }
                    else
                    {
                        ToastService.ShowError("Error! ");
                    }
                    //addEventResult = new EventResult();
                }
                else
                {
                    ToastService.ShowError("The operating dates fall outside the event/project dates.");
                    // ToastService.ShowError($"{addEventResult.eventResultDate}");
                }
            } 
        }
        catch (Exception e)
        {
            ToastService.ShowError($"Error!{e.Message}");
        }

        Load.Hide();

    }

    private async Task ClearFileInput()
    {
        fileAddImageDefault = null;
        showFileInput = false;
        StateHasChanged();
        await Task.Delay(100); // หน่วงเวลาเล็กน้อยเพื่อให้การรีเฟรชทำงาน
        showFileInput = true;
        StateHasChanged();
    }

    //public async Task OnEditResult()
    //{
    //    await Task.Run(Loading);
    //    Load.Show();

    //    editEventResult.eventID = record.EventID;

    //    var respondEdit = await Http.PutAsJsonAsync($"{Config["nurl"]}/api/EventResult", editEventResult);
    //    if (respondEdit.StatusCode == System.Net.HttpStatusCode.OK)
    //    {
    //        await EditImageDefaultFile();
    //        ToastService.ShowSuccess("Save edit Sub Event Successfully");

    //        eventResults = await Http.GetFromJsonAsync<List<EventResult>>($"{Config["nurl"]}/api/GetEventResult/{record.EventID}");


    //    }
    //    else
    //    {
    //        ToastService.ShowError("Error! ");
    //    }
    //    editEventResult = new EventResult();
    //    Load.Hide();

    //    EditResultEvent.Hide();

    //}


    /*********************************Upload File**************************************/
    private IBrowserFile? fileAddImageDefault;
    private IBrowserFile? fileEditImageDefault;
    private string? AddImageShow { get; set; }
    private string? EditImageShow { get; set; }
    private string pathAddResultFolder { get; set; } = "AddResult";
    private string pathEditResultFolder { get; set; } = "EditResult";
    private byte[] UploadPathDefault { get; set; }
    private byte[] UploadPathLeft { get; set; }
    ////<summary>
    /// Add File Image Default
    /// </summary>
    private async Task OnAddInputFileDefaultChange(InputFileChangeEventArgs e)
    {

        fileAddImageDefault = e.File;
        var imageType = fileAddImageDefault.ContentType;
        var sizefile = fileAddImageDefault.Size;

        if (sizefile > 5542880)
        {
            ToastService.ShowError("The file size cannot exceed 5MB.");
            if (addEventResult.eventResultID == 0)
            {
                addEventResult.eventResultImageData = "";
            }

        }
        else if (imageType != "image/png" && imageType != "image/jpeg")
        {
            ToastService.ShowError("File Type Image Incorrect !");
            if (addEventResult.eventResultID == 0)
            {
                addEventResult.eventResultImageData = "";
            }
        }
        else
        {
            if (addEventResult.eventResultID == 0)
            {
                Load.Show();
                await Task.Run(Loading);
                var resizedImage = await fileAddImageDefault.RequestImageFileAsync(imageType, 550, 550);
                // อ่านข้อมูลรูปภาพและแปลงเป็น Base64
                using (var stream = resizedImage.OpenReadStream(resizedImage.Size))
                {
                    var memoryStream = new MemoryStream();
                    await stream.CopyToAsync(memoryStream);
                    var buffer = memoryStream.ToArray();
                    AddImageShow = Convert.ToBase64String(buffer);
                }
                int maxWidth = 640;
                int maxHeight = 480;
                int quality = 90;

                byte[] compressedImage = _imageService.CompressBase64Image(AddImageShow, maxWidth, maxHeight, quality);
                string compressedBase64 = Convert.ToBase64String(compressedImage);
                AddImageShow = compressedBase64;
                UploadPathDefault = compressedImage;

                string newFileImageName = await GenerateUniqueFileName(fileAddImageDefault.Name, pathAddResultFolder);
                this.addEventResult.eventResultImageData = newFileImageName;
                this.addEventResult.eventResultImageFile = compressedBase64;

                //using MemoryStream memoryStream = new MemoryStream();
                //await fileAddImageDefault.OpenReadStream(sizefile).CopyToAsync(memoryStream);
                //var buffer = memoryStream.GetBuffer();
                //var imageLeftDataUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffer)}";
                /////this.addEventResult.eventResultImageFile = Convert.ToBase64String(buffer);
                //AddImageShow = imageLeftDataUrl;
                //string newFileImageName = await GenerateUniqueFileName(fileAddImageDefault.Name, pathAddResultFolder);
                //this.addEventResult.eventResultImageData = newFileImageName;

                //string base64Image = Convert.ToBase64String(buffer);
                //int maxWidth = 800;
                //int maxHeight = 600;
                //int quality = 95;

                //byte[] compressedImage = _imageService.CompressBase64Image(base64Image, maxWidth, maxHeight, quality);
                //string compressedBase64 = Convert.ToBase64String(compressedImage);
                //this.addEventResult.eventResultImageFile = compressedBase64;

                Load.Hide();
            }
            else
            {
                Load.Show();
                await Task.Run(Loading);
                var resizedImage = await fileAddImageDefault.RequestImageFileAsync(imageType, 550, 550);
                // อ่านข้อมูลรูปภาพและแปลงเป็น Base64
                using (var stream = resizedImage.OpenReadStream(resizedImage.Size))
                {
                    var memoryStream = new MemoryStream();
                    await stream.CopyToAsync(memoryStream);
                    var buffer = memoryStream.ToArray();
                    AddImageShow = Convert.ToBase64String(buffer);
                }
                int maxWidth = 640;
                int maxHeight = 480;
                int quality = 90;

                byte[] compressedImage = _imageService.CompressBase64Image(AddImageShow, maxWidth, maxHeight, quality);
                string compressedBase64 = Convert.ToBase64String(compressedImage);
                AddImageShow = compressedBase64;
                UploadPathLeft = compressedImage;

                string newFileImageName = await GenerateUniqueFileName(fileAddImageDefault.Name, pathEditResultFolder);
                this.addEventResult.eventResultImageData = newFileImageName;
                this.addEventResult.eventResultImageFile = compressedBase64;

                //using MemoryStream memoryStream = new MemoryStream();
                //await fileAddImageDefault.OpenReadStream(sizefile).CopyToAsync(memoryStream);
                //var buffer = memoryStream.GetBuffer();
                //var imageLeftDataUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffer)}";
                /////this.addEventResult.eventResultImageFile = Convert.ToBase64String(buffer);
                //AddImageShow = imageLeftDataUrl;
                //string newFileImageName = await GenerateUniqueFileName(fileAddImageDefault.Name, pathEditResultFolder);
                //this.addEventResult.eventResultImageData = newFileImageName;

                //string base64Image = Convert.ToBase64String(buffer);
                //int maxWidth = 800;
                //int maxHeight = 600;
                //int quality = 95;

                //byte[] compressedImage = _imageService.CompressBase64Image(base64Image, maxWidth, maxHeight, quality);
                //string compressedBase64 = Convert.ToBase64String(compressedImage);
                //this.addEventResult.eventResultImageFile = compressedBase64;
                // หลังจากทำเสร็จ, เรียก ResetInputFile เพื่อล้างช่อง InputFile
                Load.Hide();
            }

        }


    }

    /// <summary>
    /// AddImageDefaultFile
    /// </summary>
    /// <returns></returns>
    private async Task AddImageDefaultFile()
    {
        if (fileAddImageDefault != null)
        {
            try
            {
                var imageType = fileAddImageDefault.ContentType;
                var sizefile = fileAddImageDefault.Size;
                if (sizefile > 5542880)
                {
                    //ToastService.ShowError("The file size cannot exceed 5MB.");
                    if (addEventResult.eventResultID == 0)
                    {
                        addEventResult.eventResultImageData = "";
                    }
                }
                else if (imageType != "image/png" && imageType != "image/jpeg")
                {
                    ///ToastService.ShowError("File Type Image Incorrect !");
                    if (addEventResult.eventResultID == 0)
                    {
                        addEventResult.eventResultImageData = "";
                    }
                }
                else
                {
                    if (addEventResult.eventResultID == 0)
                    {
                        string newFileImageName = await GenerateUniqueFileName(fileAddImageDefault.Name, pathAddResultFolder);
                        string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RecordEvent", "SubEvent", "Picture", pathAddResultFolder, newFileImageName);
                        Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "RecordEvent", "SubEvent", "Picture", pathAddResultFolder)); // Ensure the directory exists

                        await File.WriteAllBytesAsync(path, UploadPathDefault);

                        //string newFileImageName = await GenerateUniqueFileName(fileAddImageDefault.Name, pathAddResultFolder);
                        ////string prefixedNewFileName = $"Update_{showinstrument.InstrumentNumber}_" + newFileImageName;
                        //string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RecordEvent", "SubEvent", "Picture", pathAddResultFolder, newFileImageName);

                        //Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "RecordEvent", "SubEvent", "Picture", pathAddResultFolder));

                        //await using FileStream fs = new(path, FileMode.Create);
                        //await fileAddImageDefault.OpenReadStream(sizefile).CopyToAsync(fs);
                    }
                    else
                    {
                        string newFileImageName = await GenerateUniqueFileName(fileAddImageDefault.Name, pathEditResultFolder);
                        string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RecordEvent", "SubEvent", "Picture", pathEditResultFolder, newFileImageName);
                        Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "RecordEvent", "SubEvent", "Picture", pathEditResultFolder)); // Ensure the directory exists

                        await File.WriteAllBytesAsync(path, UploadPathLeft);

                        //string newFileImageName = await GenerateUniqueFileName(fileAddImageDefault.Name, pathEditResultFolder);
                        ////string prefixedNewFileName = $"Update_{showinstrument.InstrumentNumber}_" + newFileImageName;
                        //string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RecordEvent", "SubEvent", "Picture", pathEditResultFolder, newFileImageName);

                        //Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "RecordEvent", "SubEvent", "Picture", pathEditResultFolder));

                        //await using FileStream fs = new(path, FileMode.Create);
                        //await fileAddImageDefault.OpenReadStream(sizefile).CopyToAsync(fs);
                    }




                }
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"File: {fileAddImageDefault.Name} Error: {ex.Message}");
                Console.WriteLine(ex.Message);
            }
        }

    }

    ////<summary>
    ///
    /// Edit File Image Default
    /// </summary>
    //private async Task OnEditInputFileDefaultChange(InputFileChangeEventArgs e)
    //{

    //    fileEditImageDefault = e.File;
    //    var imageType = fileEditImageDefault.ContentType;
    //    var sizefile = fileEditImageDefault.Size;

    //    if (sizefile > 5542880)
    //    {
    //        ToastService.ShowError("The file size cannot exceed 5MB.");
    //        if (editEventResult.eventResultID == 0)
    //        {
    //            editEventResult.eventResultImageFile = "";
    //        }

    //    }
    //    else if (imageType != "image/png" && imageType != "image/jpeg")
    //    {
    //        ToastService.ShowError("File Type Image Incorrect !");
    //        if (editEventResult.eventResultID == 0)
    //        {
    //            editEventResult.eventResultImageFile = "";
    //        }
    //    }
    //    else
    //    {
    //        Load.Show();
    //        await Task.Run(Loading);
    //        using MemoryStream memoryStream = new MemoryStream();
    //        await fileEditImageDefault.OpenReadStream(sizefile).CopyToAsync(memoryStream);
    //        var buffer = memoryStream.GetBuffer();
    //        var imageLeftDataUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffer)}";
    //        ///this.addEventResult.eventResultImageFile = Convert.ToBase64String(buffer);
    //        EditImageShow = Convert.ToBase64String(buffer);
    //        string newFileImageName = await GenerateUniqueFileName(fileEditImageDefault.Name, pathEditResultFolder);
    //        this.editEventResult.eventResultImageFile = newFileImageName;
    //        Load.Hide();


    //    }


    //}

    /// <summary>
    /// EditImageDefaultFile
    /// </summary>
    /// <returns></returns>
    //private async Task EditImageDefaultFile()
    //{
    //    if (fileEditImageDefault != null)
    //    {
    //        try
    //        {
    //            var imageType = fileEditImageDefault.ContentType;
    //            var sizefile = fileEditImageDefault.Size;
    //            if (sizefile > 5542880)
    //            {
    //                //ToastService.ShowError("The file size cannot exceed 5MB.");
    //                if (editEventResult.eventResultID == 0)
    //                {
    //                    editEventResult.eventResultImageFile = "";
    //                }
    //            }
    //            else if (imageType != "image/png" && imageType != "image/jpeg")
    //            {
    //                ///ToastService.ShowError("File Type Image Incorrect !");
    //                if (editEventResult.eventResultID == 0)
    //                {
    //                    editEventResult.eventResultImageFile = "";
    //                }
    //            }
    //            else
    //            {
    //                string newFileImageName = await GenerateUniqueFileName(fileEditImageDefault.Name, pathEditResultFolder);
    //                //string prefixedNewFileName = $"Update_{showinstrument.InstrumentNumber}_" + newFileImageName;
    //                string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RecordEvent", "SubEvent", "Picture", pathEditResultFolder, newFileImageName);

    //                Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "RecordEvent", "SubEvent", "Picture", pathEditResultFolder));

    //                await using FileStream fs = new(path, FileMode.Create);
    //                await fileEditImageDefault.OpenReadStream(sizefile).CopyToAsync(fs);


    //            }

    //        }
    //        catch (Exception ex)
    //        {
    //            ToastService.ShowError($"File: {fileEditImageDefault.Name} Error: {ex.Message}");
    //        }
    //    }

    //}

    /// <summary>
    /// GenerateUniqueFileDocument
    /// </summary>
    private async Task<string> GenerateUniqueFileName(string originalFileName, string folderName)
    {
        string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(originalFileName);
        string fileExtension = Path.GetExtension(originalFileName);
        string newFileName = fileNameWithoutExtension + fileExtension;

        if (addEventResult.eventResultID == 0 && folderName == "AddResult")
        {
            int counter = 1;
            string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RecordEvent", "SubEvent", "Picture", folderName, newFileName);

            while (File.Exists(path))
            {
                newFileName = $"{fileNameWithoutExtension}({counter}){fileExtension}";
                path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RecordEvent", "SubEvent", "Picture", folderName, newFileName);
                counter++;
            }
        }
        else
        {
            int counter = 1;
            string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RecordEvent", "SubEvent", "Picture", folderName, newFileName);

            while (File.Exists(path))
            {
                newFileName = $"{fileNameWithoutExtension}({counter}){fileExtension}";
                path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RecordEvent", "SubEvent", "Picture", folderName, newFileName);
                counter++;
            }
        }





        return newFileName;
    }


    /// <summary>
    /// Image Default
    /// </summary>
    //private long sizeFile;
    //private string fileExtension;
    //private string fileName;
    //private string type;
    //private IList<string> imageRightDataUrls = new List<string>();
    //private async Task OnInputFileDefaultChange(InputFileChangeEventArgs e)
    //{
    //    var formatImageDefault = e.File.ContentType;
    //    var filename = e.File.Name;
    //    var sizefile = e.File.Size;
    //    var typefile = e.File.ContentType;
    //    fileExtension = formatImageDefault;
    //    sizeFile = sizefile;
    //    fileName = filename;
    //    type = typefile;

    //    if (sizeFile > 5542880)
    //    {
    //        ToastService.ShowError("The file size cannot exceed 5MB.");
    //        if (addEventResult.eventResultID == 0)
    //        {
    //            this.addEventResult.eventResultImageFile = "";
    //        }

    //    }
    //    else if (fileExtension != "image/png" && fileExtension != "image/jpeg")
    //    {
    //        ToastService.ShowError("File Type Incorrect !");
    //        if (addEventResult.eventResultID == 0)
    //        {
    //            this.addEventResult.eventResultImageFile = "";
    //        }
    //    }
    //    else
    //    {
    //        //using MemoryStream memoryStream = new MemoryStream();
    //        //await e.File.OpenReadStream(5542880).CopyToAsync(memoryStream);
    //        //var buffer = memoryStream.GetBuffer();
    //        //var imageDefaultDataUrl = $"data:{fileExtension};base64,{Convert.ToBase64String(buffer)}";
    //        //Console.WriteLine(imageDefaultDataUrl);
    //        var resizedImage = await e.File.RequestImageFileAsync(formatImageDefault, 550, 550);
    //        var buffer = new byte[resizedImage.Size];
    //        await resizedImage.OpenReadStream(resizedImage.Size).ReadAsync(buffer);
    //        var imageData = $"data:{formatImageDefault};base64,{Convert.ToBase64String(buffer)}";
    //        this.addEventResult.eventResultImageFile = Convert.ToBase64String(buffer);

    //    }
    //}


    private void setNullAddResult()
    {
        this.addEventResult.eventResultImageFile = "";

        Console.WriteLine(this.addEventResult.eventResultImageFile);
    }


    BSModal AddResultEvent { get; set; }
    BSModal EditResultEvent { get; set; }
    /// <summary>
    /// OnReport Click
    ///</summary>
    public void OnReport()
    {
        string url = $"{Config["rurl"]}/api/Result?ID={record.EventID}";
        jsRuntime.InvokeVoidAsync("OpenURL", url);
        //((IJSInProcessRuntime)jsRuntime).InvokeVoid("OpenURL", url);
    }

    /// <summary>
    /// OnPutTeam
    ///</summary>
    public async void OnPutTeam(int id)
    {
        if (statusID == 3)
        {
            await SaveDeleteEventTeam();
        }
        else
        {
            deleteTeamID = id;
            ModalResponseConfirmDeleteTeam.Show();
        }

    }

    protected async Task SaveDeleteEventTeam()
    {
        if (statusID == 3)
        {
            ToastService.ShowError("This project has been completed.");
        }
        else
        {
            var respond = await Http.PostAsync($"{Config["nurl"]}/api/DeleteEventTeam/{deleteTeamID}", null);
            ToastService.ShowSuccess("Team Deleted Success");
            teams = await Http.GetFromJsonAsync<List<RecordEventTeam>>($"{Config["nurl"]}/api/GetEventTeam/{record.EventID}");

            ModalResponseConfirmDeleteTeam.Hide();
        }

    }

    public async void OnDeletSupport(int? id)
    {
        if (statusID == 3)
        {
            await SaveDeleteEventSupportTeam();
        }
        else
        {
            deleteSupportTeamID = id;
            ModalResponseConfirmDeleteSupportTeam.Show();
        }



    }



    protected async Task SaveDeleteEventSupportTeam()
    {
        if (statusID == 3)
        {
            ToastService.ShowError("This project has been completed.");
        }
        else
        {
            var respond = await Http.DeleteAsync($"{Config["nurl"]}/api/EventSupportTeam/{deleteSupportTeamID}");
            ToastService.ShowSuccess("Support Deleted Success");
            SupportTeam = await Http.GetFromJsonAsync<List<EventSupportTeam>>($"{Config["nurl"]}/api/EventSupportTeam/{record.EventID}");

            ModalResponseConfirmDeleteSupportTeam.Hide();
        }

    }



    BSModal Load { get; set; }

    public async Task OnPutIns(string index)
    {
        if (statusID == 3)
        {
            await SaveDeleteEventInstrument();
        }
        else
        {
            int id = Lins.Find(i => i.instrumentNumber.ToString().ToLower().Contains(index.ToString().ToLower())).eventInstrumentID;
            deleteInstrumentID = id;


            ModalResponseConfirmDeleteInstrument.Show();
        }

    }

    protected async Task SaveDeleteEventInstrument()
    {
        Load.Show();
        try
        {
            if (statusID == 3)
            {
                ToastService.ShowError("This project has been completed.");
            }
            else
            {
                var respond = await Http.PostAsync($"{Config["nurl"]}/api/DeleteEventInstrument/{deleteInstrumentID}", null);

                Lins = await Http.GetFromJsonAsync<List<EvntInstrument>>($"{Config["nurl"]}/api/GetEventInstrument/{record.EventID}");
                var resultLins = Lins.OrderBy(i => i.instrumentNumber).ToList();
                instrument = new List<Instrument>();
                foreach (var i in resultLins)
                {

                    this.instrument.AddRange(await Http.GetFromJsonAsync<IList<Instrument>>($"{Config["nurl"]}/api/GetInstrumentByInstrumentNumber/{i.instrumentNumber}"));
                }

                if (this.instrument.Count() > 0)
                {

                    foreach (var i in this.instrument)
                    {
                        i.GetLookup(instrumentBrands, instrumentModels, instrumentAgencys, instrumentStatus, instrumentLocations);
                    }


                }


                ToastService.ShowSuccess("Instrument Deleted Success");

            }


        }
        catch (Exception e)
        {

            ToastService.ShowError("ERR" + e.Message);
        }
        ModalResponseConfirmDeleteInstrument.Hide();
        StateHasChanged();
        Load.Hide();
    }

    /// <summary>
    /// OnputStock
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
    public async Task OnputStock(int id)
    {
        if (statusID == 3)
        {
            await SaveDeleteEventInventoryStock();

        }
        else
        {
            deleteInventoryStockID = id;
            ModalResponseConfirmDeleteInventory.Show();
        }


        // if (record.isCheckOutConsumableAll())
        // {
        //     ToastService.ShowError(" Cannot Delete Inventory, You have checckout already done!");
        // }
        // else
        // {
        //     var respond = await Http.PostAsync($"{Config["nurl"]}/api/DeleteEventInventory/{id}", null);
        //     if (respond.StatusCode == System.Net.HttpStatusCode.OK)
        //     {
        //         ToastService.ShowSuccess(" Deleted Stock Successfully");
        //         // teams = await Http.GetFromJsonAsync<List<RecordEventTeam>>($"https://ppunix.org:4001/api/GetEventTeam/{record.EventID}");
        //         eventStocks = await Http.GetFromJsonAsync<List<EventStock>>($"{Config["nurl"]}/api/GetEventInventory/{record.EventID}");
        //         foreach (var i in eventStocks)
        //         {
        //             this.inventoryStocks.AddRange(await Http.GetFromJsonAsync<IList<InventoryStock>>($"{Config["nurl"]}/api/GetInventoryStockByStockNumber/{i.eventStockNumber}"));
        //         }
        //         foreach (var i in inventoryStocks)
        //         {
        //             i.GetLookUp(inventories);
        //         }

        //     }

        // }


    }

    protected async Task SaveDeleteEventInventoryStock()
    {
        if (statusID == 3)
        {
            ToastService.ShowError("This project has been completed.");
        }
        else
        {
            var respond = await Http.PostAsync($"{Config["nurl"]}/api/DeleteEventInventory/{deleteInventoryStockID}", null);
            if (respond.StatusCode == System.Net.HttpStatusCode.OK)
            {
                ToastService.ShowSuccess(" Deleted Stock Successfully");
                // teams = await Http.GetFromJsonAsync<List<RecordEventTeam>>($"https://ppunix.org:4001/api/GetEventTeam/{record.EventID}");
                eventStocks = await Http.GetFromJsonAsync<List<EventStock>>($"{Config["nurl"]}/api/GetEventInventory/{record.EventID}");
                foreach (var i in eventStocks)
                {
                    this.inventoryStocks.AddRange(await Http.GetFromJsonAsync<IList<InventoryStock>>($"{Config["nurl"]}/api/GetInventoryStockByStockNumber/{i.eventStockNumber}"));
                }
                foreach (var i in inventoryStocks)
                {
                    i.GetLookUp(inventories);
                }
                projectInventoryStocks = await Http.GetFromJsonAsync<List<ProjectInventoryStock>>($"{Config["nurl"]}/api/GetProjectInventory/{int.Parse(id)}");
                stock.eventStockNumber = "";
                stock.eventStockQuantity = 0;

                // Refresh UI
                StateHasChanged();

            }
            ModalResponseConfirmDeleteInventory.Hide();
        }

    }

    /// <summary>
    ///OnDeletedResult
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
    public async Task OnDeletedResult(int id)
    {
        if (statusID == 3)
        {
            ToastService.ShowError("This project has been completed.");
        }
        else
        {
            var respond = await Http.PostAsync($"{Config["nurl"]}/api/DeleteEventResult/{id}", null);
            if (respond.StatusCode == System.Net.HttpStatusCode.OK)
            {

                ToastService.ShowSuccess("Deleted Sub Event Successfully");
                eventResults = await Http.GetFromJsonAsync<List<EventResult>>($"{Config["nurl"]}/api/GetEventResult/{record.EventID}");

            }
        }
        
    }

    public async Task OnUpdate(EventResult result)
    {

        Load.Show();
        await Task.Run(Loading);
        if (statusID == 3)
        {
            ToastService.ShowError("This project has been completed.");
        }
        else
        {
            addEventResult = result;
            eventResults = await Http.GetFromJsonAsync<List<EventResult>>($"{Config["nurl"]}/api/GetEventResult/{record.EventID}");
            //fileAddImageDefault = null;

            showModalSubEvent = true;
        }

        Load.Hide();
    }

    //private async void EventResultUpdate(int id)
    //{
    //    try
    //    {

    //        var result = await _masterData.GetMasterDataAsyncByID<EventResult>("EventResultByID", id);
    //        editEventResult = result;
    //        showModalEditSubEvent = true;


    //    }
    //    catch (Exception e)
    //    {
    //        ToastService.ShowError($"Error:{e.Message}");
    //    }
    //}



    public  void Onclear()
    {
        jsRuntime.InvokeVoidAsync("clearFileInput", "documentFile", "documentFileLabel");

        addEventResult.SupportTeam = null;
        addEventResult.eventResultInstrumentNumber = "";
        addEventResult.RadiationNuclide = "";
        addEventResult.result = "";
        addEventResult.eventResultUnit = null;
        addEventResult.MeterDistance = "";
        addEventResult.MeterDistanceUnit = null;
        addEventResult.FeetDistance = "";
        addEventResult.FeetDistanceUnit = null;
        addEventResult.Backgroud = "";
        addEventResult.BackgroudUnit = null;
        addEventResult.StartWorkingHour = null;
        addEventResult.EndWorkingHour = null;
        addEventResult.Hour = "";
        addEventResult.eventResultImageName = "";
        addEventResult.MeterDistance = "";
        addEventResult.eventResultDescription = "";
        addEventResult.eventResultBy = null;
        addEventResult.eventResultDate = record.EventStartDate;
        addEventResult.eventResultImageData = "";
        addEventResult.eventResultImageFile = "";
        addEventResult.eventResultID = 0;
        AddImageShow = "";
        showModalSubEvent = false;
    }

    private void Loading()
    {
        System.Threading.Thread.Sleep(300);
        // Retrieve data from the server and initialize
        // Employees property which the View will bind
    }



}


@* @foreach (var i in eventPersonalDoses)
{
    <tr>
        @{
            int? order = 0;
            var support = listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.EventPDSupportId);
            if (support != null && support.Order == 1)
            {
                order = support.Order;
            }
        }

        @if (order == 1)
        {
            <td>@(eventPersonalDoses.IndexOf(i) + 1)</td>
        }
        else if (i.EventPDUserName != new Guid("00000000-0000-0000-0000-000000000000"))
        {
            <td>@(eventPersonalDoses.IndexOf(i) + 1)</td>
        }

        @if (i.EventPDUserName != new Guid("00000000-0000-0000-0000-000000000000"))
        {
            <td>
                @accounts.Find(j => j.UserID == @i.EventPDUserName).FirstName  @accounts.Find(j => j.UserID == @i.EventPDUserName).LastName
            </td>
        }
        else if (i.EventPDSupportId != 0)
        {

            @if (order == 1)
            {
                <td>@(listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.EventPDSupportId) != null ? listProjectSupportTeams.Find(x => x.ProjectSupportTeamID == i.EventPDSupportId).Name : "-")</td>
            }




        }
        @if (order == 1)
        {
            <td>
                <select class="form-control" @bind="i.EventPDInstumentName">
                    <option value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                    @foreach (var item in listInstrument)
                    {
                        var result = instrumentTypes.Find(x => x.InstrumentTypeID == item.InstrumentTypeID);
                        if (result != null && result.InstrumentTypeID == 13 && result.IsActive == true)
                        {
                            <option value="@item.InstrumentENName">@item.InstrumentENName</option>
                        }




                    }
                </select>




            </td>
            <td>
                <div style="display: flex; align-items: center;">
                    <input type="number" @bind-value="i.EventPDAccumulation" class="form-control" placeholder="Personal Dose" />
                    <span style="margin-left: 5px;">
                        @(AppData.recordEventUnits.Find(x => x.RecordEventUnitID == i.EventPDAccumulationUnit) != null ? AppData.recordEventUnits.Find(x => x.RecordEventUnitID == i.EventPDAccumulationUnit).RecordEventUnitName : "-")
                    </span>
                </div>

            </td>
            <td>
                @if (AppData.CurrentPermission.Find(i => i.permissionID == 2).permissionD)
                {
                    <i class="far fa-trash-alt" @onclick="() => OnDeleteEventPersonalDose(i.EventPDId)"></i>
                }
            </td>
        }
        else if (i.EventPDUserName != new Guid("00000000-0000-0000-0000-000000000000"))
        {
            <td>
                <select class="form-control" @bind="i.EventPDInstumentName">
                    <option value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                    @foreach (var item in listInstrument)
                    {
                        var result = instrumentTypes.Find(x => x.InstrumentTypeID == item.InstrumentTypeID);
                        if (result != null && result.InstrumentTypeID == 13 && result.IsActive == true)
                        {
                            <option value="@item.InstrumentENName">@item.InstrumentENName</option>
                        }




                    }
                </select>




            </td>
            <td>
                <div style="display: flex; align-items: center;">
                    <input type="number" @bind-value="i.EventPDAccumulation" class="form-control" placeholder="Personal Dose" />
                    <span style="margin-left: 5px;">
                        @(AppData.recordEventUnits.Find(x => x.RecordEventUnitID == i.EventPDAccumulationUnit) != null ? AppData.recordEventUnits.Find(x => x.RecordEventUnitID == i.EventPDAccumulationUnit).RecordEventUnitName : "-")
                    </span>
                </div>

            </td>
            <td>
                @if (AppData.CurrentPermission.Find(i => i.permissionID == 2).permissionD)
                {
                    <i class="far fa-trash-alt" @onclick="() => OnDeleteEventPersonalDose(i.EventPDId)"></i>
                }
            </td>
        }

    </tr>
} *@