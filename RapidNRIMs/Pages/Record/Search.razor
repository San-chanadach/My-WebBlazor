@page "/Record/Search"
@inject IJSRuntime jsRuntime

@inject IRecordService RecordService
@inject NavigationManager NavigationManager
@inject IRecordEventTypeService RecordEventTypeService
@inject IRecordEventDistrictService RecordEventDistrictService
@inject IRecordEventProvinceService RecordEventProvinceService
@inject IMasterDataRecord _masterDataRecord
@inject AppData AppData
@inject IToastService ToastService
@inject HttpClient Http
@inject ILocalStorageService _localStorageService
@inject IMasterData _masterData
@using System.Threading
@inject IConfiguration config

<PageTitle>Event Search Page</PageTitle>

<div class="row margin-row-card">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">@AppData.LangResource[AppData.LanguageID, 277]</div>
            <div class="card-body">
                <div class="row">
                    <label for="eventnumber" class="col-12 col-md-4 col-lg-2 col-form-label">
                        <span>@AppData.LangResource[AppData.LanguageID, 28] </span>
                    </label>
                    <div class="col-12 col-md-8 col-lg-3">
                        <div class="input-group input-box-bottom">
                            <input id="eventnumber" @bind-value="recordEvent.EventNumber" placeholder="@AppData.LangResource[AppData.LanguageID, 28]" class="form-control" />
                        </div>

                    </div>
                </div>


                <div class="row">
                    <label for="eventType" class="col-12 col-md-4 col-lg-2 col-form-label">
                        <span>@AppData.LangResource[AppData.LanguageID, 31]</span>
                    </label>
                    <div class="col-12 col-md-8 col-lg-3">
                        <div class="input-group input-box-bottom">
                            <select class="form-control" @bind="recordEvent.EventType" id="eventType">
                                <option value="0">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                @foreach (var item in recordEventTypes)
                                {
                                    if (item.IsActive == true && item.IsActive != null)
                                    {
                                        @if (AppData.LanguageID == 0)
                                        {
                                            <option value="@item.EventTypeID">@item.EventTypeENName</option>
                                        }
                                        else
                                        {
                                            <option value="@item.EventTypeID">@item.EventTypeTHName</option>
                                        }
                                    }
                                }
                            </select>

                        </div>

                    </div>
                </div>

                <div class="row">
                    <label for="eventProvince" class="col-12 col-md-4 col-lg-2 col-form-label">
                        <span>@AppData.LangResource[AppData.LanguageID, 41]</span>
                    </label>
                    <div class="col-12 col-md-8 col-lg-3">
                        <div class="input-group input-box-bottom">
                            <select class="form-control" id="eventProvince" @bind="recordEvent.ProvinceID" @oninput="OnProvinceSelected">
                                <option value="0">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                @foreach (var item in recordEventProvinces)
                                {
                                    @if (AppData.LanguageID == 0)
                                    {
                                        <option value="@item.ProvinceID">@item.ProvinceENName</option>
                                    }
                                    else
                                    {
                                        <option value="@item.ProvinceID">@item.ProvinceTHName</option>
                                    }
                                }
                            </select>
                        </div>

                    </div>
                    <label for="district" class="col-12 col-md-4 col-lg-2 col-form-label">
                        <span>@AppData.LangResource[AppData.LanguageID, 233]</span>
                    </label>
                    <div class="col-12 col-md-8 col-lg-3">
                        <div class="input-group input-box-bottom">
                            <select class="form-control" id="district" @bind="recordEvent.DistrictID" @oninput="OnDistrictSelected">
                                <option value="0">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                @foreach (var item in recordEventDistricts)
                                {
                                    @if (AppData.LanguageID == 0)
                                    {
                                        <option value="@item.DistrictID">@item.DistrictENName</option>
                                    }
                                    else
                                    {
                                        <option value="@item.DistrictID">@item.DistrictTHName</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <label for="subdistrict" class="col-12 col-md-4 col-lg-2 col-form-label">
                        <span>@AppData.LangResource[AppData.LanguageID, 234]</span>
                    </label>
                    <div class="col-12 col-md-8 col-lg-3">
                        <div class="input-group input-box-bottom">
                            <select class="form-control" id="subdistrict" @bind="recordEvent.SubDistrictID" @oninput="OnSubDistrictSelected">
                                <option value="0">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                @foreach (var item in subDistricts)
                                {
                                    zipCode = item.subDistrictCode;

                                    @if (AppData.LanguageID == 0)
                                    {
                                        <option value="@item.subDistrictID">@item.subDistrictENName</option>
                                    }
                                    else
                                    {
                                        <option value="@item.subDistrictID">@item.subDistrictTHName</option>
                                    }

                                }
                            </select>
                        </div>

                    </div>
                    <label for="eventZipCode" class="col-12 col-md-4 col-lg-2 col-form-label">
                        <span>@AppData.LangResource[AppData.LanguageID, 43]</span>
                    </label>
                    <div class="col-12 col-md-8 col-lg-3">
                        <div class="input-group input-box-bottom">
                            <input @bind="recordEvent.zipCode" disabled placeholder="@AppData.LangResource[AppData.LanguageID, 43]" class="form-control" />
                        </div>

                    </div>
                </div>
                <div class="row">
                    <label for="informer" class="col-12 col-md-4 col-lg-2 col-form-label">
                        <span>@AppData.LangResource[AppData.LanguageID, 235]</span>
                    </label>
                    <div class="col-12 col-md-8 col-lg-8">
                        <div class="input-group input-box-bottom">
                            <input @bind="recordEvent.EventInformerName" class="form-control" placeholder="@AppData.LangResource[AppData.LanguageID, 235]" />
                        </div>

                    </div>
                </div>
                <div class="text-center" style="margin-top:0.5rem;">
                    <button type="submit" @onclick="OnSearch" class="btn" style="background-color:#2E2BFF; color:#fff" name="Search" id="Search">@AppData.LangResource[AppData.LanguageID, 48]</button>
                    <button type="reset" @onclick="OnClear" class="btn " style="background-color:#B90F1B; color:#fff" name="Search" id="Search">@AppData.LangResource[AppData.LanguageID, 45]</button>

                </div>
            </div>
        </div>
    </div>
</div>


<div class="row">
    <div class="col-md-12">
        <div class="card mb-4">
            <div class="card-header"><i class="fas fa-table mr-1"></i>@AppData.LangResource[AppData.LanguageID, 278]</div>
            <div class="card-body">

                <div class="scrollBar fixTableHead table-responsive scroll-inner scrollBarX" style="height:380px;">
                    <table id="dataTable" class="table table-bordered table-striped text-center" width="100%">
                        <thead class="fixedthead">
                            <tr>
                                <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 28]</th>
                                <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 29]</th>
                                <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 31]</th>
                                <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 231]</th>
                                <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 232]</th>

                            </tr>
                        </thead>
                        <tbody class="scrollContent">
                            @foreach (var item in Filteredrecords)
                            {
                                <tr @onclick="() => TrClickedAtIndex(item.EventNumber)">
                                    @{
                                        var result = projectEventRecords.Find(x => x.EventID == item.EventID);

                                    }
                                   @*  @if(result != null)
                                    {
                                        <td data-label="@AppData.LangResource[AppData.LanguageID, 28]">@item.EventNumber</td>
                                    }
                                    else
                                    {
                                        <td data-label="@AppData.LangResource[AppData.LanguageID, 28]"><span style="color: red;">@item.EventNumber</span></td>
                                    } *@
                                    <td data-label="@AppData.LangResource[AppData.LanguageID, 28]">@item.EventNumber</td>

                                    <td data-label="@AppData.LangResource[AppData.LanguageID, 29]" class="cell-content">@item.EventName</td>

                                    @if (AppData.LanguageID == 0)
                                    {
                                        <td data-label="@AppData.LangResource[AppData.LanguageID, 31]">@(recordEventTypes.Find(i => i.EventTypeID == item.EventType) != null ? recordEventTypes.Find(i => i.EventTypeID == item.EventType).EventTypeENName:"-")</td>
                                    }
                                    else
                                    {
                                        <td data-label="@AppData.LangResource[AppData.LanguageID, 31]">@(recordEventTypes.Find(i => i.EventTypeID == item.EventType) != null ? recordEventTypes.Find(i => i.EventTypeID == item.EventType).EventTypeTHName:"-")</td>
                                    }

                                    <td data-label="@AppData.LangResource[AppData.LanguageID, 231]">@(item.EventRegisterDate.Value.Date.ToString("dd/MM/yyyy"))</td>
                                    <td data-label="@AppData.LangResource[AppData.LanguageID, 232]" class="cell-content">@item.EventLocationName</td>
                                </tr>

                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="text-center" style="margin-top:-1rem; margin-bottom: 2rem;">

            @if (ID == null)
            {
                <button style="cursor: pointer;" disabled class="btn btn-warning">@AppData.LangResource[AppData.LanguageID, 50]</button>


            }
            else
            {
                <a href="@($"Record/EventRegister/{ID}")" class="btn btn-warning">@AppData.LangResource[AppData.LanguageID, 50]</a>

            }
        </div>
    </div>
</div>



<BSModal class="row style-justify mt-5" @ref="Load" IsCentered="true" Size="Size.Small" IgnoreEscape="true" IgnoreClickOnBackdrop="true">
    <BSModalBody>
        <div class="text-center mt-3">
            <span class="spinner-border text-warning spinner-border-sm " role="status" aria-hidden="true"
                  style="font-size: 16pt; width: 36px; height: 36px; color: Gold " />
        </div>
        <div class="text-center pt-3" style=" font-size: 16pt">
            @AppData.LangResource[AppData.LanguageID, 325]
        </div>
    </BSModalBody>
</BSModal>





@code {

    private string zipCode;

    /// <summary>
    /// List RecordType
    /// </summary>
    private List<RecordEventType> recordEventTypes = new List<RecordEventType>();


    /// <summary>
    /// Province List
    /// </summary>
    private List<RecordEventProvince> recordEventProvinces = new List<RecordEventProvince>();

    /// <summary>
    /// District List
    /// </summary>
    private List<RecordEventDistrict> recordEventDistricts = new List<RecordEventDistrict>();

    /// <summary>
    /// sub DistrictList
    /// </summary>
    private List<SubDistrict> subDistricts = new List<SubDistrict>();

    /// <summary>
    /// Main Model From Add RecordEventType
    /// </summary>
    RecordEventType recordEventType = new RecordEventType();

    /// <summary>
    /// Main Model Form Record
    /// </summary>
    RecordEvent recordEvent = new RecordEvent()
        {
            EventNumber = "",
            ProvinceID = 0
        };


    List<RecordEvent> records = new List<RecordEvent>();
    /* List<RecordEvent> Filteredrecords => records.Where(i => i.EventNumber.ToString().ToLower().Contains(recordEvent.EventNumber.ToString().ToLower()) &&
                                                        i.EventType.ToString().ToLower().Contains(recordEvent.EventType.ToString().ToLower()) &&
                                                        i.ProvinceID.ToString().ToLower().Contains(recordEvent.ProvinceID.ToString().ToLower()) &&
                                                        i.DistrictID.ToString().ToLower().Contains(recordEvent.DistrictID.ToString().ToLower()) &&
                                                        i.SubDistrictID.ToString().ToLower().Contains(recordEvent.SubDistrictID.ToString().ToLower()) &&
                                                        i.zipCode.ToString().ToLower().Contains(recordEvent.zipCode.ToString().ToLower())).ToList();
    */
    List<RecordEvent> Filteredrecords = new List<RecordEvent>();


    BSModal Load { get; set; }

    public List<ProjectEventRecord> projectEventRecords = new List<ProjectEventRecord>();
    public List<RecordProject> recordProjects = new List<RecordProject>();

    /// <summary>
    /// clearURL
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("clearURL");
            await jsRuntime.InvokeAsync<object>("ResponsiveDataTables");
        }
    }

    /// <summary>
    /// OnInit Async
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        recordProjects = AppData.recordProjects;
        projectEventRecords = await Http.GetFromJsonAsync<List<ProjectEventRecord>>($"{config["nurl"]}/api/GetProjectEventRecord");

        //  records = await Http.GetFromJsonAsync<List<RecordEvent>>("api/GetEventRecord");

        //*(อันเก่าเวอร์ชั่น 1.5)*recordEventTypes = await RecordEventTypeService.GetRecordEventTypes();

        ///Added and edited on 17-02-65
        ///from the original : recordEventProvinces = AppData.Provinces;
        recordEventProvinces = AppData.Provinces;
       // recordEventDistricts = await Http.GetFromJsonAsync<List<RecordEventDistrict>>($"{config["nurl"]}/api/District/GetAllDistricts");


        recordEventTypes = AppData.recordEventTypes;
        //var activeEventType = recordEventTypes.Find(i => i.IsActive == true).IsActive;
        //if (activeEventType == true)
        //    recordEventTypes = await _masterData.GetAllActiveMasterDataAsync<RecordEventType>("ActiveEventType");

       
        //subDistricts = AppData.subDistricts;

        if (AppData.LanguageID == 0)
        {
            var resultEventProvinces = recordEventProvinces.OrderBy(pEN => pEN.ProvinceENName).ToList();
            recordEventProvinces = resultEventProvinces;
            var resultEventTypes = recordEventTypes.OrderBy(tEN => tEN.EventTypeENName).ToList();
            recordEventTypes = resultEventTypes;
            //var resultEventDistricts = recordEventDistricts.OrderBy(dEN => dEN.DistrictENName).ToList();
            //recordEventDistricts = resultEventDistricts;
        }
        else
        {
            var resultEventProvinces = recordEventProvinces.OrderBy(pTH => pTH.ProvinceTHName).ToList();
            recordEventProvinces = resultEventProvinces;
            var resultEventTypes = recordEventTypes.OrderBy(tTH => tTH.EventTypeTHName).ToList();
            recordEventTypes = resultEventTypes;
            //var resultEventDistricts = recordEventDistricts.OrderBy(dTH => dTH.DistrictTHName).ToList();
            //recordEventDistricts = resultEventDistricts;
        }

        
        //Console.WriteLine(Filteredrecords.Count);

    }
    string ID;
    public void TrClickedAtIndex(string id)
    {
        ID = id;
        //instrumentById = await Http.GetFromJsonAsync<List<Instrument>>($"api/GetInstrument/{ID}");

        //var respond = await Http.GetFromJsonAsync<List<Instrument>>($"api/GetInstrument/{ID}");
        // discardinstrument = respond.First();
    }

    //private const string eventrecord = "Event";

    public async Task OnSearch()
    {
        //Test Caching LocalStorage
        //records = await _localStorageService.GetItemAsync<List<RecordEvent>>(eventrecord);
        //if (records is null)
        //{
        //    records = await Http.GetFromJsonAsync<List<RecordEvent>>("api/GetEventRecord");
        //    await _localStorageService.SetItemAsync(eventrecord, records);
        //}

        Load.Show();
        await Task.Run(Loading);
        records = await Http.GetFromJsonAsync<List<RecordEvent>>($"{config["nurl"]}/api/GetEventRecord");


        Filteredrecords = records.Where(i => i.EventNumber.ToString().ToLower().Contains(recordEvent.EventNumber.ToString().ToLower())).ToList();

        if (recordEvent.EventType != 0 && recordEvent.EventType != null)
        {
            Filteredrecords = Filteredrecords.Where(i => i.EventType == recordEvent.EventType).ToList();
        }


        if (recordEvent.ProvinceID != 0 && recordEvent.ProvinceID != null)
        {
            Filteredrecords = Filteredrecords.Where(i => i.ProvinceID == recordEvent.ProvinceID).ToList();

        }

        if (recordEvent.DistrictID != 0 && recordEvent.DistrictID != null)
        {
            Filteredrecords = Filteredrecords.Where(i => i.DistrictID == recordEvent.DistrictID).ToList();

        }

        if (recordEvent.SubDistrictID != 0 && recordEvent.SubDistrictID != null)
        {

            Filteredrecords = Filteredrecords.Where(i => i.SubDistrictID == recordEvent.SubDistrictID).ToList();

        }

        //Console.WriteLine(recordEvent.EventNumber.ToString());
        this.StateHasChanged();
        Load.Hide();
    }

    /// <summary>
    /// OnProvinceSelected
    /// </summary>
    /// <param name="e"></param>
    private void OnProvinceSelected(ChangeEventArgs e)
    {

        // แปลงค่าที่ผู้ใช้ป้อนเข้ามาเป็น int
        if (int.TryParse(e.Value.ToString(), out int parsedValueProvinceID))
        {
            recordEvent.ProvinceID = parsedValueProvinceID;
            if (this.recordEvent.ProvinceID != null && this.recordEvent.ProvinceID != 0)
            {
                recordEventDistricts = recordEventProvinces.Find(i => i.ProvinceID == recordEvent.ProvinceID).Districts;
                if (AppData.LanguageID == 0)
                {
                    var resultEventDistricts = recordEventDistricts.OrderBy(dEN => dEN.DistrictENName).ToList();
                    recordEventDistricts = resultEventDistricts;

                }
                else
                {
                    var resultEventDistricts = recordEventDistricts.OrderBy(dTH => dTH.DistrictTHName).ToList();
                    recordEventDistricts = resultEventDistricts;
                }

                recordEvent.DistrictID = 0;
                recordEvent.SubDistrictID = 0;
                recordEvent.zipCode = 0;
            }
            else
            {
                recordEventDistricts = new List<RecordEventDistrict>();
                subDistricts = new List<SubDistrict>();
                recordEvent.zipCode = 0;

            }
        }

    }

    /// <summary>
    /// OnDistrictSelected
    /// </summary>
    /// <param name="e"></param>
    public void OnDistrictSelected(ChangeEventArgs e)
    {
       
        if (int.TryParse(e.Value.ToString(), out int parsedValueDistrictsID))
        {

            recordEvent.DistrictID = parsedValueDistrictsID;
            if (this.recordEvent.DistrictID != null && this.recordEvent.DistrictID != 0)
            {
                this.subDistricts = recordEventDistricts.Find(i => i.DistrictID == recordEvent.DistrictID).SubDistricts;
                if (AppData.LanguageID == 0)
                {
                    var resultsubDistricts = subDistricts.OrderBy(sdEN => sdEN.subDistrictENName).ToList();
                    subDistricts = resultsubDistricts;

                }
                else
                {
                    var resultsubDistricts = subDistricts.OrderBy(sdTH => sdTH.subDistrictTHName).ToList();
                    subDistricts = resultsubDistricts;
                }

                recordEvent.SubDistrictID = 0;
                recordEvent.zipCode = 0;
            }
            else
            {
                
                subDistricts = new List<SubDistrict>();
                recordEvent.zipCode = 0;
            }

        }
       

    }

    /// <summary>
    /// OnSubDistrictSelected
    /// </summary>
    /// <param name="e"></param>
    public void OnSubDistrictSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int parsedValueSubDistrictsID))
        {
            recordEvent.SubDistrictID = parsedValueSubDistrictsID;
            if (this.recordEvent.SubDistrictID != null && this.recordEvent.SubDistrictID != 0)
            {
                recordEvent.zipCode = Int32.Parse(subDistricts.Find(i => i.subDistrictID == this.recordEvent.SubDistrictID).subDistrictCode);
            }
            else
            {
                recordEvent.zipCode = 0;
            }
        }

    }

    private void OnClear()
    {
        recordEvent = new RecordEvent();
        recordEventDistricts = new List<RecordEventDistrict>();
        subDistricts = new List<SubDistrict>();
        Filteredrecords = new List<RecordEvent>();

        recordEvent.EventType = 0;
        recordEvent.ProvinceID = 0;
        recordEvent.DistrictID = 0;
        recordEvent.SubDistrictID = 0;
        //recordEvent.zipCode = 0;
    }

    /// <summary>
    /// list is not selected
    /// </summary>
    private void ShowRecordEventError()
    {
        ToastService.ShowError("RecordEvent list is not selected.");
    }

    private void Loading()
    {
        System.Threading.Thread.Sleep(300);
        // Retrieve data from the server and initialize
        // Employees property which the View will bind
    }
}
