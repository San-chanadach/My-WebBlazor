@page "/RadiationSources/CheckOut"
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager
@inject AppData AppData
@inject IToastService ToastService
@inject IConfiguration Config
@inject IMasterData _masterData
@inject ImageService _imageService
@inject HttpClient Http
@using System.Threading
@inject ILanguageService LanguageService

<PageTitle>Check Out Page</PageTitle>

<EditForm Model="@radiationSourceCheckOut" OnValidSubmit="PostRadiationSourceCheckOut">
    <!--DataAnnotationsValidator /-->
    <div class="row margin-row-card">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    @AppData.LangResource[AppData.LanguageID, 222]
                    <!--img class="img-qrcode float-right" src="assets/images/img-qrcode/qr-code.png"-->
                </div>
                <div class="card-body">
                    <div class="row g-3 align-items-center">
                        <div class="col-sm-2">
                            <label class="col-form-label"><span>@AppData.LangResource[AppData.LanguageID, 122] <strong class="color-necessary">*</strong></span></label>
                        </div>
                        <div class="col-sm-3">
                            <InputText id="sourceNumber" @bind-Value="radiationSourceCheckOut.RadiationSourceNumber" placeholder="@AppData.LangResource[AppData.LanguageID,122]" class="form-control" />
                        </div>

                    </div>

                    <div class="row g-3 align-items-center mt-2">
                        <div class="col-sm-2">
                            <label class="col-form-label"><span>@AppData.LangResource[AppData.LanguageID, 100] <strong class="color-necessary">*</strong></span></label>
                        </div>
                        <div class="col-sm-3">
                            <InputSelect class="form-control" @bind-Value="radiationSourceCheckOut.RadiationSourceCheckOutAction" id="action">
                                <option value="0">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                @foreach (var item in radiationSourceCheckOutActions)
                                {
                                    if (item.IsActive == true && item.IsActive != null)
                                    {
                                        
                                         <option value="@item.RadiationSourceCheckOutActionID">@item.RadiationSourceCheckOutActionTHName</option>
                                        
                                    }
                                }
                            </InputSelect>
                            <span class="span-btn-action">
                                @if (AppData.CurrentPermission.Find(i => i.permissionID == 15).permissionE)
                                {
                                    <!--button type="button" @onclick="@(() => AddAction.Show())" class="btn btn-warning margin-btn" name="AddTeam" id="AddTeam">
                                        <i class="fas fa-plus"></i>
                                    </button-->
                                }
                            </span>

                        </div>
                        <div class="col-sm-1">
                            <label class="col-form-label">@AppData.LangResource[AppData.LanguageID, 101]<strong class="color-necessary">*</strong> </label>
                        </div>
                        <div class="col-sm-4 d-flex align-items-center">
                            <span class="col-auto d-flex align-items-center">
                                <input @bind="radiationSourceCheckOut.IsStaff" @onclick="@(()=> radiationSourceCheckOut.RadiationSourceCheckOutGiveTo = null)" class="form-check-input mt-1" type="checkbox" name="inlineRadioOptions" id="inlineRadioOptions" />@AppData.LangResource[AppData.LanguageID, 475]
                            </span>
                            <div class="flex-grow-1">
                                @if (radiationSourceCheckOut.IsStaff)
                                {
                                    <div style="display: flex; align-items: center;">
                                        <InputSelect class="form-control" @bind-Value="radiationSourceCheckOut.RadiationSourceCheckOutGiveTo">
                                            <option value="">@AppData.LangResource[AppData.LanguageID, 2]-Staff</option>
                                            @foreach (var item in accounts)
                                            {
                                                if (item.IsActive)
                                                {
                                                    <option value="@item.UserID">@item.FirstName</option>
                                                }
                                            }
                                        </InputSelect>
                                    </div>
                                }
                                else
                                {
                                    <div style="display: flex; align-items: center;">
                                        <InputSelect class="form-control" @bind-Value="radiationSourceCheckOut.RadiationSourceCheckOutGiveTo">
                                            <option value="">@AppData.LangResource[AppData.LanguageID, 2]-OutSide</option>
                                            @foreach (var item in other)
                                            {
                                                <option value="@item.UserID">@item.UserName</option>
                                            }
                                        </InputSelect>
                                        <span class="ml-2">
                                            <button type="button" @onclick="@(() => AddOtherUser.Show())" class="btn btn-warning ">
                                                <i class="fas fa-plus"></i>
                                            </button>
                                        </span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    @if (!radiationSourceCheckOut.IsStaff && radiationSourceCheckOut.RadiationSourceCheckOutGiveTo != null)
                    {
                        <div Class="card bg-light mt-2">
                            <div Class="card-bordy">

                                <div class="row g-3 align-items-center mt-2">
                                    <div class="col-sm-2">
                                        <label class="col-form-label"><span>@AppData.LangResource[AppData.LanguageID, 401] <strong class="color-necessary">*</strong> </span></label>
                                    </div>
                                    <div class="col-sm-3">
                                        <InputText disabled @bind-Value="@other.Find(i=>i.UserID == radiationSourceCheckOut.RadiationSourceCheckOutGiveTo).UserName" class="form-control" />
                                    </div>

                                    <div class="col-sm-1">
                                        <label class="col-form-label"><span>@AppData.LangResource[AppData.LanguageID, 402] <strong class="color-necessary">*</strong></span></label>
                                    </div>
                                    <div class="col-sm-3">
                                        <InputText disabled @bind-Value="@other.Find(i=>i.UserID == radiationSourceCheckOut.RadiationSourceCheckOutGiveTo).Department" class="form-control" />
                                    </div>

                                </div>

                                <div class="row g-3 align-items-center mt-2">
                                    <div class="col-sm-2">
                                        <label class="col-form-label"><span>@AppData.LangResource[AppData.LanguageID, 403] <strong class="color-necessary">*</strong></span></label>
                                    </div>
                                    <div class="col-sm-3">
                                        <InputText disabled @bind-Value="@other.Find(i=>i.UserID == radiationSourceCheckOut.RadiationSourceCheckOutGiveTo).PhoneNumber" class="form-control" />
                                    </div>

                                    <div class="col-sm-1">
                                        <label class="col-form-label"><span>@AppData.LangResource[AppData.LanguageID, 404] <strong class="color-necessary">*</strong></span></label>
                                    </div>
                                    <div class="col-sm-3">
                                        <InputText disabled @bind-Value="@other.Find(i=>i.UserID == radiationSourceCheckOut.RadiationSourceCheckOutGiveTo).Email" class="form-control" />
                                    </div>

                                </div>
                            </div>
                        </div>
                    }

                    <div class="row g-3 align-items-center mt-2">
                        <div class="col-sm-2">
                            <label class="col-form-label"><span>@AppData.LangResource[AppData.LanguageID, 230]</span></label>
                        </div>
                        <div class="col-sm-3">
                            <InputDate id="checkOutDate" @bind-Value="radiationSourceCheckOut.RadiationSourceCheckOutDate" placeholder="@AppData.LangResource[AppData.LanguageID,102]" class="form-control" />
                        </div>

                        <div class="col-sm-1">
                            <label class="col-form-label"><span>@AppData.LangResource[AppData.LanguageID, 102]</span></label>
                        </div>
                        <div class="col-sm-4">
                            @if (radiationSourceCheckOut.RadiationSourceCheckOutAction != 5)
                            {
                                <InputDate id="setReturnDate" @bind-Value="radiationSourceCheckOut.RadiationSourceCheckOutReturnDate" placeholder="@AppData.LangResource[AppData.LanguageID,102]" class="form-control" />
                            }
                            else
                            {
                                <input type="date" id="setReturnDate" disabled placeholder="@AppData.LangResource[AppData.LanguageID,102]" class="form-control" />
                            }
                        </div>

                    </div>

                    <div class="row g-3 align-items-center mt-2">
                        <div class="col-sm-2">
                            <label class="col-form-label"><span>@AppData.LangResource[AppData.LanguageID, 105]</span></label>
                        </div>
                        <div class="col-sm-8">
                            <InputTextArea @bind-Value="radiationSourceCheckOut.RadiationSourceCheckOutNote" class="form-control" id="note" rows="2" placeholder="@AppData.LangResource[AppData.LanguageID,105]" />
                        </div>

                    </div>

                    <div class="row g-3 align-items-center mt-2">
                        <div class="col-sm-2">
                            <label class="col-form-label"><span>@AppData.LangResource[AppData.LanguageID, 75]</span></label>
                        </div>
                        <div class="col-sm-3" style="margin-left:15px;">
                            <InputFile OnChange="@OnInputFileDefaultChange" class="custom-file-input file-name-custom " id="picture" />
                            @if (AppData.LanguageID == 0)
                            {
                                <label class="custom-file-label mr-4" for="picture" data-browse="@AppData.LangResource[AppData.LanguageID, 313]">@AppData.LangResource[AppData.LanguageID, 313]</label>
                            }
                            else
                            {
                                <label class="custom-file-label mr-4" for="picture" data-browse="@AppData.LangResource[AppData.LanguageID, 313]">@AppData.LangResource[AppData.LanguageID, 313]</label>
                            }
                        </div>

                    </div>
                    
                    <div class="row g-3 align-items-center mt-2">
                        <div class="col-sm-2">
                            <label class="col-form-label"><span></span></label>
                        </div>
                        <div class="col-sm-3">
                            @if (radiationSourceCheckOut.RadiationSourceCheckOutImageData != "")
                            {
                                <div class="card shadow-lg" style="width:30rem;">
                                    <div class="card-body">
                                        @if (!string.IsNullOrEmpty(ImageShow))
                                        {
                                            <a href="@("data:image/png;base64,"+ImageShow+"")" data-lightbox="gallery" data-title="@AppData.LangResource[AppData.LanguageID, 296]">
                                                <img class="img-show float-left m-2" src="@("data:image/png;base64,"+ImageShow+"")" />
                                            </a>

                                        }
                                        else
                                        {
                                            <a href="@($"{Config["nurl"]}{Config["nurlFileRadiationSource"]}{radiationSourceCheckOut.RadiationSourceCheckOutImageData}")" data-lightbox="gallery" data-title="@AppData.LangResource[AppData.LanguageID, 296]">
                                                <img class="img-show float-left m-2" src="@($"{Config["nurl"]}{Config["nurlFileRadiationSource"]}{radiationSourceCheckOut.RadiationSourceCheckOutImageData}")" />
                                            </a>

                                        }
                                    </div>
                                </div>
                            }
                            else
                            {
                                <img class="img-show float-left" src="assets/images/no-img/ImageNotFount.png">
                            }
                        </div>

                    </div>

                    
                </div>
            </div>
            <div class="text-center">
                @if (radiationSourceCheckOut.RadiationSourceNumber != "" && radiationSourceCheckOut.RadiationSourceCheckOutAction != 0 && radiationSourceCheckOut.RadiationSourceCheckOutGiveTo != null && AppData.CurrentPermission.Find(i => i.permissionID == 15).permissionC)
                {
                    <button type="submit" class="btn margin-btn" style="background-color:#2E2BFF; color:#fff" name="CheckOut" id="CheckOut">@AppData.LangResource[AppData.LanguageID, 16]</button>
                }
                else
                {
                    <button type="submit" disabled class="btn margin-btn" style="background-color:#2E2BFF; color:#fff" name="CheckOut" id="CheckOut">@AppData.LangResource[AppData.LanguageID, 16]</button>
                }
                <button type="reset" @onclick="OnClear" class="btn margin-btn" style="background-color:#B90F1B; color:#fff" name="Clear" id="Clear">@AppData.LangResource[AppData.LanguageID, 45]</button>
            </div>
        </div>
    </div>
</EditForm>
<div class="row">
    <div class="col-md-12">
        <div class="card mb-4">
            <div class="card-header">
                <button type="submit" @onclick="Onsearch" class="btn" style="background-color:#2E2BFF; color:#fff"><i class="fas fa-table mr-1"> </i> @AppData.LangResource[AppData.LanguageID, 405]</button>
                <span class="txt-span-checkAll">
                    <input @bind="IsAll" class="form-check-input " type="checkbox" name="isall" id="isall" style="margin-top:10px;">
                    <label for="isall">@AppData.LangResource[AppData.LanguageID, 406]</label>
                </span>
            </div>
            <div class="card-body">
                <div class="scrollBar fixTableHead table-responsive scroll-inner" style="height:350px;">
                    <table id="dataTable" class="table table-bordered table-striped text-center">
                        <thead class="fixedthead">
                            <tr>
                                <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 407]</th>
                                <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 230]</th>
                                <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 122]</th>
                                <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 100]</th>
                                <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 101]</th>
                                <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 23]</th>
                            </tr>
                        </thead>
                        <tbody class="scrollContent">
                            @foreach (var item in RadiationSourceCheckOutfilter)
                            {
                                <tr>
                                    <td data-label="">
                                        @if (!item.RadiationSourceCheckOutStatus)
                                        {
                                            <!--span class="badge badge-secondary">/</!--span-->
                                            <button type="button" style="border-radius: 15px; cursor: context-menu;" class="btn btn-secondary">Returned</button>
                                        }
                                        else
                                        {
                                            <!--span class="badge badge-primary">-</!span-->
                                            <button type="button" style="border-radius: 15px; cursor: context-menu;" class="btn btn-primary">Non-Returned</button>
                                        }
                                    </td>
                                    <td data-label="">@(String.Format("{0:dd/MM/yyyy}", item.RadiationSourceCheckOutDate) != null ? String.Format("{0:dd/MM/yyyy}", item.RadiationSourceCheckOutDate) : "-") </td>
                                    <td data-label="">@item.RadiationSourceNumber</td>
                                    <td data-label="">@(radiationSourceCheckOutActions.Find(i => i.RadiationSourceCheckOutActionID == @item.RadiationSourceCheckOutAction) != null ? radiationSourceCheckOutActions.Find(i => i.RadiationSourceCheckOutActionID == @item.RadiationSourceCheckOutAction).RadiationSourceCheckOutActionTHName:"-")</td>
                                    <td data-label="">
                                        @if (item.IsStaff)
                                        {
                                            @(accounts.Find(i => i.UserID == @item.RadiationSourceCheckOutGiveTo) != null? accounts.Find(i => i.UserID == @item.RadiationSourceCheckOutGiveTo).FirstName:"-")
                                        }
                                        else
                                        {
                                            @(other.Find(i => i.UserID == @item.RadiationSourceCheckOutGiveTo) != null? other.Find(i => i.UserID == @item.RadiationSourceCheckOutGiveTo).UserName:"-")
                                        }
                                    </td>
                                    <td>
                                        <a type="button" class="btn btn-warning " href="@Config["rurl"]/api/RadiationCheckOutReport?CheckOutID=@(item.RadiationSourceCheckOutID)&UserID=@(item.RadiationSourceCheckOutGiveTo )&s=@(item.IsStaff?1:0)&CUserID=@(item.ByUserID )" download="" target="_blank">
                                            <i class="fas fa-download"></i>
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<EditForm Model="@radiationSourceCheckOutAction" OnValidSubmit="PostRadiationSourceCheckOutAction">
    <!--<DataAnnotationsValidator />-->
    <BSModal @ref="AddAction">
        <BSModalHeader OnClick="@(() => AddAction.Hide())" Class="btn-header-color">@AppData.LangResource[AppData.LanguageID, 210]</BSModalHeader>
        <BSModalBody>
            <div class="row">
                <label class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 208]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputText @bind-Value="radiationSourceCheckOutAction.RadiationSourceCheckOutActionTHName" placeholder="@AppData.LangResource[AppData.LanguageID,208]" class="form-control" />
                    </div>

                    <ValidationMessage For="@(() => radiationSourceCheckOutAction.RadiationSourceCheckOutActionTHName)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />

                </div>

            </div>
            <div class="row">
                <label class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 209]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputText @bind-Value="radiationSourceCheckOutAction.RadiationSourceCheckOutActionENName" placeholder="@AppData.LangResource[AppData.LanguageID,209]" class="form-control" />
                    </div>
                    <ValidationMessage For="@(() => radiationSourceCheckOutAction.RadiationSourceCheckOutActionENName)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                </div>
            </div>
        </BSModalBody>
        <BSModalFooter>
            <button type="submit" class="btn btn-warning">@AppData.LangResource[AppData.LanguageID, 44]</button>
            <button type="reset" class="btn btn-warning" @onclick="@(() => AddAction.Hide())">@AppData.LangResource[AppData.LanguageID, 158]</button>
        </BSModalFooter>
    </BSModal>
</EditForm>

<BSModal class="row style-justify mt-5" @ref="Load" IsCentered="true" Size="Size.Small" IgnoreEscape="true" IgnoreClickOnBackdrop="true">
    <BSModalBody>
        <div class="text-center mt-3">
            <span class="spinner-border text-warning spinner-border-sm " role="status" aria-hidden="true"
                  style="font-size: 16pt; width: 36px; height: 36px; color: Gold " />
        </div>
        <div class="text-center pt-3" style=" font-size: 16pt">
            @AppData.LangResource[AppData.LanguageID, 325]
        </div>
    </BSModalBody>
</BSModal>

<!--ModalResponseError-->
<BSModal Class="text-center" @ref="ModalResponseError" IsCentered="true" Size="Size.Large">
    <BSModalBody>
        <div class="row">
            <div class="col-md-12 alert-modal-logo">
                <img src="assets/images/img-common/delete_symbol.png" width="100" height="100" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <p class="alert-modal">@RequertMessage</p>
            </div>
        </div>
        <button type="button" @onclick="@(() => ModalResponseError.Hide())" class="btn btn-success alert-modal-button">@AppData.LangResource[AppData.LanguageID, 330]</button>
    </BSModalBody>
</BSModal>

<EditForm Model="@newOtherUser" OnValidSubmit="PostOtherUser">
    <BSModal @ref="AddOtherUser">
        <BSModalHeader OnClick="@(() => AddOtherUser.Hide())" Class="btn-header-color">@AppData.LangResource[AppData.LanguageID,  644]</BSModalHeader>
        <BSModalBody>
            <div class="row">
                <label for="retrunDate" class="col-4  col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID,  401]*:</span>
                </label>
                <div class="col-8">
                    <div class="input-group input-box-bottom">
                        <InputText id="UserName" @bind-Value="newOtherUser.UserName" disable placeholder="@AppData.LangResource[AppData.LanguageID,  401]" class="form-control" />
                    </div>
                </div>
            </div>
            <div class="row">
                <label for="checkoutDate" class="col-4 col-form-label ">
                    <span>@AppData.LangResource[AppData.LanguageID,  402]* :</span>
                </label>
                <div class="col-8">
                    <div class="input-group input-box-bottom">
                        <InputText id="Department" @bind-Value="newOtherUser.Department" placeholder="@AppData.LangResource[AppData.LanguageID,  402]" class="form-control" />
                    </div>
                </div>
            </div>

            <div class="row">
                <label for="retrunDate" class="col-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID,  403]* :</span>
                </label>
                <div class=" col-8 ">
                    <div class="input-group input-box-bottom">
                        <InputText id="instrumentNumber" @bind-Value="newOtherUser.PhoneNumber" placeholder="@AppData.LangResource[AppData.LanguageID,  403]" class="form-control" />
                    </div>
                </div>
            </div>
            <div class="row">
                <label for="checkoutDate" class="col-md-4 col-form-label ">
                    <span>@AppData.LangResource[AppData.LanguageID,  404]</span>
                </label>
                <div class=" col-8 ">
                    <div class="input-group input-box-bottom">
                        <InputText id="instrumentNumber" @bind-Value="newOtherUser.Email" placeholder="@AppData.LangResource[AppData.LanguageID,  404]" class="form-control" />
                    </div>
                </div>
            </div>

        </BSModalBody>
        <BSModalFooter>
            <button type="submit" class="btn" style="background-color:#4CBB17; color:#fff">@AppData.LangResource[AppData.LanguageID, 44]</button>
            <button type="reset" class="btn" style="background-color:#B90F1B; color:#fff" @onclick="@(() => AddOtherUser.Hide())">@AppData.LangResource[AppData.LanguageID, 158]</button>
        </BSModalFooter>
    </BSModal>
</EditForm>


@code {

    

    BSModal Load { get; set; }
    RadiationSourceCheckOut radiationSourceCheckOut = new RadiationSourceCheckOut();
    RadiationSourceCheckOutAction radiationSourceCheckOutAction = new RadiationSourceCheckOutAction();
    private List<Account> accounts = new List<Account>();
    private List<RadiationSourceCheckOut> RadiationSourceCheckOut = new List<RadiationSourceCheckOut>();
    private List<RadiationSourceCheckOutAction> radiationSourceCheckOutActions = new List<RadiationSourceCheckOutAction>();
    bool IsAll = false;
    List<RadiationSourceCheckOut> RadiationSourceCheckOutfilter => RadiationSourceCheckOut.
         Where(i => (i.RadiationSourceCheckOutStatus == true || i.RadiationSourceCheckOutStatus != IsAll)).ToList();

    OtherUser newOtherUser = new OtherUser();
    OtherUser choose = new OtherUser();
    List<OtherUser> other = new List<OtherUser>();

    /// <summary>
    /// Post RadiationSourceCheckOut
    /// </summary>
    private async Task PostRadiationSourceCheckOut()
    {
        Load.Show();
        await Task.Run(Loading);
        try
        {

            if (radiationSourceCheckOut.RadiationSourceCheckOutGiveTo == null)
            {
                radiationSourceCheckOut.RadiationSourceCheckOutGiveTo = new Guid("00000000-0000-0000-0000-000000000000");
            }

            //ToastService.ShowError($"{radiationSourceCheckOut.RadiationSourceCheckOutAction}");

            //--ของเดิม-var checksourcenumber = (await Http.GetFromJsonAsync<List<RadiationSource>>($"{Config["nurl"]}/api/GetRadiationSourceBynumber?number={radiationSourceCheckOut.RadiationSourceNumber}")).Find(r => r.RadiationSourceNumber == radiationSourceCheckOut.RadiationSourceNumber && r.RadiationSourceStatusID == 1);
            var checksourcenumber = (await Http.GetFromJsonAsync<List<RadiationSource>>($"{Config["nurl"]}/api/GetRadiationSourceBynumber?number={radiationSourceCheckOut.RadiationSourceNumber}")).Find(r => r.RadiationSourceNumber == radiationSourceCheckOut.RadiationSourceNumber);
            if (checksourcenumber == null)
            {
                ToastService.ShowError("There is no SourceNumber or checkout.");
            }
            else if (checksourcenumber.RadiationSourceStatusID == 1 && radiationSourceCheckOut.RadiationSourceCheckOutAction != 5)
            {

                if (radiationSourceCheckOut.RadiationSourceCheckOutReturnDate.HasValue != null && radiationSourceCheckOut.RadiationSourceCheckOutDate.HasValue != null &&
                    radiationSourceCheckOut.RadiationSourceCheckOutReturnDate.Value.Date >= radiationSourceCheckOut.RadiationSourceCheckOutDate.Value.Date)
                {

                    radiationSourceCheckOut.ByUserID = AppData.UserID;
                    var respond = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/RegisterRadiationSourceCheckOut", radiationSourceCheckOut);
                    if (respond.StatusCode == System.Net.HttpStatusCode.OK)
                    {

                        //ToastService.ShowSuccess("CheckOut Successfully");
                        List<RadiationSourceCheckOut> checkOuts = await respond.Content.ReadFromJsonAsync<List<RadiationSourceCheckOut>>();
                        radiationSourceCheckOut = checkOuts.First();
                        RadiationSourceCheckOut.Add(radiationSourceCheckOut);
                        string url = $"{Config["rurl"]}/api/RadiationCheckOutReport?CheckOutID={radiationSourceCheckOut.RadiationSourceCheckOutID}&UserID={radiationSourceCheckOut.RadiationSourceCheckOutGiveTo}&s={(radiationSourceCheckOut.IsStaff ? 1 : 0)}&CUserID={AppData.UserID}";//Rc
                        await jsRuntime.InvokeVoidAsync("OpenURL", url);
                        //((IJSInProcessRuntime)jsRuntime).InvokeVoid("OpenURL", url);
                        await ImageDefaultFile();
                        ToastService.ShowSuccess("Checkout Successfully.");
                    }
                }
                else
                {
                    ToastService.ShowError("Return date must be after Check Out date");
                }

            }
            else if (checksourcenumber.RadiationSourceStatusID == 1 && radiationSourceCheckOut.RadiationSourceCheckOutAction == 5)
            {
                
                radiationSourceCheckOut.ByUserID = AppData.UserID;
                var respond = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/RegisterRadiationSourceCheckOut", radiationSourceCheckOut);
                if (respond.StatusCode == System.Net.HttpStatusCode.OK)
                {

                    //ToastService.ShowSuccess("CheckOut Successfully");
                    List<RadiationSourceCheckOut> checkOuts = await respond.Content.ReadFromJsonAsync<List<RadiationSourceCheckOut>>();
                    radiationSourceCheckOut = checkOuts.First();
                    RadiationSourceCheckOut.Add(radiationSourceCheckOut);
                    string url = $"{Config["rurl"]}/api/RadiationCheckOutReport?CheckOutID={radiationSourceCheckOut.RadiationSourceCheckOutID}&UserID={radiationSourceCheckOut.RadiationSourceCheckOutGiveTo}&s={(radiationSourceCheckOut.IsStaff ? 1 : 0)}&CUserID={AppData.UserID}";//Rc
                    await jsRuntime.InvokeVoidAsync("OpenURL", url);
                    //((IJSInProcessRuntime)jsRuntime).InvokeVoid("OpenURL", url);
                    await ImageDefaultFile();
                    ToastService.ShowSuccess("Checkout Successfully.");
                }
            }
            else
            {
                ToastService.ShowError($"The action doesn't match the source number status.");
               
            }


            
        }
        catch (Exception e)
        {
            ToastService.ShowError($"Error:{e.Message}");
        }

        Load.Hide();


    }

    /// <summary>
    /// OnClear
    /// </summary>
    public void OnClear()
    {
        radiationSourceCheckOut = new RadiationSourceCheckOut
            {
                RadiationSourceCheckOutDate = DateTime.Now
            };

        radiationSourceCheckOut.IsStaff = true;

    }

    /// <summary>
    /// PostAction
    /// </summary>
    private async Task PostRadiationSourceCheckOutAction()
    {
        await Http.PostAsJsonAsync($"{Config["nurl"]}/api/RegisterRadiationSourceCheckOutAction", radiationSourceCheckOutAction);
        ToastService.ShowSuccess("Successfully CheckOutAction");

        AddAction.Hide();
        await OnInitializedAsync();
    }


    private IBrowserFile? fileImageDefault;

    private string? ImageShow { get; set; }

    private string pathPictureDefaultFolder { get; set; } = "PictureDefault";

    private byte[] UploadPathDefault { get; set; }

    /// <summary>
    /// Image Default
    /// </summary>
    private async Task OnInputFileDefaultChange(InputFileChangeEventArgs e)
    {
        fileImageDefault = e.File;
        var imageType = fileImageDefault.ContentType;
        var sizefile = fileImageDefault.Size;

        if (sizefile > 5542880)
        {
            ToastService.ShowError("The file size cannot exceed 5MB.");
            radiationSourceCheckOut.RadiationSourceCheckOutImageData = "";
        }
        else if (imageType != "image/png" && imageType != "image/jpeg")
        {
            ToastService.ShowError("File Type Image Incorrect !");
            radiationSourceCheckOut.RadiationSourceCheckOutImageData = "";
        }
        else
        {
            Load.Show();
            await Task.Run(Loading);
            var resizedImage = await fileImageDefault.RequestImageFileAsync(imageType, 550, 550);
            // อ่านข้อมูลรูปภาพและแปลงเป็น Base64
            using (var stream = resizedImage.OpenReadStream(resizedImage.Size))
            {
                var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                var buffer = memoryStream.ToArray();
                ImageShow = Convert.ToBase64String(buffer);
            }
            int maxWidth = 640;
            int maxHeight = 480;
            int quality = 90;

            byte[] compressedImage = _imageService.CompressBase64Image(ImageShow, maxWidth, maxHeight, quality);
            string compressedBase64 = Convert.ToBase64String(compressedImage);
            ImageShow = compressedBase64;
            UploadPathDefault = compressedImage;

            string newFileImageName = await GenerateUniqueFileName(fileImageDefault.Name, pathPictureDefaultFolder);
            radiationSourceCheckOut.RadiationSourceCheckOutImageData = newFileImageName;
            radiationSourceCheckOut.RadiationSourceCheckOutFile = compressedBase64;

            //using MemoryStream memoryStream = new MemoryStream();
            //await fileImageDefault.OpenReadStream(sizefile).CopyToAsync(memoryStream);
            //var buffer = memoryStream.GetBuffer();
            //var imageLeftDataUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffer)}";
            //ImageShow = imageLeftDataUrl;
            //string newFileImageName = await GenerateUniqueFileName(fileImageDefault.Name, pathPictureDefaultFolder);
            //radiationSourceCheckOut.RadiationSourceCheckOutImageData = newFileImageName;

            //string base64Image = Convert.ToBase64String(buffer);
            //int maxWidth = 800;
            //int maxHeight = 600;
            //int quality = 95;

            //byte[] compressedImage = _imageService.CompressBase64Image(base64Image, maxWidth, maxHeight, quality);
            //string compressedBase64 = Convert.ToBase64String(compressedImage);
            //radiationSourceCheckOut.RadiationSourceCheckOutFile = compressedBase64;
            Load.Hide();
        }


    }
    /// <summary>
    /// Image Default
    /// </summary>
    private async Task ImageDefaultFile()
    {

        if (fileImageDefault != null)
        {
            try
            {
                var imageType = fileImageDefault.ContentType;
                var sizefile = fileImageDefault.Size;
                if (sizefile > 5542880)
                {
                    //ToastService.ShowError("The file size cannot exceed 5MB.");
                    radiationSourceCheckOut.RadiationSourceCheckOutImageData = "";
                }
                else if (imageType != "image/png" && imageType != "image/jpeg")
                {
                    ///ToastService.ShowError("File Type Image Incorrect !");
                    radiationSourceCheckOut.RadiationSourceCheckOutImageData = "";
                }
                else
                {
                    string newFileImageName = await GenerateUniqueFileName(fileImageDefault.Name, pathPictureDefaultFolder);
                    string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "CheckOut", "Picture", pathPictureDefaultFolder, newFileImageName);
                    Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "CheckOut", "Picture", pathPictureDefaultFolder)); // Ensure the directory exists

                    await File.WriteAllBytesAsync(path, UploadPathDefault);

                    //string newFileImageName = await GenerateUniqueFileName(fileImageDefault.Name, pathPictureDefaultFolder);
                    ////string prefixedNewFileName = $"Update_{showinstrument.InstrumentNumber}_" + newFileImageName;
                    //string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "CheckOut", "Picture", pathPictureDefaultFolder, newFileImageName);

                    //Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "CheckOut", "Picture", pathPictureDefaultFolder));

                    //await using FileStream fs = new(path, FileMode.Create);
                    //await fileImageDefault.OpenReadStream(sizefile).CopyToAsync(fs);


                }

            }
            catch (Exception ex)
            {
                ToastService.ShowError($"File: {fileImageDefault.Name} Error: {ex.Message}");
            }
        }

    }

    /// <summary>
    /// GenerateUniqueFileDocument
    /// </summary>
    private async Task<string> GenerateUniqueFileName(string originalFileName, string folderName)
    {
        string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(originalFileName);
        string fileExtension = Path.GetExtension(originalFileName);
        string newFileName = fileNameWithoutExtension + fileExtension;

        int counter = 1;
        string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "CheckOut", "Picture", folderName, newFileName);

        while (File.Exists(path))
        {
            newFileName = $"{fileNameWithoutExtension}({counter}){fileExtension}";
            path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "CheckOut", "Picture", folderName, newFileName);
            counter++;
        }

        return newFileName;
    }


    /// <summary>
    /// Modal Action
    /// </summary>
    BSModal AddAction { get; set; }
    BSModal ModalResponseError { get; set; }
    BSModal AddOtherUser { get; set; }
    private string RequertMessage;


    /// <summary>
    /// OnInitializedAsync
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        OnClear();

        //*(อันเก่าเวอร์ชั่น 1.5)*radiationSourceCheckOutActions = await Http.GetFromJsonAsync<List<RadiationSourceCheckOutAction>>("api/GetRadiationSourceCheckOutAction");
        this.radiationSourceCheckOut.IsStaff = true;
        radiationSourceCheckOutActions = AppData.radiationSourceCheckOutActions;
        other = await Http.GetFromJsonAsync<List<OtherUser>>($"{Config["nurl"]}/api/OtherUser");
        //try
        //{

        //    var result = await _masterData.GetAllActiveMasterDataAsync<RadiationSourceCheckOutAction>("ActiveRadiationSourceCheckOutAction");
        //    if (result.Find(i => i.Content == result.ToString()) == null)
        //    {
        //        radiationSourceCheckOutActions = result;
        //    }
        //}
        //catch (Exception e)
        //{
        //    var value = e.Message;
        //    RequertMessage = value;
        //    ModalResponseError.Show();
        //}





        accounts = await Http.GetFromJsonAsync<List<Account>>($"{Config["aurl"]}/api/GetAccount");

        if (AppData.LanguageID == 0)
        {
            var resultRadiationSourceCheckOutActionsEN = radiationSourceCheckOutActions.OrderBy(ca => ca.RadiationSourceCheckOutActionENName).ToList();
            radiationSourceCheckOutActions = resultRadiationSourceCheckOutActionsEN;
            var resultAccount = accounts.OrderBy(a => a.FirstName).ToList();
            accounts = resultAccount;
            var resultOther = other.OrderBy(o => o.UserName).ToList();
            other = resultOther;
        }
        else
        {
            var resultRadiationSourceCheckOutActionsTH = radiationSourceCheckOutActions.OrderBy(ca => ca.RadiationSourceCheckOutActionTHName).ToList();
            radiationSourceCheckOutActions = resultRadiationSourceCheckOutActionsTH;
            var resultOther = other.OrderBy(o => o.UserName).ToList();
            other = resultOther;
        }

    }
    public async void Onsearch()
    {

        await Task.Run(Loading);
        Load.Show();
        await Task.Run(Loading);
        RadiationSourceCheckOut = await Http.GetFromJsonAsync<List<RadiationSourceCheckOut>>($"{Config["nurl"]}/api/GetRadiationSourceCheckOut");
        StateHasChanged();
        Load.Hide();
    }

    private async Task PostOtherUser()
    {
        try
        {
            var res = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/OtherUser", newOtherUser);
            if (res.StatusCode == System.Net.HttpStatusCode.OK)
            {

                var o = await res.Content.ReadFromJsonAsync<OtherUser>();
                this.other.Add(o);
                this.radiationSourceCheckOut.RadiationSourceCheckOutGiveTo = o.UserID;
                ToastService.ShowSuccess("OtherUser Save Successfully");
            }
        }
        catch (Exception e)
        {
            ToastService.ShowError($"Error:{e.Message}");
        }
        AddOtherUser.Hide();
        StateHasChanged();

    }

    /// <summary>
    /// clearURL
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("clearURL");
            await jsRuntime.InvokeAsync<object>("showFileName");
        }
    }

    private void Loading()
    {
        System.Threading.Thread.Sleep(300);
        // Retrieve data from the server and initialize
        // Employees property which the View will bind
    }

}
