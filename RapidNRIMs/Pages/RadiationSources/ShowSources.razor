@page "/RadiationSources/ShowSources/{id}"
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager
@inject AppData AppData
@inject IRadiationSourceService RadiationSourceService
@inject IRadiationSourceTypeService RadiationSourceTypeService
@inject IToastService ToastService
@inject IPrintingService PrintingService
@inject HttpClient http
@using System.Threading
@inject IConfiguration Config
@inject IMasterData _masterData
@inject ImageService _imageService

<PageTitle>Show Source Page</PageTitle>

<EditForm Model="@radiationSource" OnValidSubmit="UpdateSourceSearch">
    <div class="row margin-row-card">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">@AppData.LangResource[AppData.LanguageID, 122] : @radiationSource.RadiationSourceNumber</div>
                <div class="card-body">
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 123]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <InputText class="form-control" @bind-Value="radiationSource.RadiationSourceNuclide" placeholder="@AppData.LangResource[AppData.LanguageID,123]" />
                                <!--input type="text" list="txtSearch" class="form-control"/-->
                                <!--datalist id="txtSearch">
                                    @foreach (var item in AppData.radiationSourceTypes)
                                    {
                                        <option>@item.RadiationSourceTypeName</option>
                                    }
                                </!--datalist-->
                            </div>
                            <ValidationMessage For="@(() => radiationSource.RadiationSourceNuclide)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px;" />
                        </div>
                        <label class="col-12 col-md-4 col-lg-1 col-form-label-ins margin-label-ins">
                            <span>@AppData.LangResource[AppData.LanguageID, 125]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <InputSelect class="form-control" @bind-Value="radiationSource.RadiationSourceTypeID">
                                    <option value="0">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                    @foreach (var item in AppData.radiationSourceTypes)
                                    {
                                        if (item.IsActive == true && item.IsActive != null)
                                        {
                                            <option value="@item.RadiationSourceTypeID">@item.RadiationSourceTypeName</option>
                                        }
                                    }
                                </InputSelect>
                                <span class="span-btn-sourceType">
                                    @if (AppData.CurrentPermission.Find(i => i.permissionID == 13).permissionE)
                                    {
                                        <!--button type="button" @onclick="@(() => AddSourceType.Show())" class="btn btn-warning margin-btn">
                                            <i class="fas fa-plus"></i>
                                        </button-->
                                    }
                                </span>
                            </div>
                            <ValidationMessage For="@(() => radiationSource.RadiationSourceTypeID)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px;" />
                        </div>
                    </div>

                    <div class="row">
                        <label class="col-12 col-md-3 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 528]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-2">
                            <div class="input-group input-box-bottom">
                                <!--InputText @bind-Value="radiationSource.RadiationSourceActivityDetail" class="form-control" placeholder="@AppData.LangResource[AppData.LanguageID,124]" /--->
                                <InputNumber @bind-Value="radiationSource.InitialActivity" min="0" class="form-control" placeholder="@AppData.LangResource[AppData.LanguageID,528]" />
                            </div>
                        </div>

                        <div class="col-12 col-md-1 col-lg-1">
                            <div class="input-group input-box-bottom">
                                <InputSelect class="form-control" @bind-Value="radiationSource.RadioActivityUnitID">
                                    @foreach (var item in AppData.radiationSourceUnits)
                                    {
                                        if (item.IsActive == true && item.IsActive != null)
                                        {
                                            <option value="@item.RadiationSourceUnitID">@item.RadiationSourceUnitName</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <label class="col-12 col-md-3 col-lg-1 col-form-label-ins margin-label-ins">
                            <span>@AppData.LangResource[AppData.LanguageID, 435]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-2">
                            <div class="input-group input-box-bottom">
                                <InputText @bind-Value="radiationSource.RadiationSourceDoseRate" class="form-control" placeholder="@AppData.LangResource[AppData.LanguageID,435]" />
                            </div>
                        </div>

                        <div class="col-12 col-md-1 col-lg-1">
                            <div class="input-group input-box-bottom">
                                <InputSelect class="form-control" @bind-Value="radiationSource.RadiationDoseUnitID">
                                    @foreach (var item in AppData.radiationDoseUnits)
                                    {
                                        if (item.IsActive == true && item.IsActive != null)
                                        {
                                            <option value="@item.RadiationDoseUnitID">@item.RadiationDoseUnitSymbol</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        </div>

                    </div>
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 126]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <InputDate @bind-Value="radiationSource.RadiationSourceManufacturedDate" class="form-control" name="ManufacturedDate" id="ManufacturedDate" placeholder="@AppData.LangResource[AppData.LanguageID, 126]" />
                            </div>
                        </div>
                        <label class="col-12 col-md-4 col-lg-1 col-form-label-ins margin-label-ins">
                            <span>@AppData.LangResource[AppData.LanguageID, 112]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <InputDate @bind-Value="radiationSource.RadiationSourcePurchaseDate" class="form-control" name="PurchaseDate" id="PurchaseDate" placeholder="@AppData.LangResource[AppData.LanguageID, 112]" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 128]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <!--input type="number" @bind-value="radiationSource.RadiationSourceHalflife" min="0" class="form-control" name="Halflife" id="Halflife" placeholder="@AppData.LangResource[AppData.LanguageID, 128]" /--->
                                <InputNumber @bind-Value="radiationSource.Halflife" class="form-control" min="0" placeholder="@AppData.LangResource[AppData.LanguageID,128]" />
                            </div>
                        </div>
                        <label class="ccol-12 col-md-4 col-lg-1 col-form-label-ins margin-label-ins">
                            <span>@AppData.LangResource[AppData.LanguageID, 63]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <InputText @bind-Value="radiationSource.RadiationSourceSerial" class="form-control" name="SerialNumber" id="SerialNumber" placeholder="@AppData.LangResource[AppData.LanguageID, 63]" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <label for="location" class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 30]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <InputSelect class="form-control" @bind-Value="radiationSource.RadiationSourceLocation" id="location">
                                    <option value="0">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                    @foreach (var item in AppData.radiationSourceLocations)
                                    {
                                        if (item.IsActive == true && item.IsActive != null)
                                        {
                                            @if (AppData.LanguageID == 0 || item.RadiationSourceLocationID == radiationSource.RadiationSourceLocation)
                                            {
                                                <option value="@item.RadiationSourceLocationID">@item.RadiationSourceLocationENName</option>
                                            }
                                            else
                                            {
                                                <option value="@item.RadiationSourceLocationID">@item.RadiationSourceLocationTHName</option>
                                            }
                                        }
                                    }
                                </InputSelect>
                                <span class="span-btn-location">
                                    @if (AppData.CurrentPermission.Find(i => i.permissionID == 13).permissionE)
                                    {
                                        <!--button type="button" @onclick="@(() => AddSourceLocation.Show())" class="btn btn-warning margin-btn">
                                            <i class="fas fa-plus"></i>
                                        </button-->
                                    }
                                </span>
                            </div>
                        </div>
                        <label class="col-12 col-md-4 col-lg-1 col-form-label-ins margin-label-ins">
                            <span class="txt-span-ins">@AppData.LangResource[AppData.LanguageID, 529]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom input-box-ins">
                                <InputNumber  @bind-Value="radiationSource.CurrentActivity" disabled class="form-control" placeholder="@AppData.LangResource[AppData.LanguageID,529]" />
                            </div>
                            
                        </div>
                    </div>
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 110]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <InputNumber @bind-Value="radiationSource.RadiationSourceQuantity" min="0" class="form-control" placeholder="@AppData.LangResource[AppData.LanguageID, 110]" />
                            </div>
                        </div>
                        <label class="col-12 col-md-4 col-lg-1 col-form-label-ins margin-label-ins">
                            <span>@AppData.LangResource[AppData.LanguageID, 111]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <InputNumber step=".01" @bind-Value="radiationSource.RadiationSourcePrice" min="0" class="form-control" placeholder="@AppData.LangResource[AppData.LanguageID, 111]" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <label for="status" class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 303]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <InputSelect disabled class="form-control" @bind-Value="radiationSource.RadiationSourceStatusID" id="status">
                                    <option value="0">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                    @foreach (var item in radiationSourceStatus)
                                    {
                                        @if (AppData.LanguageID == 0 || item.RadiationSourceStatusID == radiationSource.RadiationSourceStatusID)
                                        {
                                            <option value="@item.RadiationSourceStatusID">@item.RadiationSourceStatusENName</option>
                                        }
                                        else
                                        {
                                            <option value="@item.RadiationSourceStatusID">@item.RadiationSourceStatusTHName</option>
                                        }
                                    }
                                </InputSelect>

                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 295]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <InputFile OnChange="@OnInputFileDocumentChange" class="custom-file-input file-name-custom" id="documentfile" />
                                @if (AppData.LanguageID == 0)
                                {
                                    <label class="custom-file-label" for="documentfile" data-browse="@AppData.LangResource[AppData.LanguageID, 313]">@AppData.LangResource[AppData.LanguageID, 313]</label>
                                }
                                else
                                {
                                    <label class="custom-file-label" for="documentfile" data-browse="@AppData.LangResource[AppData.LanguageID, 313]">@AppData.LangResource[AppData.LanguageID, 313]</label>
                                }
                                <span class="span-btn-type">
                                    @if (AppData.CurrentPermission.Find(i => i.permissionID == 13).permissionE && radiationSource.RadiationSourceFile != null && radiationSource.RadiationSourceFile != "")
                                    {
                                        string fileRegisterpath = Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "Register", pathDocumentFolder, radiationSource.RadiationSourceFile);
                                        string Filepath = Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "Edit", pathDocumentFolder, radiationSource.RadiationSourceFile);
                                        if (File.Exists(fileRegisterpath) || File.Exists(Filepath))
                                        {
                                            <a href="@($"{Config["nurl"]}{Config["nurlFileRadiationSource"]}{radiationSource.RadiationSourceFile}")" class="btn btn-warning margin-btn" target="_blank">
                                                <i class="fas fa-download"></i>
                                            </a>
                                        }
                                        else
                                        {
                                            <button type="button" disabled class="btn btn-warning margin-btn">
                                                <i class="fas fa-download"></i>
                                            </button>
                                        }
                                     
                                        <!---button type="button" class="btn btn-warning margin-btn" @onclick="DownloadFile">
                                        <i class="fas fa-download"></i></!---button--->
                                    }
                                    else
                                    {
                                        <button type="button" disabled class="btn btn-warning margin-btn" >
                                        <i class="fas fa-download"></i></button>
                                    }

                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 296]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <InputFile OnChange="@OnInputFileDefaultChange" class="custom-file-input file-name-custom" id="pictureDefault" />
                                @if (AppData.LanguageID == 0)
                                {
                                    <label class="custom-file-label" for="pictureDefault" data-browse="@AppData.LangResource[AppData.LanguageID, 313]">@AppData.LangResource[AppData.LanguageID, 313]</label>
                                }
                                else
                                {
                                    <label class="custom-file-label" for="pictureDefault" data-browse="@AppData.LangResource[AppData.LanguageID, 313]">@AppData.LangResource[AppData.LanguageID, 313]</label>
                                }
                            </div>
                        </div>
                        <label for="user" class="col-12 col-md-4 col-lg-1 col-form-label-ins margin-label-ins">
                            <span class="txt-span-ins">@AppData.LangResource[AppData.LanguageID, 73]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom input-box-ins">
                                <InputSelect class="form-control" @bind-Value="userID">
                                    <option value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                    @foreach (var item in accounts)
                                    {
                                        if (item.IsActive)
                                        {
                                            <option value="@item.UserID">@item.FirstName</option>
                                        }
                                    }
                                </InputSelect>
                                <span class="span-btn">
                                    @if (userID != null)
                                    {
                                        <button type="button" @onclick="@(() => AddResposibleUser())" class="btn btn-warning">
                                            @AppData.LangResource[AppData.LanguageID, 419]
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-warning" @onclick="PleaseSelect">
                                            @AppData.LangResource[AppData.LanguageID, 419]
                                        </button>
                                    }
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span></span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                @if (radiationSource.RadiationSourcePictureDefault != "")
                                {
                                    <div class="card shadow-lg" style="width:30rem;">
                                        <div class="card-body">
                                            @if (!string.IsNullOrEmpty(ImageShow))
                                            {
                                                <a href="@("data:image/png;base64,"+ImageShow+"")" data-lightbox="gallery" data-title="@AppData.LangResource[AppData.LanguageID, 296]">
                                                    <img class="img-show float-left m-2" src="@("data:image/png;base64,"+ImageShow+"")" />
                                                </a>

                                            }
                                            else
                                            {
                                                <a href="@($"{Config["nurl"]}{Config["nurlFileRadiationSource"]}{radiationSource.RadiationSourcePictureDefault}")" data-lightbox="gallery" data-title="@AppData.LangResource[AppData.LanguageID, 296]">
                                                    <img class="img-show float-left m-2" src="@($"{Config["nurl"]}{Config["nurlFileRadiationSource"]}{radiationSource.RadiationSourcePictureDefault}")" />
                                                </a>

                                            }
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <img class="img-show float-left" src="assets/images/no-img/ImageNotFount.png">
                                }
                            </div>
                        </div>
                        <label class="col-12 col-md-4 col-lg-1 col-form-label-ins margin-label-ins">
                            <span></span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="table-responsive fixTableHead scroll-inner scrollBar-x  margin-bottom">
                                <table class="table table-striped text-center">
                                    <thead class="fixedthead">
                                        <tr>
                                            <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 420]</th>
                                            <th class="alternateRow"> - </th>

                                        </tr>
                                    </thead>
                                    <tbody class="scrollContent">
                                        @foreach (var item in radiationSource.Resposible)
                                        {
                                            <tr>
                                                <td> @item.resposibleUserName</td>
                                                <td class="badge badge-pill badge-danger" @onclick="@(()=> DeleteResposible(@item))">@AppData.LangResource[AppData.LanguageID, 421]</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 298]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <InputFile OnChange="@OnInputFileLeftChange" class="custom-file-input file-name-custom" id="pictureLeft" />
                                @if (AppData.LanguageID == 0)
                                {
                                    <label class="custom-file-label" for="pictureLeft" data-browse="@AppData.LangResource[AppData.LanguageID, 313]">@AppData.LangResource[AppData.LanguageID, 313]</label>
                                }
                                else
                                {
                                    <label class="custom-file-label" for="pictureLeft" data-browse="@AppData.LangResource[AppData.LanguageID, 313]">@AppData.LangResource[AppData.LanguageID, 313]</label>
                                }
                            </div>
                        </div>
                        <label class="col-12 col-md-4 col-lg-1 col-form-label-ins margin-label-ins">
                            <span>@AppData.LangResource[AppData.LanguageID, 299]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <InputFile OnChange="@OnInputFileRightChange" class="custom-file-input file-name-custom" id="pictureRight" />
                                @if (AppData.LanguageID == 0)
                                {
                                    <label class="custom-file-label" for="pictureRight" data-browse="@AppData.LangResource[AppData.LanguageID, 313]">@AppData.LangResource[AppData.LanguageID, 313]</label>
                                }
                                else
                                {
                                    <label class="custom-file-label" for="pictureRight" data-browse="@AppData.LangResource[AppData.LanguageID, 313]">@AppData.LangResource[AppData.LanguageID, 313]</label>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span></span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                @if (radiationSource.RadiationSourcePictureLeft != "")
                                {
                                    <div class="card shadow-lg" style="width:30rem;">
                                        <div class="card-body">
                                            @if (!string.IsNullOrEmpty(ImageLeftShow))
                                            {
                                                <a href="@("data:image/png;base64,"+ImageLeftShow+"")" data-lightbox="gallery" data-title="@AppData.LangResource[AppData.LanguageID, 298]">
                                                    <img class="img-show float-left m-2" src="@("data:image/png;base64,"+ImageLeftShow+"")" />
                                                </a>

                                            }
                                            else
                                            {
                                                <a href="@($"{Config["nurl"]}{Config["nurlFileRadiationSource"]}{radiationSource.RadiationSourcePictureLeft}")" data-lightbox="gallery" data-title="@AppData.LangResource[AppData.LanguageID, 298]">
                                                    <img class="img-show float-left m-2" src="@($"{Config["nurl"]}{Config["nurlFileRadiationSource"]}{radiationSource.RadiationSourcePictureLeft}")" />
                                                </a>

                                            }
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <img class="img-show float-left" src="assets/images/no-img/ImageNotFount.png">
                                }

                            </div>
                        </div>
                        <label class="col-12 col-md-4 col-lg-1 col-form-label-ins margin-label-ins">
                            <span></span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                @if (radiationSource.RadiationSourcePictureRight != "")
                                {
                                    <div class="card shadow-lg" style="width:30rem;">
                                        <div class="card-body">
                                           @if (!string.IsNullOrEmpty(ImageRightShow))
                                            {
                                                <a href="@("data:image/png;base64,"+ImageRightShow+"")" data-lightbox="gallery" data-title="@AppData.LangResource[AppData.LanguageID, 299]">
                                                    <img class="img-show float-left m-2" src="@("data:image/png;base64,"+ImageRightShow+"")" />
                                                </a>

                                            }
                                            else
                                            {
                                                <a href="@($"{Config["nurl"]}{Config["nurlFileRadiationSource"]}{radiationSource.RadiationSourcePictureRight}")" data-lightbox="gallery" data-title="@AppData.LangResource[AppData.LanguageID, 299]">
                                                    <img class="img-show float-left m-2" src="@($"{Config["nurl"]}{Config["nurlFileRadiationSource"]}{radiationSource.RadiationSourcePictureRight}")" />
                                                </a>

                                            }
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <img class="img-show float-left" src="assets/images/no-img/ImageNotFount.png">
                                }
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 37]</span>
                        </label>
                        <div class="col-12 col-md-12 col-lg-8 input-box-bottom">
                            <InputTextArea @bind-Value="radiationSource.RadiationSourceDetail" rows="2" placeholder="@AppData.LangResource[AppData.LanguageID,37]" class="form-control"></InputTextArea>
                        </div>
                    </div>

                </div>
            </div>
           
        </div>
    </div>
    <div class="row margin-row-card">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">@AppData.LangResource[AppData.LanguageID, 76]</div>
                <div class="card-body">
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 77]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                           <div class="input-group input-box-bottom">
                                <InputSelect class="form-control" @bind-Value="radiationSource.RadiationSourceAgencyID">
                                    <option value="0">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                    @foreach (var item in AppData.radiationSourceAgencies)
                                    {
                                        if (item.IsActive == true && item.IsActive != null)
                                        {
                                            <option value="@item.RadiationSourceAgencyID">@item.RadiationSourceAgencyName</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <label for="address" class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 39]</span>
                        </label>
                       <div class="col-12 col-md-12 col-lg-8 input-box-bottom">
                            @if (radiationSource.RadiationSourceAgencyID > 0)
                            {
                                <InputTextArea disabled @bind-Value="AppData.radiationSourceAgencies.Find(i => i.RadiationSourceAgencyID == radiationSource.RadiationSourceAgencyID).RadiationSourceAgencyAddress" rows="2" placeholder="@AppData.LangResource[AppData.LanguageID,39]" class="form-control" />
                            }
                            else
                            {
                                <InputTextArea disabled @bind-Value="radiationSourceAgency.RadiationSourceAgencyAddress" rows="2" placeholder="@AppData.LangResource[AppData.LanguageID,39]" class="form-control" />
                            }

                        </div>
                    </div>
                    <div class="row">
                        <label for="tel" class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 78]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                @if (radiationSource.RadiationSourceAgencyID > 0)
                                {
                                    <InputText disabled maxlength="10" @bind-Value="AppData.radiationSourceAgencies.Find(b => b.RadiationSourceAgencyID == radiationSource.RadiationSourceAgencyID).RadiationSourceAgencyTel" id="tel" placeholder="@AppData.LangResource[AppData.LanguageID,78]" class="form-control" />
                                }
                                else
                                {
                                    <InputText disabled maxlength="10" @bind-Value="radiationSourceAgency.RadiationSourceAgencyTel" id="tel" placeholder="@AppData.LangResource[AppData.LanguageID,78]" class="form-control" />
                                }

                            </div>
                        </div>
                        <label for="email" class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 79]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                           <div class="input-group input-box-bottom">
                                @if (radiationSource.RadiationSourceAgencyID > 0)
                                {
                                    <InputText disabled @bind-Value="AppData.radiationSourceAgencies.Find(b => b.RadiationSourceAgencyID == radiationSource.RadiationSourceAgencyID).RadiationSourceAgencyEmail" placeholder="@AppData.LangResource[AppData.LanguageID,79]" class="form-control" />
                                }
                                else
                                {
                                    <InputText disabled @bind-Value="radiationSourceAgency.RadiationSourceAgencyEmail" placeholder="@AppData.LangResource[AppData.LanguageID,79]" class="form-control" />
                                }

                            </div>
                           
                        </div>
                    </div>
                </div>
            </div>
            <div class="text-center">
                <a href="RadiationSources/SourcesSearch" class="btn margin-btn" style="background-color:#7F7F7F; color:#fff">@AppData.LangResource[AppData.LanguageID, 49]</a>
                @if (AppData.CurrentPermission.Find(i => i.permissionID == 13).permissionE)
                {
                    <button type="button" @onclick="BarcodeQRGeneratre" class="btn btn-warning margin-btn">@AppData.LangResource[AppData.LanguageID, 87]</button>
                }
                @if (radiationSource.RadiationSourceNuclide != "" && radiationSource.RadiationSourceTypeID != null && radiationSource.InitialActivity != null  && radiationSource.RadiationSourceDoseRate != "" && radiationSource.Halflife != null && AppData.CurrentPermission.Find(i => i.permissionID == 13).permissionU)
                {
                    <button type="submit" class="btn margin-btn" style="background-color:#4CBB17; color:#fff">@AppData.LangResource[AppData.LanguageID, 44]</button>
                }
                else
                {
                    <button type="button" disabled class="btn margin-btn" style="background-color:#4CBB17; color:#fff">@AppData.LangResource[AppData.LanguageID, 44]</button>
                }
            </div>
        </div>
    </div>

</EditForm>

<EditForm Model="@radiationSourceType" OnValidSubmit="PostRadiationSourceType">
    <!--<DataAnnotationsValidator />-->
    <BSModal @ref="AddSourceType">
        <BSModalHeader OnClick="@(() => AddSourceType.Hide())" Class="btn-header-color">@AppData.LangResource[AppData.LanguageID, 205]</BSModalHeader>
        <BSModalBody>
            <div class="row">
                <label class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 206]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputText @bind-Value="radiationSourceType.RadiationSourceTypeName" placeholder="@AppData.LangResource[AppData.LanguageID,206]" class="form-control" />
                    </div>
                    <ValidationMessage For="@(() => radiationSourceType.RadiationSourceTypeName)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                </div>
            </div>
            <div class="row">
                <label class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 207]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputTextArea @bind-Value="radiationSourceType.RadiationSourceTypeDescription" rows="2" placeholder="@AppData.LangResource[AppData.LanguageID,207]" class="form-control" />
                    </div>
                    <ValidationMessage For="@(() => radiationSourceType.RadiationSourceTypeDescription)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                </div>
            </div>
        </BSModalBody>
        <BSModalFooter>
            <button type="submit" class="btn btn-warning">@AppData.LangResource[AppData.LanguageID, 44]</button>
            <button type="reset" class="btn btn-warning" @onclick="@(() => AddSourceType.Hide())" name="Cancel" id="Cancel">@AppData.LangResource[AppData.LanguageID, 158]</button>
        </BSModalFooter>
    </BSModal>
</EditForm>

<EditForm Model="@radiationSourceLocation" OnValidSubmit="PostRadiationSourceLocation">
    <!--<DataAnnotationsValidator />-->
    <BSModal @ref="AddSourceLocation">
        <BSModalHeader OnClick="@(() => AddSourceLocation.Hide())" Class="btn-header-color">@AppData.LangResource[AppData.LanguageID, 211]</BSModalHeader>
        <BSModalBody>
            <div class="row">
                <label class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 212]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputText @bind-Value="radiationSourceLocation.RadiationSourceLocationTHName" placeholder="@AppData.LangResource[AppData.LanguageID,212]" class="form-control" />
                    </div>
                    <ValidationMessage For="@(() => radiationSourceLocation.RadiationSourceLocationTHName)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                </div>
            </div>
            <div class="row">
                <label class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 213]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputText @bind-Value="radiationSourceLocation.RadiationSourceLocationENName" placeholder="@AppData.LangResource[AppData.LanguageID,213]" class="form-control" />
                    </div>
                    <ValidationMessage For="@(() => radiationSourceLocation.RadiationSourceLocationENName)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                </div>
            </div>
        </BSModalBody>
        <BSModalFooter>
            <button type="submit" class="btn btn-warning">@AppData.LangResource[AppData.LanguageID, 44]</button>
            <button type="reset" class="btn btn-warning" @onclick="@(() => AddSourceLocation.Hide())">@AppData.LangResource[AppData.LanguageID, 158]</button>
        </BSModalFooter>
    </BSModal>
</EditForm>

<BSModal class="row style-justify mt-5" @ref="Load" IsCentered="true" Size="Size.Small" IgnoreEscape="true" IgnoreClickOnBackdrop="true">
    <BSModalBody>
        <div class="text-center mt-3">
            <span class="spinner-border text-warning spinner-border-sm " role="status" aria-hidden="true"
                  style="font-size: 16pt; width: 36px; height: 36px; color: Gold " />
        </div>
        <div class="text-center pt-3" style=" font-size: 16pt">
             @AppData.LangResource[AppData.LanguageID, 325]
        </div>
    </BSModalBody>
</BSModal>

@code {
    RadiationSource radiationSource = new RadiationSource();
    private List<RadiationSourceLocation> radiationSourceLocations = new List<RadiationSourceLocation>();
    private List<RadiationSourceType> radiationSourceTypes = new List<RadiationSourceType>();
    private List<RadiationSourceStatus> radiationSourceStatus = new List<RadiationSourceStatus>();
    private List<Account> accounts = new List<Account>();

    RadiationSourceAgency radiationSourceAgency = new RadiationSourceAgency();
    Account userid = new Account();
    Guid? userID;//กำหนดค่าให้เป็น null ป้องกันไม่ให้ขึ้น reload
    RadiationSourceLocation radiationSourceLocation = new RadiationSourceLocation();
    RadiationSourceType radiationSourceType = new RadiationSourceType();

    /// <summary>
    /// OnInitializedAsync
    /// </summary>
    [Parameter]
    public string id { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(Loading);
        Load.Show();
        var respond = await RadiationSourceService.GetRadiationSourceById(int.Parse(id));
        radiationSource = respond.First();
        Load.Hide();

        radiationSource.RadiationDoseUnitID= radiationSource.RadiationDoseUnitID.HasValue? radiationSource.RadiationDoseUnitID.Value: 1;
        radiationSource.RadioActivityUnitID = radiationSource.RadioActivityUnitID.HasValue? radiationSource.RadioActivityUnitID.Value : 1;

        //radiationSourceTypes = AppData.radiationSourceTypes;
        //var activeRadiationSourceTypes = radiationSourceTypes.Find(r => r.IsActive == true).IsActive;
        //if (activeRadiationSourceTypes == true)
        //    radiationSourceTypes = await _masterData.GetAllActiveMasterDataAsync<RadiationSourceType>("ActiveRadiationSourceTypes");

        //radiationSourceLocations = AppData.radiationSourceLocations;
        //var activeRadiationSourceLocations = radiationSourceLocations.Find(r => r.IsActive == true).IsActive;
        //if (activeRadiationSourceLocations == true)
        //    radiationSourceLocations = await _masterData.GetAllActiveMasterDataAsync<RadiationSourceLocation>("ActiveRadiationSourceLocations");


        radiationSourceStatus = await http.GetFromJsonAsync<List<RadiationSourceStatus>>($"{Config["nurl"]}/api/GetRadiationSourceStatus");

        accounts = await http.GetFromJsonAsync<List<Account>>($"{Config["aurl"]}/api/GetAccount");

        var Res = await http.GetFromJsonAsync<List<RadiationSourceResposibleUser>>($"{Config["nurl"]}/api/RadiationSourceResposibleUser/{radiationSource.RadiationSourceID}");
        if(Res != null)
            radiationSource.Resposible = Res;

        if(AppData.LanguageID == 0)
        {
            var resultRadiationSourceTypes = AppData.radiationSourceTypes.OrderBy(rt => rt.RadiationSourceTypeName).ToList();
            AppData.radiationSourceTypes = resultRadiationSourceTypes;
            var resultRadiationSourceLocationEN = AppData.radiationSourceLocations.OrderBy(rl => rl.RadiationSourceLocationENName).ToList();
            AppData.radiationSourceLocations = resultRadiationSourceLocationEN;
            var resultAccount = accounts.OrderBy(a => a.FirstName).ToList();
            accounts = resultAccount;
            var resultRadiationSourceAgency = AppData.radiationSourceAgencies.OrderBy(ra => ra.RadiationSourceAgencyName).ToList();
            AppData.radiationSourceAgencies = resultRadiationSourceAgency;
        }
        else
        {
            var resultRadiationSourceLocationTH = AppData.radiationSourceLocations.OrderBy(rl => rl.RadiationSourceLocationTHName).ToList();
            AppData.radiationSourceLocations = resultRadiationSourceLocationTH;
        }
    }

    /// PostRadiationSourceLocation
    /// </summary>
    private async Task PostRadiationSourceLocation()
    {
        var res = await http.PostAsJsonAsync($"{Config["nurl"]}/api/RegisterRadiationSourceLocation", radiationSourceLocation);
        ToastService.ShowSuccess("Successfully CheckInLocation");
        List<RadiationSourceLocation> l = await res.Content.ReadFromJsonAsync<List<RadiationSourceLocation>>();
        AppData.radiationSourceLocations.AddRange(l);
        radiationSourceLocations = AppData.radiationSourceLocations;
        radiationSource.RadiationSourceLocation = l.First().RadiationSourceLocationID;
        AddSourceLocation.Hide();
        await OnInitializedAsync();
    }

    /// <summary>
    /// PostRadiationSourceType
    /// </summary>
    private async Task PostRadiationSourceType()
    {
        var res = await http.PostAsJsonAsync($"{Config["nurl"]}/api/RegisterRadiationSourceType", radiationSourceType);
        ToastService.ShowSuccess("Successfully added RadiationSourceType");
        List<RadiationSourceType> l = await res.Content.ReadFromJsonAsync<List<RadiationSourceType>>();
        AppData.radiationSourceTypes.AddRange(l);
        radiationSourceTypes = AppData.radiationSourceTypes;
        radiationSource.RadiationSourceTypeID = l.First().RadiationSourceTypeID;
        AddSourceType.Hide();
        await OnInitializedAsync();
    }

    /// <summary>
    /// UpdateSourceSearch
    /// </summary>
    private async Task UpdateSourceSearch()
    {
        await Task.Run(Loading);
        Load.Show();
        try
        {
            userID = userid.UserID;
            var upresult = await http.PutAsJsonAsync($"{Config["nurl"]}/api/UpdateRadiationSource/{id}", radiationSource);
            //NavigationManager.NavigateTo("RadiationSources/SourcesSearch");
            await FileDocument();
            await ImageDefaultFile();
            await ImageLeftFile();
            await ImageRightFile();
            ToastService.ShowSuccess("Successfully Update RadiationSource");
            userID = null;
        }
        catch (Exception e)
        {
            ToastService.ShowError("Update Not Fail RadiationSource");
        }
        Load.Hide();
    }


    private IBrowserFile? fileDocument;
    private IBrowserFile? fileImageDefault;
    private IBrowserFile? fileImageLeft;
    private IBrowserFile? fileImageRight;

    private string? ImageShow { get; set; }
    private string? ImageLeftShow { get; set; }
    private string? ImageRightShow { get; set; }

    private string pathDocumentFolder { get; set; } = "Document";
    private string pathPictureDefaultFolder { get; set; } = "PictureDefault";
    private string pathPictureLeftFolder { get; set; } = "PictureLeft";
    private string pathPictureRightFolder { get; set; } = "PictureRight";

    private byte[] UploadPathDefault { get; set; }
    private byte[] UploadPathLeft { get; set; }
    private byte[] UploadPathRight { get; set; }


    /*******************************************UploadFile*************************************************************************/
    /// <summary>
    /// Document File
    /// </summary>
    protected async Task OnInputFileDocumentChange(InputFileChangeEventArgs e)
    {
        fileDocument = e.File;
        //var formatDocumentFile = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        var fileType = fileDocument.ContentType;
        var sizefile = fileDocument.Size;

        if (sizefile > 2154227)
        {
            ToastService.ShowError("The file size cannot exceed 30MB.");
            radiationSource.RadiationSourceFile = "";
        }
        else if (fileType != "application/pdf")
        {
            ToastService.ShowError("File Type Document Incorrect !");
            radiationSource.RadiationSourceFile = "";
        }
        else
        {
            Load.Show();
            await Task.Run(Loading);
            string newFileName = await GenerateUniqueFileName(fileDocument.Name, pathDocumentFolder);
            radiationSource.RadiationSourceFile = newFileName;
            Load.Hide();
        }

    }

    /// <summary>
    /// Document File
    /// </summary>
    private async Task FileDocument()
    {
        if (fileDocument != null)
        {
            try
            {
                var fileType = fileDocument.ContentType;
                var sizefile = fileDocument.Size;
                if (sizefile <= 2154227 && fileType == "application/pdf")
                {
                    string newFileName = await GenerateUniqueFileName(fileDocument.Name, pathDocumentFolder);
                    string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "Edit", pathDocumentFolder, newFileName);

                    Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "Edit", pathDocumentFolder));

                    await using FileStream fs = new(path, FileMode.Create);
                    await fileDocument.OpenReadStream(sizefile).CopyToAsync(fs);
                }
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"File: {fileDocument.Name} Error: {ex.Message}");
            }
        }
    }

    
    /// <summary>
    /// Image Default
    /// </summary>
    private async Task OnInputFileDefaultChange(InputFileChangeEventArgs e)
    {
        fileImageDefault = e.File;
        var imageType = fileImageDefault.ContentType;
        var sizefile = fileImageDefault.Size;

        if (sizefile > 5542880)
        {
            ToastService.ShowError("The file size cannot exceed 5MB.");
            radiationSource.RadiationSourcePictureDefault = "";
        }
        else if (imageType != "image/png" && imageType != "image/jpeg")
        {
            ToastService.ShowError("File Type Image Incorrect !");
            radiationSource.RadiationSourcePictureDefault = "";
        }
        else
        {
            Load.Show();
            await Task.Run(Loading);
            var resizedImage = await fileImageDefault.RequestImageFileAsync(imageType, 550, 550);
            // อ่านข้อมูลรูปภาพและแปลงเป็น Base64
            using (var stream = resizedImage.OpenReadStream(resizedImage.Size))
            {
                var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                var buffer = memoryStream.ToArray();
                ImageShow = Convert.ToBase64String(buffer);
            }
            int maxWidth = 640;
            int maxHeight = 480;
            int quality = 90;

            byte[] compressedImage = _imageService.CompressBase64Image(ImageShow, maxWidth, maxHeight, quality);
            string compressedBase64 = Convert.ToBase64String(compressedImage);
            ImageShow = compressedBase64;
            UploadPathDefault = compressedImage;

            string newFileImageName = await GenerateUniqueFileName(fileImageDefault.Name, pathPictureDefaultFolder);
            radiationSource.RadiationSourcePictureDefault = newFileImageName;

            //using MemoryStream memoryStream = new MemoryStream();
            //await fileImageDefault.OpenReadStream(sizefile).CopyToAsync(memoryStream);
            //var buffer = memoryStream.GetBuffer();
            //var imageLeftDataUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffer)}";
            //ImageShow = imageLeftDataUrl;
            //string newFileImageName = await GenerateUniqueFileName(fileImageDefault.Name, pathPictureDefaultFolder);
            //radiationSource.RadiationSourcePictureDefault = newFileImageName;
            Load.Hide();
        }


    }
    /// <summary>
    /// Image Default
    /// </summary>
    private async Task ImageDefaultFile()
    {

        if (fileImageDefault != null)
        {
            try
            {
                var imageType = fileImageDefault.ContentType;
                var sizefile = fileImageDefault.Size;
                if (sizefile > 5542880)
                {
                    //ToastService.ShowError("The file size cannot exceed 5MB.");
                    radiationSource.RadiationSourcePictureDefault = "";
                }
                else if (imageType != "image/png" && imageType != "image/jpeg")
                {
                    ///ToastService.ShowError("File Type Image Incorrect !");
                    radiationSource.RadiationSourcePictureDefault = "";
                }
                else
                {
                    string newFileImageName = await GenerateUniqueFileName(fileImageDefault.Name, pathPictureDefaultFolder);
                    string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "Edit", "Picture", pathPictureDefaultFolder, newFileImageName);
                    Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "Edit", "Picture", pathPictureDefaultFolder)); // Ensure the directory exists

                    await File.WriteAllBytesAsync(path, UploadPathDefault);

                    //string newFileImageName = await GenerateUniqueFileName(fileImageDefault.Name, pathPictureDefaultFolder);
                    ////string prefixedNewFileName = $"Update_{showinstrument.InstrumentNumber}_" + newFileImageName;
                    //string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "Edit", "Picture", pathPictureDefaultFolder, newFileImageName);

                    //Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "Edit", "Picture", pathPictureDefaultFolder));

                    //await using FileStream fs = new(path, FileMode.Create);
                    //await fileImageDefault.OpenReadStream(sizefile).CopyToAsync(fs);


                }

            }
            catch (Exception ex)
            {
                ToastService.ShowError($"File: {fileImageDefault.Name} Error: {ex.Message}");
            }
        }

    }
   

    /// <summary>
    /// Image Left
    /// </summary>
    private IList<string> imageLeftDataUrls = new List<string>();
    private async Task OnInputFileLeftChange(InputFileChangeEventArgs e)
    {
        fileImageLeft = e.File;
        var imageType = fileImageLeft.ContentType;
        var sizefile = fileImageLeft.Size;

        if (sizefile > 5542880)
        {
            ToastService.ShowError("The file size cannot exceed 5MB.");
            radiationSource.RadiationSourcePictureLeft = "";
        }
        else if (imageType != "image/png" && imageType != "image/jpeg")
        {
            ToastService.ShowError("File Type Image Incorrect !");
            radiationSource.RadiationSourcePictureLeft = "";
        }
        else
        {
            Load.Show();
            await Task.Run(Loading);
             var resizedImage = await fileImageLeft.RequestImageFileAsync(imageType, 550, 550);
            // อ่านข้อมูลรูปภาพและแปลงเป็น Base64
            using (var stream = resizedImage.OpenReadStream(resizedImage.Size))
            {
                var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                var buffer = memoryStream.ToArray();
                ImageLeftShow = Convert.ToBase64String(buffer);
            }
            int maxWidth = 640;
            int maxHeight = 480;
            int quality = 90;

            byte[] compressedImage = _imageService.CompressBase64Image(ImageLeftShow, maxWidth, maxHeight, quality);
            string compressedBase64 = Convert.ToBase64String(compressedImage);
            ImageLeftShow = compressedBase64;
            UploadPathLeft = compressedImage;

            string newFileImageName = await GenerateUniqueFileName(fileImageLeft.Name, pathPictureLeftFolder);
            radiationSource.RadiationSourcePictureLeft = newFileImageName;

            //using MemoryStream memoryStream = new MemoryStream();
            //await fileImageLeft.OpenReadStream(sizefile).CopyToAsync(memoryStream);
            //var buffer = memoryStream.GetBuffer();
            //var imageLeftDataUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffer)}";
            //ImageLeftShow = imageLeftDataUrl;
            //string newFileImageName = await GenerateUniqueFileName(fileImageLeft.Name, pathPictureLeftFolder);
            //radiationSource.RadiationSourcePictureLeft = newFileImageName;
            Load.Hide();
        }
    }

    /// <summary>
    /// Image Left
    /// </summary>
    private async Task ImageLeftFile()
    {

        if (fileImageLeft != null)
        {
            try
            {
                var imageType = fileImageLeft.ContentType;
                var sizefile = fileImageLeft.Size;
                if (sizefile > 5542880)
                {
                    //ToastService.ShowError("The file size cannot exceed 5MB.");
                    radiationSource.RadiationSourcePictureLeft = "";
                }
                else if (imageType != "image/png" && imageType != "image/jpeg")
                {
                    ///ToastService.ShowError("File Type Image Incorrect !");
                    radiationSource.RadiationSourcePictureLeft = "";
                }
                else
                {
                    string newFileImageName = await GenerateUniqueFileName(fileImageLeft.Name, pathPictureLeftFolder);
                    string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "Edit", "Picture", pathPictureLeftFolder, newFileImageName);
                    Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "Edit", "Picture", pathPictureLeftFolder)); // Ensure the directory exists

                    await File.WriteAllBytesAsync(path, UploadPathLeft);

                    //string newFileImageName = await GenerateUniqueFileName(fileImageLeft.Name, pathPictureLeftFolder);
                    ////string prefixedNewFileName = $"Update_{showinstrument.InstrumentNumber}_" + newFileImageName;
                    //string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "Edit", "Picture", pathPictureLeftFolder, newFileImageName);

                    //Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "Edit", "Picture", pathPictureLeftFolder));

                    //await using FileStream fs = new(path, FileMode.Create);
                    //await fileImageLeft.OpenReadStream(sizefile).CopyToAsync(fs);


                }

            }
            catch (Exception ex)
            {
                ToastService.ShowError($"File: {fileImageLeft.Name} Error: {ex.Message}");
            }
        }

    }

    /// <summary>
    /// Image Right
    /// </summary>
    private IList<string> imageRightDataUrls = new List<string>();
    private async Task OnInputFileRightChange(InputFileChangeEventArgs e)
    {
        fileImageRight = e.File;
        var imageType = fileImageRight.ContentType;
        var sizefile = fileImageRight.Size;

        if (sizefile > 5542880)
        {
            ToastService.ShowError("The file size cannot exceed 5MB.");
            radiationSource.RadiationSourcePictureRight = "";
        }
        else if (imageType != "image/png" && imageType != "image/jpeg")
        {
            ToastService.ShowError("File Type Image Incorrect !");
            radiationSource.RadiationSourcePictureRight = "";
        }
        else
        {
            Load.Show();
            await Task.Run(Loading);
            var resizedImage = await fileImageRight.RequestImageFileAsync(imageType, 550, 550);
            // อ่านข้อมูลรูปภาพและแปลงเป็น Base64
            using (var stream = resizedImage.OpenReadStream(resizedImage.Size))
            {
                var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                var buffer = memoryStream.ToArray();
                ImageRightShow = Convert.ToBase64String(buffer);
            }
            int maxWidth = 640;
            int maxHeight = 480;
            int quality = 90;

            byte[] compressedImage = _imageService.CompressBase64Image(ImageRightShow, maxWidth, maxHeight, quality);
            string compressedBase64 = Convert.ToBase64String(compressedImage);
            ImageRightShow = compressedBase64;
            UploadPathRight = compressedImage;

            string newFileImageName = await GenerateUniqueFileName(fileImageRight.Name, pathPictureRightFolder);
            radiationSource.RadiationSourcePictureRight = newFileImageName;

            //using MemoryStream memoryStream = new MemoryStream();
            //await fileImageRight.OpenReadStream(sizefile).CopyToAsync(memoryStream);
            //var buffer = memoryStream.GetBuffer();
            //var imageRightDataUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffer)}";
            //ImageRightShow = imageRightDataUrl;
            //string newFileImageName = await GenerateUniqueFileName(fileImageRight.Name, pathPictureRightFolder);
            //radiationSource.RadiationSourcePictureRight = newFileImageName;
            Load.Hide();
        }
    }


    /// <summary>
    /// Image Right
    /// </summary>
    private async Task ImageRightFile()
    {

        if (fileImageRight != null)
        {
            try
            {
                var imageType = fileImageRight.ContentType;
                var sizefile = fileImageRight.Size;
                if (sizefile > 5542880)
                {
                    //ToastService.ShowError("The file size cannot exceed 5MB.");
                    radiationSource.RadiationSourcePictureRight = "";
                }
                else if (imageType != "image/png" && imageType != "image/jpeg")
                {
                    ///ToastService.ShowError("File Type Image Incorrect !");
                    radiationSource.RadiationSourcePictureRight = "";
                }
                else
                {
                    string newFileImageName = await GenerateUniqueFileName(fileImageRight.Name, pathPictureRightFolder);
                    string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "Edit", "Picture", pathPictureRightFolder, newFileImageName);
                    Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "Edit", "Picture", pathPictureRightFolder)); // Ensure the directory exists

                    await File.WriteAllBytesAsync(path, UploadPathRight);

                    //string newFileImageName = await GenerateUniqueFileName(fileImageRight.Name, pathPictureRightFolder);
                    ////string prefixedNewFileName = $"Update_{showinstrument.InstrumentNumber}_" + newFileImageName;
                    //string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "Edit", "Picture", pathPictureRightFolder, newFileImageName);

                    //Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "Edit", "Picture", pathPictureRightFolder));

                    //await using FileStream fs = new(path, FileMode.Create);
                    //await fileImageRight.OpenReadStream(sizefile).CopyToAsync(fs);


                }

            }
            catch (Exception ex)
            {
                ToastService.ShowError($"File: {fileImageRight.Name} Error: {ex.Message}");
            }
        }

    }
    
    /// <summary>
    /// GenerateUniqueFileDocument
    /// </summary>
    private async Task<string> GenerateUniqueFileName(string originalFileName, string folderName)
    {
        string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(originalFileName);
        string fileExtension = Path.GetExtension(originalFileName);
        string newFileName = fileNameWithoutExtension + fileExtension;
        if (folderName == "Document")
        {
            int counter = 1;
            string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "Edit", folderName, newFileName);

            while (File.Exists(path))
            {
                newFileName = $"{fileNameWithoutExtension}({counter}){fileExtension}";
                path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "Edit", folderName, newFileName);
                counter++;
            }
        }
        else
        {
            int counter = 1;
            string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "Edit", "Picture", folderName, newFileName);

            while (File.Exists(path))
            {
                newFileName = $"{fileNameWithoutExtension}({counter}){fileExtension}";
                path = Path.Combine(Config.GetValue<string>("FileStorage")!, "RadiationSource", "Edit", "Picture", folderName, newFileName);
                counter++;
            }
        }


        return newFileName;
    }


    private void PleaseSelect()
    {
        ToastService.ShowError("Please select a Resposible User");
    }

    private async Task AddResposibleUser()
    {

        if (IsUserAlreadyResposible(userID))
        {
            ToastService.ShowError("Team Add Duplicatie");
        }
        else
        {
            await PostResposible(new RadiationSourceResposibleUser
                {
                    radiationSourceID = radiationSource.RadiationSourceID,
                    UserID = userID,
                    resposibleUserName = accounts.Find(i => i.UserID == userID).FirstName
                });
            userID = null;
        }
    }


    private bool IsUserAlreadyResposible(Guid? userID)
    {
        return radiationSource.Resposible.Any(r => r.UserID == userID);
    }

    /// <summary>
    /// PostResposible
    /// </summary>
    private async Task PostResposible(RadiationSourceResposibleUser item )
    {
        try
        {
            var r = await http.PostAsJsonAsync($"{Config["nurl"]}/api/RadiationSourceResposibleUser", item);
            RadiationSourceResposibleUser l = await r.Content.ReadFromJsonAsync<RadiationSourceResposibleUser>();
            radiationSource.Resposible.Add(l);
            ToastService.ShowSuccess(" Add Resposible Successfully");
        } 
        catch (Exception e) 
        { 
            ToastService.ShowError(" "+e); 
        }
    }

    private async Task DeleteResposible(RadiationSourceResposibleUser item)
    {
        try
        {
            var r = await http.DeleteAsync($"{Config["nurl"]}/api/RadiationSourceResposibleUser/{item.radiationSourceResposibleUserID}");
            /*  List<InstrumentResposibleUser> l = await r.Content.ReadFromJsonAsync<List<InstrumentResposibleUser>>();*/
            radiationSource.Resposible.Remove(item);
            ToastService.ShowSuccess(" Remove Resposible Successfully");
        } 
        catch (Exception e) 
        { 
            ToastService.ShowError(" "+e); 
        }
    }

    

    /// <summary>
    /// clearURL
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("clearURL");
            await jsRuntime.InvokeAsync<object>("showFileName");
        }
    }

    /// <summary>
    /// Modal
    /// </summary>
    BSModal AddSourceType { get; set; }
    BSModal AddSourceLocation { get; set; }
    BSModal Load { get; set; }

    /// <summary>
    /// BarcodeQRGeneratre
    /// </summary>
    string barcode = "";
    public async void BarcodeQRGeneratre()
    {
        Load.Show();
        await Task.Run(Loading);
        Barcode sticker = new Barcode();
        var pdf = await sticker.GenerateBarcodeAsync(radiationSource.RadiationSourceNumber, radiationSource.RadiationSourceNuclide, 
            AppData.radiationSourceLocations.Find(r => r.RadiationSourceLocationID == radiationSource.RadiationSourceLocation) != null ? AppData.radiationSourceLocations.Find(r => r.RadiationSourceLocationID == radiationSource.RadiationSourceLocation).RadiationSourceLocationENName:"-", BarcodeType.QRCode);
        barcode = Convert.ToBase64String(pdf);
        await PrintingService.Print(new PrintOptions(barcode) { Base64 = true });
        Load.Hide();

    }

    private async Task DownloadFile()
    {
        try
        {
            if(radiationSource.RadiationSourceFileName != null)
            {
                string[] base64String = radiationSource.RadiationSourceFile.Split(',');
                await jsRuntime.InvokeVoidAsync("downloadFile","application/pdf", base64String[1], radiationSource.RadiationSourceFileName);
            }
            else
            {
               string[] base64String = radiationSource.RadiationSourceFile.Split(',');
               await jsRuntime.InvokeVoidAsync("downloadFile","application/pdf", base64String[1], Guid.NewGuid());
            }

        }
        catch (Exception e)
        {
            ToastService.ShowError($"Error:{e.Message}");
        }
    }

    private void Loading()
    {
        System.Threading.Thread.Sleep(300);
        // Retrieve data from the server and initialize
        // Employees property which the View will bind
    }
}

