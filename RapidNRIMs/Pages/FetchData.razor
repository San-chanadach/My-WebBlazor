@page "/fetchdata"
@inject HttpClient httpClient
@inject IConfiguration Config
@inject IJSRuntime jsRuntime
@inject AppData appData

<div class="container">
   
    <label for="input">Input @Id</label>
    
    <div class="col-12 col-md-8 col-lg-3">


        <input type="text" id="input" class="form-control" @bind="inputValue" @oninput="ChangeAutoComplete" />
            
            @if (!string.IsNullOrEmpty(inputValue))
            {
                <span class="input-icon-search" style="display:none;">
                <i class="fa fa-search instrumentmumber-search" id="icon-suggestion"></i>
                </span>
               
            }
            else
            {
                <span class="input-icon-search" @onclick="OnclickAll">
                <i class="fa fa-search instrumentmumber-search" id="icon-suggestion"></i>
                </span>
            }

        
    </div>
    

    <ul id="suggestions">
        
        @foreach (var suggestion in suggestions)
        {
            <li @onclick="() => SelectItem(suggestion)">@suggestion</li>
        }
    </ul>

    
</div>

@code {
    private string inputValue = "";
    private List<string> suggestions = new List<string>();
    private string ulDisplayStyle = "none";
    private int? Id { get; set; }
    private async Task ChangeAutoComplete(ChangeEventArgs args)
    {
        inputValue = args.Value.ToString();
        suggestions.Clear();
        if (!string.IsNullOrEmpty(inputValue))
        {
            await Task.Delay(200);
            var autoCompleteValues = await AutoComplete(inputValue);
            suggestions.AddRange(autoCompleteValues);
        }
        else
        {
            Id = 0;
        }





    }

    private async Task OnclickAll()
    {
        if (string.IsNullOrEmpty(inputValue))
        {
            
            var autoCompleteAll = await AutoCompleteAll();
            suggestions.AddRange(autoCompleteAll);

        }



    }

    private async Task<List<string>> AutoComplete(string inputValue)
    {

        var response = await httpClient.GetFromJsonAsync<List<string>>($"{Config["nurl"]}/api/SearchInstrument?query={inputValue}");
        return response;
    }
    private async Task<List<string>> AutoCompleteAll()
    {

        var responseAll = await httpClient.GetFromJsonAsync<List<string>>($"{Config["nurl"]}/api/SearchInstrument");
        return responseAll;
    }



    private void SelectItem(string selectedItem)
    {
        inputValue = selectedItem;
        var result = appData.instrumentsList.Find(x => x.InstrumentENName == inputValue);
        if (result != null)
        {
            Id = result.InstrumentID;
        }
        suggestions.Clear();
        //ulDisplayStyle = "none";
    }

    // เพิ่มเมธอดเพื่อจัดการเหตุการณ์คลิกที่พื้นที่อื่น ๆ
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("addClickHandler"); // เรียกใช้งานเมธอด JavaScript เมื่อเว็บโหลดครั้งแรก
        }
    }

    
}
