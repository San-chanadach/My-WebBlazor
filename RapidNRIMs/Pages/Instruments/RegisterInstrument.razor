@page "/Instruments/RegisterInstrument"
@inject AppData AppData
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager
@inject IInstrumentService InstrumentService
@inject IInstrumentBrandService InstrumentBrandService
@inject IInstrumentTypeService InstrumentTypeService
@inject IInstrumentAgencyService InstrumentAgencyService
@inject IInstrumentModelService InstrumentModelService
@inject IInstrumentLocationService InstrumentLocationService
@inject IToastService ToastService
@inject HttpClient Http
@inject IPrintingService PrintingService;
@inject IConfiguration Config
@inject IMasterDataInstrument _masterDataInstrument
@inject IMasterData _masterData
@inject ImageService _imageService
@using System.Threading;
@using System.Net

<PageTitle>Register Instrument Page</PageTitle>

<EditForm Model="@addInstrument" OnValidSubmit="@PostInstrument">
    <!--DataAnnotationsValidator /-->
    <div class="row margin-row-card">
        <div class="col-md-12">
            <div class="card">
                @if (addInstrument.InstrumentID != 0)
                {
                    <div class="card-header">@AppData.LangResource[AppData.LanguageID, 61]: @addInstrument.InstrumentNumber </div>
                }
                else
                {
                    <div class="card-header">@AppData.LangResource[AppData.LanguageID, 60]</div>
                }

                <div class="card-body">
                    <div class="row">
                        <label for="assetnumber" class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 62] <strong class="color-necessary">*</strong></span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <InputText @bind-Value="addInstrument.InstrumentAssetNumber" placeholder="@AppData.LangResource[AppData.LanguageID,62]" class="form-control clearFileName" />
                                <!--span class="input-icon-search"><i class="fa fa-search assetnumber-search"></i></span-->
                            </div>
                            <ValidationMessage For="@(() => addInstrument.InstrumentAssetNumber)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                        </div>
                        <label for="serianumber" class="col-12 col-md-4 col-lg-1 col-form-label-ins margin-label-ins">
                            <span class="txt-span-ins">@AppData.LangResource[AppData.LanguageID, 63] <strong class="color-necessary">*</strong></span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3 margin-txtbox-ins">
                            <div class="input-group input-box-bottom input-box-ins">
                                <InputText id="serianumber" @bind-Value="addInstrument.InstrumentSerialNumber" placeholder="@AppData.LangResource[AppData.LanguageID,63]" class="form-control" />
                                <!---span class="input-icon-search"><i class="fa fa-search serialnumber-search"></i></span-->
                            </div>
                            <ValidationMessage For="@(() => addInstrument.InstrumentSerialNumber)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                        </div>
                    </div>
                    <div class="row">
                        <label for="namethai" class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 64] <strong class="color-necessary">*</strong></span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <InputText @bind-Value="addInstrument.InstrumentTHName" placeholder="@AppData.LangResource[AppData.LanguageID,64]" class="form-control" />
                            </div>
                            <ValidationMessage For="@(() => addInstrument.InstrumentTHName)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                        </div>
                        <label for="nameenglish" class="col-12 col-md-4 col-lg-1 col-form-label-ins margin-label-ins">
                            <span class="txt-span-ins">@AppData.LangResource[AppData.LanguageID, 65] <strong class="color-necessary">*</strong></span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3 margin-txtbox-ins">
                            <div class="input-group input-box-bottom input-box-ins">
                                <InputText @bind-Value="addInstrument.InstrumentENName" placeholder="@AppData.LangResource[AppData.LanguageID,65]" class="form-control" />
                            </div>
                            <ValidationMessage For="@(() => addInstrument.InstrumentENName)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                        </div>
                    </div>
                    <div class="row">
                        <label for="type" class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 66] <strong class="color-necessary">*</strong></span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <InputSelect class="form-control" @bind-Value="addInstrument.InstrumentTypeID">
                                    <option value="0">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                    @foreach (var item in instrumentTypes)
                                    {
                                        if (item.IsActive == true && item.IsActive != null)
                                        {
                                            <option value="@item.InstrumentTypeID">@item.InstrumentTypeName</option>
                                        }
                                    }
                                </InputSelect>
                                <span class="span-btn-type">
                                    @if (AppData.CurrentPermission.Find(i => i.permissionID == 3).permissionE)
                                    {
                                        <!--button type="button" @onclick="@(() => AddType.Show())" class="btn btn-warning margin-btn">
                                            <i class="fas fa-plus"></i>
                                        </button-->
                                    }
                                </span>
                            </div>
                            <ValidationMessage For="@(() => addInstrument.InstrumentTypeID)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                        </div>
                        <label class="col-12 col-md-4 col-lg-1 col-form-label-ins margin-label-ins">
                            <span class="txt-span-ins">@AppData.LangResource[AppData.LanguageID, 69] <strong class="color-necessary">*</strong></span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3 margin-txtbox-ins">
                            <div class="input-group input-box-bottom input-box-ins">
                                <InputSelect class="form-control" @bind-Value="addInstrument.InstrumentCatagoryID">
                                    <option value="0">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                    @foreach (var item in instrumentCatagorys)
                                    {
                                        if (item.IsActive == true && item.IsActive != null)
                                        {
                                            <option value="@item.InstrumentCatagoryID">@item.InstrumentCatagoryName</option>
                                        }
                                    }
                                </InputSelect>
                                <span class="span-btn-catagory">
                                    @if (AppData.CurrentPermission.Find(i => i.permissionID == 3).permissionE)
                                    {
                                        <!--button type="button" @onclick="@(() => AddCatagory.Show())" class="btn btn-warning margin-btn">
                                            <i class="fas fa-plus"></i>
                                        </button-->
                                    }
                                </span>
                            </div>
                            <ValidationMessage For="@(() => addInstrument.InstrumentCatagoryID)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                        </div>
                    </div>

                    <div class="row">
                        <label for="brand" class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 71] <strong class="color-necessary">*</strong></span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <InputSelect class="form-control" @bind-Value="addInstrument.InstrumentBrandID">
                                    <option value="0">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                    @foreach (var item in instrumentBrands)
                                    {
                                        if (item.IsActive == true && item.IsActive != null)
                                        {
                                            <option value="@item.InstrumentBrandID">@item.InstrumentBrandName</option>
                                        }
                                    }

                                </InputSelect>
                                <span class="span-btn-brand">
                                    @if (AppData.CurrentPermission.Find(i => i.permissionID == 3).permissionE)
                                    {
                                        <button type="button" @onclick="@(() => AddBrand.Show())" class="btn btn-warning margin-btn">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                    }

                                </span>
                            </div>
                            <ValidationMessage For="@(() => addInstrument.InstrumentBrandID)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                        </div>

                        <label for="model" class="col-12 col-md-4 col-lg-1 col-form-label-ins margin-label-ins">
                            <span class="txt-span-ins">@AppData.LangResource[AppData.LanguageID, 70] <strong class="color-necessary">*</strong></span>
                        </label>

                        <div class="col-12 col-md-8 col-lg-3 margin-txtbox-ins">
                            <div class="input-group input-box-bottom input-box-ins">
                                <InputSelect class="form-control" @bind-Value="addInstrument.InstrumentModelID">
                                    <option value="0">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                    @foreach (var item in instrumentModels)
                                    {
                                        if (item.IsActive == true && item.IsActive != null)
                                        {

                                            if (item.InstrumentBrandID == addInstrument.InstrumentBrandID)
                                            {
                                                <option value="@item.InstrumentModelID">@item.InstrumentModelName</option>
                                            }
                                        }
                                    }

                                </InputSelect>
                                <span class="span-btn-model">
                                    @if (AppData.CurrentPermission.Find(i => i.permissionID == 3).permissionE)
                                    {
                                        <button type="button" @onclick="@(() => AddModel.Show())" class="btn btn-warning margin-btn">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                    }
                                </span>
                            </div>
                            <ValidationMessage For="@(() => addInstrument.InstrumentModelID)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                        </div>
                    </div>
                    <div class="row">
                        <label for="price" class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 72]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <input type="number" min="0" id="price" step=".01" @bind-value="addInstrument.InstrumentPrice" placeholder="@AppData.LangResource[AppData.LanguageID,72]" class="form-control" />
                            </div>

                        </div>
                        <label for="location" class="col-12 col-md-4 col-lg-1 col-form-label-ins margin-label-ins">
                            <span class="txt-span-ins">@AppData.LangResource[AppData.LanguageID, 30] <strong class="color-necessary">*</strong></span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3 margin-txtbox-ins">
                            <div class="input-group input-box-bottom input-box-ins">
                                <InputSelect id="location" @bind-Value="addInstrument.InstrumentLocationID" class="form-control">
                                    <option value="0">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                    @foreach (var item in instrumentLocations)
                                    {
                                        if (item.IsActive == true && item.IsActive != null)
                                        {
                                            if (AppData.LanguageID == 0)
                                            {
                                                <option value="@item.InstrumentLocationID">@item.InstrumentLocationNameENG</option>
                                            }
                                            else
                                            {
                                                <option value="@item.InstrumentLocationID">@item.InstrumentLocationName</option>
                                            }

                                        }
                                    }
                                </InputSelect>
                                <span class="span-btn-location">
                                    @if (AppData.CurrentPermission.Find(i => i.permissionID == 3).permissionE)
                                    {
                                        <!--button type="button" @onclick="@(() => AddLocation.Show())" class="btn btn-warning margin-btn">
                                            <i class="fas fa-plus"></i>
                                        </button-->
                                    }
                                </span>
                            </div>
                            <ValidationMessage For="@(() => addInstrument.InstrumentLocationID)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                        </div>
                    </div>
                    <div class="row">
                        <label for="date" class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 74]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <input type="text" @bind-value="Year" id="documentfile" class="form-control" placeholder="@AppData.LangResource[AppData.LanguageID, 74]" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 295]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">

                                <InputFile OnChange="@OnInputFileDocumentChange" class="custom-file-input file-name-custom clearFileName" id="documentfile" />
                                @if (AppData.LanguageID == 0)
                                {
                                    <label class="custom-file-label" id="documentfile" for="documentfile" data-browse="@AppData.LangResource[AppData.LanguageID, 313]">@AppData.LangResource[AppData.LanguageID, 313]</label>
                                }
                                else
                                {
                                    <label class="custom-file-label" id="documentfile" for="documentfile" data-browse="@AppData.LangResource[AppData.LanguageID, 313]">@AppData.LangResource[AppData.LanguageID, 313]</label>
                                }

                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 296]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <InputFile OnChange="@OnInputFileDefaultChange" class="custom-file-input file-name-custom" id="pictureDefault" />
                                @if (AppData.LanguageID == 0)
                                {
                                    <label class="custom-file-label" for="pictureDefault" data-browse="@AppData.LangResource[AppData.LanguageID, 313]">@AppData.LangResource[AppData.LanguageID, 313]</label>
                                }
                                else
                                {
                                    <label class="custom-file-label" for="pictureDefault" data-browse="@AppData.LangResource[AppData.LanguageID, 313]">@AppData.LangResource[AppData.LanguageID, 313]</label>
                                }
                            </div>
                        </div>
                        <label for="user" class="col-12 col-md-4 col-lg-1 col-form-label-ins margin-label-ins">
                            <span class="txt-span-ins">@AppData.LangResource[AppData.LanguageID, 73]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3 margin-txtbox-ins">
                            <div class="input-group input-box-bottom input-box-ins">
                                <InputSelect class="form-control" @bind-Value="userID">
                                    <option value="">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                    @foreach (var item in accounts)
                                    {
                                        if (item.IsActive)
                                        {
                                            <option value="@item.UserID">@item.FirstName</option>
                                        }
                                    }
                                </InputSelect>
                                <span class="span-btn-addresposible">
                                    @if (userID != null)
                                    {
                                        <button type="button" @onclick="@(() =>
                                        {
                                            var existingUser = addInstrument.Resposible.Any(r => r.UserID == userID);
                                            if (!existingUser)
                                            {
                                                addInstrument.Resposible.Add(new InstrumentResposibleUser
                                                {
                                                    UserID = userID,
                                                    resposibleUserName = accounts.Find(i => i.UserID == userID).FirstName
                                                });
                                                // เคลียร์ค่าของ resposibleUserName
                                                userID = null;
                                            }
                                            else
                                            {
                                                 ToastService.ShowError("Team Add Duplicatie");
                                            }
                                        })"
                                                class="btn btn-warning">
                                            @AppData.LangResource[AppData.LanguageID, 419]
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-warning" @onclick="PleaseSelect">
                                            @AppData.LangResource[AppData.LanguageID, 419]
                                        </button>
                                    }


                                </span>
                            </div>

                        </div>

                    </div>
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span></span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                @if (addInstrument.InstrumentPictureDefault != "")
                                {
                                    <div class="card" style="width:30rem;">
                                        <div class="card-body">
                                            @if (!string.IsNullOrEmpty(ImageShow))
                                            {
                                                <a href="@("data:image/png;base64,"+ImageShow+"")" data-lightbox="gallery" data-title="@AppData.LangResource[AppData.LanguageID, 296]">
                                                    <img class="img-show float-left m-2" src="@("data:image/png;base64,"+ImageShow+"")" />
                                                </a>

                                            }
                                            else
                                            {
                                                <a href="@($"{Config["nurl"]}{Config["nurlFileInstrument"]}{addInstrument.InstrumentPictureDefault}")" data-lightbox="gallery" data-title="@AppData.LangResource[AppData.LanguageID, 296]">
                                                    <img class="img-show float-left m-2" src="@($"{Config["nurl"]}{Config["nurlFileInstrument"]}{addInstrument.InstrumentPictureDefault}")" />
                                                </a>

                                            }
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <img class="img-show float-left" src="assets/images/no-img/ImageNotFount.png">
                                }
                            </div>
                        </div>
                        <label class="col-12 col-md-4 col-lg-1 col-form-label-ins margin-label-ins">
                            <span></span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="table-responsive fixTableHead scroll-inner scrollBar-x  margin-bottom">
                                <table class="table table-striped text-center">
                                    <thead class="fixedthead">
                                        <tr>
                                            <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 420]</th>
                                            <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 421]</th>

                                        </tr>
                                    </thead>
                                    <tbody class="scrollContent">
                                        @foreach (var item in addInstrument.Resposible)
                                        {
                                            <tr>
                                                <td> @item.resposibleUserName</td>
                                                <td class="badge badge-pill badge-danger" @onclick="@(()=> addInstrument.Resposible.Remove(@item))"><i class="fas fa-trash-alt fa-lg"></i></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                        </div>
                    </div>
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 298]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <InputFile OnChange="@OnInputFileLeftChange" class="custom-file-input file-name-custom" id="pictureLeft" />
                                @if (AppData.LanguageID == 0)
                                {
                                    <label class="custom-file-label" for="pictureLeft" data-browse="@AppData.LangResource[AppData.LanguageID, 313]">@AppData.LangResource[AppData.LanguageID, 313]</label>
                                }
                                else
                                {
                                    <label class="custom-file-label" for="pictureLeft" data-browse="@AppData.LangResource[AppData.LanguageID, 313]">@AppData.LangResource[AppData.LanguageID, 313]</label>
                                }
                            </div>
                        </div>
                        <label class="col-12 col-md-4 col-lg-1 col-form-label-ins margin-label-ins">
                            <span class="txt-span-ins">@AppData.LangResource[AppData.LanguageID, 299]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3 margin-txtbox-ins">
                            <div class="input-group input-box-bottom input-box-ins">
                                <InputFile OnChange="@OnInputFileRightChange" class="custom-file-input file-name-custom" id="pictureRight" />
                                @if (AppData.LanguageID == 0)
                                {
                                    <label class="custom-file-label" for="pictureRight" data-browse="@AppData.LangResource[AppData.LanguageID, 313]">@AppData.LangResource[AppData.LanguageID, 313]</label>
                                }
                                else
                                {
                                    <label class="custom-file-label" for="pictureRight" data-browse="@AppData.LangResource[AppData.LanguageID, 313]">@AppData.LangResource[AppData.LanguageID, 313]</label>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span></span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                @if (addInstrument.InstrumentPictureLeft != "")
                                {
                                    <div class="card" style="width:30rem;">
                                        <div class="card-body">
                                            @if (!string.IsNullOrEmpty(ImageLeftShow))
                                            {
                                                <a href="@("data:image/png;base64,"+ImageLeftShow+"")" data-lightbox="gallery" data-title="@AppData.LangResource[AppData.LanguageID, 298]">
                                                    <img class="img-show float-left m-2" src="@("data:image/png;base64,"+ImageLeftShow+"")" />
                                                </a>

                                            }
                                            else
                                            {
                                                <a href="@($"{Config["nurl"]}{Config["nurlFileInstrument"]}{addInstrument.InstrumentPictureLeft}")" data-lightbox="gallery" data-title="@AppData.LangResource[AppData.LanguageID, 298]">
                                                    <img class="img-show float-left m-2" src="@($"{Config["nurl"]}{Config["nurlFileInstrument"]}{addInstrument.InstrumentPictureLeft}")" />
                                                </a>

                                            }
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <img class="img-show float-left" src="assets/images/no-img/ImageNotFount.png" />
                                }

                            </div>
                        </div>
                        <label class="col-12 col-md-4 col-lg-1 col-form-label-ins margin-label-ins">
                            <span></span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                @if (addInstrument.InstrumentPictureRight != "")
                                {
                                    <div class="card" style="width:30rem;">
                                        <div class="card-body">
                                            @if (!string.IsNullOrEmpty(ImageRightShow))
                                            {
                                                <a href="@("data:image/png;base64,"+ImageRightShow+"")" data-lightbox="gallery" data-title="@AppData.LangResource[AppData.LanguageID, 299]">
                                                    <img class="img-show float-left m-2" src="@("data:image/png;base64,"+ImageRightShow+"")" />
                                                </a>

                                            }
                                            else
                                            {
                                                <a href="@($"{Config["nurl"]}{Config["nurlFileInstrument"]}{addInstrument.InstrumentPictureRight}")" data-lightbox="gallery" data-title="@AppData.LangResource[AppData.LanguageID, 299]">
                                                    <img class="img-show float-left m-2" src="@($"{Config["nurl"]}{Config["nurlFileInstrument"]}{addInstrument.InstrumentPictureRight}")" />
                                                </a>

                                            }
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <img class="img-show float-left" src="assets/images/no-img/ImageNotFount.png">
                                }
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 37]</span>
                        </label>
                        <div class="col-12 col-md-12 col-lg-8 input-box-bottom">
                            <InputTextArea @bind-Value="addInstrument.InstrumentDescription" rows="2" placeholder="@AppData.LangResource[AppData.LanguageID,37]" class="form-control"></InputTextArea>
                        </div>
                    </div>
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span> @AppData.LangResource[AppData.LanguageID, 321] :</span>
                        </label>

                        <div class="col-12 col-md-12 col-lg-8">
                            <div class="row">
                                @foreach (var item in addInstrument.InstrumentCheckType)
                                {
                                    <div class="col">
                                        <InputCheckbox @bind-Value="item.IsCheck" class="form-check-input" type="checkbox" name="inlineRadioOptions" id="inlineRadioOptions" />
                                        <a> @checklistTypes.Find(i => i.InstrumentCheckListTypeID == item.InstrumentCheckListTypeID).InstrumentCheckListTypeName</a>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row margin-row-card">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">@AppData.LangResource[AppData.LanguageID, 76]</div>
                <div class="card-body">
                    <div class="row">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 77]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                <InputSelect class="form-control" @bind-Value="addInstrument.InstrumentAgencyID">
                                    <option value="0">@AppData.LangResource[AppData.LanguageID, 2]</option>
                                    @foreach (var item in instrumentAgencys)
                                    {
                                        if (item.IsActive == true && item.IsActive != null)
                                        {
                                            <option value="@item.InstrumentAgencyID">@item.InstrumentAgencyName</option>
                                        }
                                    }
                                </InputSelect>
                                <span class="span-btn-agency">
                                    @if (AppData.CurrentPermission.Find(i => i.permissionID == 3).permissionE)
                                    {
                                        <button type="button" @onclick="@(() => AddAgency.Show())" class="btn btn-warning margin-btn">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                    }
                                </span>
                            </div>
                            <ValidationMessage For="@(() => instrumentAgency.InstrumentAgencyName)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                        </div>
                    </div>
                    <div class="row">
                        <label for="address" class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 39]</span>
                        </label>
                        <div class="col-12 col-md-12 col-lg-8 input-box-bottom">
                            @if (addInstrument.InstrumentAgencyID > 0)
                            {
                                <InputTextArea disabled @bind-Value="instrumentAgencys.Find(i => i.InstrumentAgencyID == addInstrument.InstrumentAgencyID).InstrumentAgencyAddress" rows="2" placeholder="@AppData.LangResource[AppData.LanguageID,39]" class="form-control" />
                            }
                            else
                            {
                                <InputTextArea disabled @bind-Value="instrumentAgency.InstrumentAgencyAddress" rows="2" placeholder="@AppData.LangResource[AppData.LanguageID,39]" class="form-control" />
                            }

                        </div>
                        <ValidationMessage For="@(() => instrumentAgency.InstrumentAgencyAddress)" style="margin-left: 15rem; margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                    </div>
                    <div class="row">
                        <label for="tel" class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 78]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                @if (addInstrument.InstrumentAgencyID > 0)
                                {
                                    <InputText disabled maxlength="10" @bind-Value="instrumentAgencys.Find(b => b.InstrumentAgencyID == addInstrument.InstrumentAgencyID).InstrumentAgencyTel" id="tel" placeholder="@AppData.LangResource[AppData.LanguageID,78]" class="form-control" />
                                }
                                else
                                {
                                    <InputText disabled maxlength="10" @bind-Value="instrumentAgency.InstrumentAgencyTel" id="tel" placeholder="@AppData.LangResource[AppData.LanguageID,78]" class="form-control" />
                                }

                            </div>
                            <ValidationMessage For="@(() => instrumentAgency.InstrumentAgencyTel)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                        </div>
                        <label for="email" class="col-12 col-md-4 col-lg-2 col-form-label">
                            <span>@AppData.LangResource[AppData.LanguageID, 79]</span>
                        </label>
                        <div class="col-12 col-md-8 col-lg-3">
                            <div class="input-group input-box-bottom">
                                @if (addInstrument.InstrumentAgencyID > 0)
                                {
                                    <InputText disabled @bind-Value="instrumentAgencys.Find(b => b.InstrumentAgencyID == addInstrument.InstrumentAgencyID).InstrumentAgencyEmail" placeholder="@AppData.LangResource[AppData.LanguageID,79]" class="form-control" />
                                }
                                else
                                {
                                    <InputText disabled @bind-Value="instrumentAgency.InstrumentAgencyEmail" placeholder="@AppData.LangResource[AppData.LanguageID,79]" class="form-control" />
                                }

                            </div>
                            <ValidationMessage For="@(() => instrumentAgency.InstrumentAgencyEmail)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                        </div>
                    </div>
                </div>
            </div>
            <div class="text-center">
                @if (AppData.CurrentPermission.Find(i => i.permissionID == 3).permissionE && addInstrument.InstrumentID != null)
                {
                    <button type="button" class="btn btn-warning margin-btn" @onclick="BarcodeQRGeneratre" name="PrintBarcode" id="PrintBarcode">@AppData.LangResource[AppData.LanguageID, 87]</button>
                }
                else
                {
                    <button disabled class="btn btn-warning margin-btn">@AppData.LangResource[AppData.LanguageID, 87]</button>
                }
                @if (addInstrument.InstrumentID != null)
                {
                    <a href="@($"Instruments/Calibration/{addInstrument.InstrumentNumber}")" class="btn margin-btn" style="background-color:#1E97DB;">@AppData.LangResource[AppData.LanguageID, 13]</a>
                    <a href="@($"Instruments/Maintenance/{addInstrument.InstrumentNumber}")" class="btn margin-btn" style="background-color:#3CBBCE;">@AppData.LangResource[AppData.LanguageID, 14]</a>
                    <a href="@($"Instruments/CheckListTemplate/{addInstrument.InstrumentModelID}/{addInstrument.InstrumentID}")" class="btn margin-btn" style="background-color:#3CBBCE;">@AppData.LangResource[AppData.LanguageID, 300]</a>
                }
                else
                {
                    <button disabled class="btn margin-btn" style="background-color:#1E97DB;">@AppData.LangResource[AppData.LanguageID, 13]</button>
                    <button disabled class="btn margin-btn" style="background-color:#3CBBCE;">@AppData.LangResource[AppData.LanguageID, 14]</button>
                    <button disabled class="btn margin-btn" style="background-color:#3CBBCE;">@AppData.LangResource[AppData.LanguageID, 300]</button>
                }

                @if (AppData.CurrentPermission.Find(i => i.permissionID == 3).permissionC && addInstrument.InstrumentBrandID != null && addInstrument.InstrumentModelID != null)
                {
                    <button type="submit" class="btn margin-btn" style="background-color:#4CBB17; color:#fff">@AppData.LangResource[AppData.LanguageID, 44]</button>
                }
                else
                {
                    <button type="button" disabled class="btn margin-btn" style="background-color:#4CBB17; color:#fff">@AppData.LangResource[AppData.LanguageID, 44]</button>
                }

                <button type="reset" @onclick="OnClear" class="btn margin-btn" style="background-color:#B90F1B; color:#fff">@AppData.LangResource[AppData.LanguageID, 45]</button>
            </div>
        </div>
    </div>

</EditForm>
<!--TypeForm -->
<EditForm Model="@instrumentType" OnValidSubmit="PostInstrumentType">
    <!--<DataAnnotationsValidator />-->
    <BSModal @ref="AddType">
        <BSModalHeader @onclick="@(() => AddType.Hide())" Class="btn-header-color">@AppData.LangResource[AppData.LanguageID, 195]</BSModalHeader>
        <BSModalBody>
            <div class="row">
                <label for="typeName" class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 196]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputText id="typeName" @bind-Value="instrumentType.InstrumentTypeName" placeholder="@AppData.LangResource[AppData.LanguageID,196]" class="form-control" />
                    </div>
                    <ValidationMessage For="@(() => instrumentType.InstrumentTypeName)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                </div>
            </div>
            <div class="row">
                <label for="typeDescription" class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 219]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputText id="typeDescription" @bind-Value="instrumentType.InstrumentTypeDescription" placeholder="@AppData.LangResource[AppData.LanguageID,219]" class="form-control" />
                    </div>
                    <ValidationMessage For="@(() => instrumentType.InstrumentTypeDescription)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                </div>
            </div>
        </BSModalBody>
        <BSModalFooter>
            <button type="submit" class="btn btn-warning">@AppData.LangResource[AppData.LanguageID, 44]</button>
            <button type="reset" class="btn btn-warning" @onclick="@(() => AddType.Hide())">@AppData.LangResource[AppData.LanguageID, 158]</button>
        </BSModalFooter>
    </BSModal>
</EditForm>
<!--BrandForm -->
<EditForm Model="@instrumentBrand" OnValidSubmit="PostInstrumentBrand">
    <!--<DataAnnotationsValidator />-->
    <BSModal @ref="AddBrand">
        <BSModalHeader OnClick="@(() => AddBrand.Hide())" Class="btn-header-color">@AppData.LangResource[AppData.LanguageID, 336]</BSModalHeader>
        <BSModalBody>
            <div class="row">
                <label class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 188]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputText @bind-Value="instrumentBrand.InstrumentBrandName" placeholder="@AppData.LangResource[AppData.LanguageID,188]" class="form-control" />
                    </div>

                    <ValidationMessage For="@(() => instrumentBrand.InstrumentBrandName)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />

                </div>

            </div>
            <div class="row">
                <label class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 189]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputText @bind-Value="instrumentBrand.InstrumentBrandDescription" placeholder="@AppData.LangResource[AppData.LanguageID,189]" class="form-control" />
                    </div>
                    <ValidationMessage For="@(() => instrumentBrand.InstrumentBrandDescription)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                </div>
            </div>

        </BSModalBody>
        <BSModalFooter>
            <button type="submit" class="btn" style="background-color:#4CBB17; color:#fff">@AppData.LangResource[AppData.LanguageID, 44]</button>
            <button type="reset" class="btn" style="background-color:#B90F1B; color:#fff" @onclick="@(() => AddBrand.Hide())" name="Cancel" id="Cancel">@AppData.LangResource[AppData.LanguageID, 158]</button>
        </BSModalFooter>
    </BSModal>
</EditForm>
<!--LocationForm -->
<EditForm Model="@instrumentLocation" OnValidSubmit="PostInstrumentLocation">
    <!--<DataAnnotationsValidator />-->
    <BSModal @ref="AddLocation">
        <BSModalHeader OnClick="@(() => AddLocation.Hide())" Class="btn-header-color">@AppData.LangResource[AppData.LanguageID, 211]</BSModalHeader>
        <BSModalBody>
            <div class="row">
                <label class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 199]-TH</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputText @bind-Value="instrumentLocation.InstrumentLocationName" placeholder="@AppData.LangResource[AppData.LanguageID,199]" class="form-control" />
                    </div>

                    <ValidationMessage For="@(() => instrumentLocation.InstrumentLocationName)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />

                </div>

            </div>
            <div class="row">
                <label class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 199]-ENG</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputText @bind-Value="instrumentLocation.InstrumentLocationNameENG" placeholder="@AppData.LangResource[AppData.LanguageID,199]" class="form-control" />
                    </div>

                    <ValidationMessage For="@(() => instrumentLocation.InstrumentLocationNameENG)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />

                </div>

            </div>
            <div class="row">
                <label class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 200]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputText @bind-Value="instrumentLocation.InstrumentLocationDescription" placeholder="@AppData.LangResource[AppData.LanguageID,200]" class="form-control" />
                    </div>
                    <ValidationMessage For="@(() => instrumentLocation.InstrumentLocationDescription)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                </div>
            </div>

        </BSModalBody>
        <BSModalFooter>
            <button type="submit" class="btn btn-warning">@AppData.LangResource[AppData.LanguageID, 44]</button>
            <button type="reset" class="btn btn-warning" @onclick="@(() => AddLocation.Hide())">@AppData.LangResource[AppData.LanguageID, 158]</button>
        </BSModalFooter>
    </BSModal>
</EditForm>
<!--CategoryForm -->
<EditForm Model="@instrumentCatagory" OnValidSubmit="PostInstrumentCatagory">
    <!--<DataAnnotationsValidator />-->
    <BSModal @ref="AddCatagory">
        <BSModalHeader OnClick="@(() => AddCatagory.Hide())" Class="btn-header-color">@AppData.LangResource[AppData.LanguageID, 226]</BSModalHeader>
        <BSModalBody>
            <div class="row">
                <label class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 227]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputText @bind-Value="instrumentCatagory.InstrumentCatagoryName" placeholder="@AppData.LangResource[AppData.LanguageID,227]" class="form-control" />
                    </div>
                    <ValidationMessage For="@(() => instrumentCatagory.InstrumentCatagoryName)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                </div>
            </div>
            <div class="row">
                <label class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 228]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputText @bind-Value="instrumentCatagory.InstrumentCatagoryDescription" placeholder="@AppData.LangResource[AppData.LanguageID,228]" class="form-control" />
                    </div>
                    <ValidationMessage For="@(() => instrumentCatagory.InstrumentCatagoryDescription)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                </div>
            </div>

        </BSModalBody>
        <BSModalFooter>
            <button type="submit" class="btn btn-warning">@AppData.LangResource[AppData.LanguageID, 44]</button>
            <button type="reset" class="btn btn-warning" @onclick="@(() => AddCatagory.Hide())">@AppData.LangResource[AppData.LanguageID, 158]</button>
        </BSModalFooter>
    </BSModal>
</EditForm>
<!--ModelForm -->
<EditForm Model="@instrumentModel" OnValidSubmit="PostInstrumentModel">
    <!--DataAnnotationsValidator /-->
    <BSModal @ref="AddModel">
        <BSModalHeader OnClick="@(() => AddModel.Hide())" Class="btn-header-color">@AppData.LangResource[AppData.LanguageID, 350]</BSModalHeader>
        <BSModalBody>
            <div class="row">
                <label for="modelName" class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 191]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputText @bind-Value="instrumentModel.InstrumentModelName" class="form-control" placeholder="@AppData.LangResource[AppData.LanguageID,191]" />
                    </div>
                    <ValidationMessage For="@(() => instrumentModel.InstrumentModelName)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                </div>
            </div>
            <div class="row">
                <label for="brandID" class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 188]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputSelect class="form-control" @bind-Value="instrumentModel.InstrumentBrandID" id="brand">
                            <option value="0">@AppData.LangResource[AppData.LanguageID, 2]</option>
                            @foreach (var item in instrumentBrands)
                            {
                                if (item.IsActive == true && item.IsActive != null)
                                {
                                    <option value="@item.InstrumentBrandID">@item.InstrumentBrandName</option>
                                }
                            }
                        </InputSelect>
                    </div>
                    <ValidationMessage For="@(() => instrumentModel.InstrumentBrandID)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                </div>
            </div>
            <div class="row">
                <label class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 192]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputText @bind-Value="instrumentModel.InstrumentModelDescription" class="form-control" placeholder="@AppData.LangResource[AppData.LanguageID,192]" />
                    </div>
                    <ValidationMessage For="@(() => instrumentModel.InstrumentModelDescription)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                </div>
            </div>

        </BSModalBody>
        <BSModalFooter>
            <button type="submit" class="btn" style="background-color:#4CBB17; color:#fff">@AppData.LangResource[AppData.LanguageID, 44]</button>
            <button type="reset" class="btn" style="background-color:#B90F1B; color:#fff" @onclick="@(() => AddModel.Hide())">@AppData.LangResource[AppData.LanguageID, 158]</button>
        </BSModalFooter>
    </BSModal>
</EditForm>
<!--AgencyForm -->
<EditForm Model="@instrumentAgency" OnValidSubmit="PostInstrumentAgency">
    <!--DataAnnotationsValidator /-->
    <BSModal @ref="AddAgency">
        <BSModalHeader OnClick="@(() => AddAgency.Hide())" Class="btn-header-color">@AppData.LangResource[AppData.LanguageID, 193]</BSModalHeader>
        <BSModalBody>
            <div class="row">
                <label class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 77]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputText @bind-Value="instrumentAgency.InstrumentAgencyName" placeholder="@AppData.LangResource[AppData.LanguageID,77]" class="form-control" />
                    </div>
                    <ValidationMessage For="@(() => instrumentAgency.InstrumentAgencyName)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                </div>
            </div>
            <div class="row">
                <label class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 39]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputText @bind-Value="instrumentAgency.InstrumentAgencyAddress" class="form-control" placeholder="@AppData.LangResource[AppData.LanguageID,39]" />
                    </div>
                    <ValidationMessage For="@(() => instrumentAgency.InstrumentAgencyAddress)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                </div>
            </div>
            <div class="row">
                <label class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 78]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputText @bind-Value="instrumentAgency.InstrumentAgencyTel" class="form-control" placeholder="@AppData.LangResource[AppData.LanguageID,78]" />
                    </div>
                    <ValidationMessage For="@(() => instrumentAgency.InstrumentAgencyTel)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                </div>
            </div>
            <div class="row">
                <label class="col-12 col-md-4 col-lg-4 col-form-label">
                    <span>@AppData.LangResource[AppData.LanguageID, 79]</span>
                </label>
                <div class="col-12 col-md-8 col-lg-7">
                    <div class="input-group input-box-bottom">
                        <InputText @bind-Value="instrumentAgency.InstrumentAgencyEmail" class="form-control" placeholder="@AppData.LangResource[AppData.LanguageID,79]" />
                    </div>
                    <ValidationMessage For="@(() => instrumentAgency.InstrumentAgencyEmail)" style="margin-top: -0.8rem; margin-bottom: 5px; font-size:12px; " />
                </div>
            </div>
        </BSModalBody>
        <BSModalFooter>
            <button type="submit" class="btn btn-warning" style="background-color:#4CBB17; color:#fff">@AppData.LangResource[AppData.LanguageID, 44]</button>
            <button type="reset" class="btn " style="background-color:#B90F1B; color:#fff" @onclick="@(() => AddAgency.Hide())">@AppData.LangResource[AppData.LanguageID, 158]</button>
        </BSModalFooter>
    </BSModal>
</EditForm>
<BSModal class="row style-justify mt-5" @ref="Load" IsCentered="true" Size="Size.Small" IgnoreEscape="true" IgnoreClickOnBackdrop="true">
    <BSModalBody>
        <div class="text-center mt-3">
            <span class="spinner-border text-warning spinner-border-sm " role="status" aria-hidden="true"
                  style="font-size: 16pt; width: 36px; height: 36px; color: Gold " />
        </div>
        <div class="text-center pt-3" style=" font-size: 16pt">
            @AppData.LangResource[AppData.LanguageID, 325]
        </div>
    </BSModalBody>
</BSModal>


@code {
    public int CheckedCount = 0;
    private List<InstrumentType> instrumentTypes = new List<InstrumentType>();
    private List<InstrumentCatagory> instrumentCatagorys = new List<InstrumentCatagory>();
    private List<InstrumentBrand> instrumentBrands = new List<InstrumentBrand>();
    private List<InstrumentAgency> instrumentAgencys = new List<InstrumentAgency>();
    private List<InstrumentLocation> instrumentLocations = new List<InstrumentLocation>();
    private List<InstrumentModel> instrumentModels = new List<InstrumentModel>();
    private List<Account> accounts = new List<Account>();
    private List<InstrumentChecklistType> checklistTypes = new List<InstrumentChecklistType>();
    private List<InstrumentCalibration> CalDue = new List<InstrumentCalibration>();
    string Year = "";
    //string yy = "2565";
    public DateTime currentYear { get; set; }
    bool bClearInputFile = false;

    BSModal Load { get; set; }

    public List<Instrument> Instruments = new List<Instrument>();
    private List<InstrumentListView> instruments = new List<InstrumentListView>();
    Instrument addInstrument = new Instrument();
    InstrumentType instrumentType = new InstrumentType();
    InstrumentBrand instrumentBrand = new InstrumentBrand();
    InstrumentLocation instrumentLocation = new InstrumentLocation();
    InstrumentAgency instrumentAgency = new InstrumentAgency();
    InstrumentModel instrumentModel = new InstrumentModel();
    InstrumentCatagory instrumentCatagory = new InstrumentCatagory();
    List<InstrumentAgency> Instrumentss = new List<InstrumentAgency>();
    Account userid = new Account();
    Guid? userID;//กำหนดค่าให้เป็น null ป้องกันไม่ให้ขึ้น reload
    InstrumentChecklistType listType = new InstrumentChecklistType();
    private List<InstrumentMapCheckListType> instrumentMapCheckListTypes = new List<InstrumentMapCheckListType>();
    private InstrumentCalibration instrumentCalibration = new InstrumentCalibration()
        {
            InstrumentCalibrationDate = DateTime.Today,
            InstrumentCalibrationNext = DateTime.Today

        };

    private IBrowserFile? fileDocument;
    private IBrowserFile? fileImageDefault;
    private IBrowserFile? fileImageLeft;
    private IBrowserFile? fileImageRight;

    private string? ImageShow { get; set; }
    private string? ImageLeftShow { get; set; }
    private string? ImageRightShow { get; set; }

    private string pathDocumentFolder { get; set; } = "Document";
    private string pathPictureDefaultFolder { get; set; } = "PictureDefault";
    private string pathPictureLeftFolder { get; set; } = "PictureLeft";
    private string pathPictureRightFolder { get; set; } = "PictureRight";

    /*
    private async Task OnSave() {
    if (addInstrument.InstrumentID != 0)
    {
    await PostInstrument();
    }
    else {
    await UpdateInstrument();
    }
    }*/

    private void PleaseSelect()
    {
        ToastService.ShowError("Please select a Resposible User");
    }


    /// <summary>
    /// PostInstrument
    /// </summary>
    public async Task PostInstrument()
    {
      
        await Task.Run(Loading);
        Load.Show();
        try
        {
            
            // Encode the URL to handle special characters
            string encodedAssetNumber = WebUtility.UrlEncode(addInstrument.InstrumentAssetNumber);
            string encodedSerialNumber = WebUtility.UrlEncode(addInstrument.InstrumentSerialNumber);

            List<Instrument> res = await Http.GetFromJsonAsync<List<Instrument>>($"{Config["nurl"]}/api/GetInstrumentByParameter/{encodedAssetNumber}/{encodedSerialNumber}");

            if (!System.Text.RegularExpressions.Regex.IsMatch(Year, "^[0-9]*$"))
            {
                ToastService.ShowError("Please enter ค.ศ or พ.ศ.");
            }
            else if (res.Count > 0)
            {
                ToastService.ShowError("Duplicate AssetNumber or SerialNumber");
            }
            else if (addInstrument.InstrumentAssetNumber.Length > 28 || addInstrument.InstrumentSerialNumber.Length > 28)
            {
                ToastService.ShowError("Asset Number or Serial Number exceeds 28 characters");
            }
            else if (addInstrument.InstrumentCatagoryID < 1)
            {

                ToastService.ShowError("Category Is Not Selected!");
                StateHasChanged();
            }
            else
            {

                if (addInstrument.InstrumentUserID == null)
                {
                    addInstrument.InstrumentUserID = new Guid("00000000-0000-0000-0000-000000000000");
                }

                /// <summary>
                /// check Recevie Date
                /// </summary
                if (Year == "")
                {
                    addInstrument.InstrumentRegisterDate = DateTime.Today;

                }
                else
                {
                    if (int.Parse(Year) >= 2443 && int.Parse(Year) <= 2983)
                    {
                        addInstrument.InstrumentRegisterDate = new DateTime(int.Parse(Year) - 543, 1, 1);
                        //Console.WriteLine(addInstrument.InstrumentRegisterDate);
                        //ToastService.ShowSuccess("Save โดยแปลง พ.ศ เป็น ค.ศ");
                    }
                    else if (int.Parse(Year) >= 1900 && int.Parse(Year) <= 2440)
                    {
                        addInstrument.InstrumentRegisterDate = new DateTime(int.Parse(Year), 1, 1);
                        //Console.WriteLine(addInstrument.InstrumentRegisterDate);
                        //ToastService.ShowSuccess("Save โดย เป็น ค.ศ");
                    }
                }


                try
                {
                    userID = userid.UserID;
                    using var response = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/RegisterInstrument", addInstrument);
                    List<Instrument> article = await response.Content.ReadFromJsonAsync<List<Instrument>>();
                    var clientHttp = new HttpClient();
                    clientHttp.Timeout = TimeSpan.FromMinutes(10);

                    if (response.StatusCode == System.Net.HttpStatusCode.OK)
                    {
                        this.addInstrument.InstrumentID = article.First().InstrumentID;
                        this.addInstrument.InstrumentNumber = article.First().InstrumentNumber;
                        Console.WriteLine(article);


                        foreach (var item in addInstrument.InstrumentCheckType)
                        {

                            item.InstrumentID = addInstrument.InstrumentID;
                            var r = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/InstrumentMapCheckListType", item);

                        }

                        foreach (var item in addInstrument.Resposible)
                        {

                            item.instrumentID = addInstrument.InstrumentID;
                            var r = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/InstrumetResposibleUser", item);

                        }
                        await ImageDefaultFile();
                        await ImageLeftFile();
                        await ImageRightFile();
                        await FileDocument();
                        await SetReload();
                        ToastService.ShowSuccess("RegisterInstrument  Successfully");
                        userID = null;

                        AppData.SetNoti(await Http.GetFromJsonAsync<List<InstrumentCalibration>>($"{Config["nurl"]}/api/GetDueInstrumentCalibration"),
                        await Http.GetFromJsonAsync<List<InstrumentMaintenance>>($"{Config["nurl"]}/api/GetDueInstrumentMaintenance")
                        , AppData.instrumentsList);
                        foreach (var i in AppData.instrumentBrands)
                        {
                            i.Getlookup(AppData.instrumentModels);
                        }
                        foreach (var i in AppData.instrumentsList)
                        {
                            i.GetLookup(AppData.instrumentBrands, AppData.instrumentModels, AppData.instrumentAgencies, AppData.instrumentStatus);
                        }
                        
                    }
                    //ToastService.ShowSuccess("RegisterInstrument  Successfully");

                }
                catch (Exception e)
                {
                    var value = e.Message;
                    ToastService.ShowError("Error:" + e.Message);
                }


                //ResigterInstrumentCalibartion
                //if (addInstrument.InstrumentID != null)
                //{
                //    instrumentCalibration.InstrumentID = addInstrument.InstrumentID;

                //    using var response = await Http.PostAsJsonAsync("api/RegisterInstrumentCalibration", instrumentCalibration);
                //    List<InstrumentCalibration> article = await response.Content.ReadFromJsonAsync<List<InstrumentCalibration>>();

                //    if (response.StatusCode == System.Net.HttpStatusCode.OK)
                //    {
                //        //ToastService.ShowSuccess("Calibration Save Successfully");
                //        Console.WriteLine(article);
                //    }
                //    else
                //    {
                //        //ToastService.ShowError("Error Please Contract System Administrator");
                //    }

                //    this.instrumentCalibration = article.First();
                //    StateHasChanged();
                //}
            }

        }
        catch (Exception e)
        {
            var value = e.Message;
            ToastService.ShowError("Please complete the information marked with *.");
        }
        Load.Hide();

    }



    /// <summary>
    /// OnClear
    /// </summary>
    public void OnClear()
    {
        addInstrument = new Instrument();
        SetCheckboxChecklistTypes();
        Year = "";
        userid = new Account();
        addInstrument.Resposible = new List<InstrumentResposibleUser>();
    }

    //สร้างฟังก์ชั่นนี้ไว้ เพราะว่า เวลากด Clear จะทำให้ InstrumentCheckListType ที่เป็น CheckBox หายไป เลยต้องสร้างฟังก์ชั่นนี้ SetCheckBox เรียกข้อมูลมาอีกรอบหนึ่ง เพื่อเวลากด Clear จะได้ไม่หายไป
    private void SetCheckboxChecklistTypes()
    {
        foreach (var item in checklistTypes)
        {
            addInstrument.InstrumentCheckType.Add(new InstrumentMapCheckListType()
                {
                    InstrumentCheckListTypeID = item.InstrumentCheckListTypeID,
                    InstrumentID = addInstrument.InstrumentID,
                    IsCheck = false
                });
        }
    }

    /// <summary>
    /// PostInstrumentType
    /// </summary>
    private async Task PostInstrumentType()
    {

        var res = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/RegisterInstrumentType", instrumentType);
        ToastService.ShowSuccess("InstrumentType Save Successfully");
        List<InstrumentType> list = await res.Content.ReadFromJsonAsync<List<InstrumentType>>();
        AppData.instrumentTypes.AddRange(list);
        instrumentTypes = AppData.instrumentTypes;
        this.addInstrument.InstrumentTypeID = list.First().InstrumentTypeID;
        AddType.Hide();
        await OnInitializedAsync();
    }

    /// <summary>
    /// PostInstrumentCatagory
    /// </summary>
    private async Task PostInstrumentCatagory()
    {
        var res = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/RegisterInstrumentCatagory", instrumentCatagory);
        ToastService.ShowSuccess("Successfully Catagory");
        List<InstrumentCatagory> list = await res.Content.ReadFromJsonAsync<List<InstrumentCatagory>>();
        AppData.instrumentCatagories.AddRange(list);
        instrumentCatagorys = AppData.instrumentCatagories;
        this.addInstrument.InstrumentCatagoryID = list.First().InstrumentCatagoryID;
        AddCatagory.Hide();
        await OnInitializedAsync();
    }

    /// <summary>
    /// PostInstrumentBrand
    /// </summary>
    //private async Task PostInstrumentBrand()
    //{
    //    var res = await Http.PostAsJsonAsync("api/RegisterInstrumentBrand", instrumentBrand);
    //    ToastService.ShowSuccess("InstrumentBrand Save Successfully");
    //    List<InstrumentBrand> list = await res.Content.ReadFromJsonAsync<List<InstrumentBrand>>();
    //    AppData.instrumentBrands.AddRange(list);
    //    instrumentBrands  = AppData.instrumentBrands;
    //    this.addInstrument.InstrumentBrandID = list.First().InstrumentBrandID;
    //    AddBrand.Hide();
    //    await OnInitializedAsync();
    //}



    /// <summary>
    /// PostInstrumentBrand
    /// </summary>
    private async Task PostInstrumentBrand()
    {
        try
        {
            var respond = await _masterData.PostMasterDataAsync("PostInstrumentBrand", instrumentBrand);
            if (!string.IsNullOrEmpty(respond.ToString()))
            {
                ToastService.ShowSuccess("InstrumentBrand Save Successfully");
                this.addInstrument.InstrumentBrandID = respond.InstrumentBrandID;
                await SetReload();
            }
            else
            {
                ToastService.ShowError("Unable to add Instrument Brand.");
            }

        }
        catch (Exception e)
        {
            var val = e.Message;
            ToastService.ShowError($"Error: {val}");
        }

        AddBrand.Hide();
    }

    /// <summary>
    /// PostInstrumentModel
    /// </summary>
    private async Task PostInstrumentModel()
    {
        var res = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/RegisterInstrumentModel", instrumentModel);
        ToastService.ShowSuccess("InstrumentModel Save Successfully");
        List<InstrumentModel> list = await res.Content.ReadFromJsonAsync<List<InstrumentModel>>();
        AppData.instrumentModels.AddRange(list);
        instrumentModels = AppData.instrumentModels;
        this.addInstrument.InstrumentModelID = list.First().InstrumentModelID;
        AddModel.Hide();
        await SetReload();
    }

    /// <summary>
    /// PostInstrumentLocation
    /// </summary>
    private async Task PostInstrumentLocation()
    {
        var res = await Http.PostAsJsonAsync($"{Config["nurl"]}/api/RegisterInstrumentLocation", instrumentLocation);
        ToastService.ShowSuccess("InstrumentLocation Save Successfully");
        List<InstrumentLocation> list = await res.Content.ReadFromJsonAsync<List<InstrumentLocation>>();
        AppData.instrumentLocations.AddRange(list);
        instrumentModels = AppData.instrumentModels;
        this.addInstrument.InstrumentLocationID = list.First().InstrumentLocationID;
        AddLocation.Hide();
        await OnInitializedAsync();
    }


    /// <summary>
    /// SaveCreateInstrumentAgency
    /// </summary>
    private async Task PostInstrumentAgency()
    {
        try
        {
            var respond = await _masterData.PostMasterDataAsync("PostInstrumentAgency", instrumentAgency);
            if (!string.IsNullOrEmpty(respond.ToString()))
            {
                ToastService.ShowSuccess(" InstrumentAgency Save Successfully");
                this.addInstrument.InstrumentAgencyID = respond.InstrumentAgencyID;
                await SetReload();
            }
            else
            {
                ToastService.ShowError("Unable to add Instrument Agency.");
            }

        }
        catch (Exception e)
        {
            var val = e.Message;
            ToastService.ShowError($"Error: {val}");
        }

        AddAgency.Hide();
    }

    //Get InstrumentBrandID InstrumentTypeID
    protected override async Task OnInitializedAsync()
    {
    //Instruments = await InstrumentService.GetInstruments();
        //AppData.instruments = await _masterDataInstrument.GetAllInstrumentMasterDataAsync<RapidNrims.Shared.Model.Cores.Instrument>("GetAllInstrument");
        //Instruments = AppData.instruments;
        @* Http = new HttpClient();
        Http.Timeout = TimeSpan.FromMinutes(10);*@
        if (addInstrument.InstrumentID != null)
        {
            AppData.DueCal = await Http.GetFromJsonAsync<List<InstrumentCalibration>>($"{Config["nurl"]}/api/GetInstrumentCalibration/{addInstrument.InstrumentID}");
            CalDue = AppData.DueCal;
        }

        instrumentTypes = AppData.instrumentTypes;
        @*var activeInstrumentType = instrumentTypes.Find(i => i.IsActive == true).IsActive;
        if(activeInstrumentType == true)
            instrumentTypes = await _masterData.GetAllActiveMasterDataAsync<InstrumentType>("ActiveInstrumentType");*@

        instrumentAgencys = AppData.instrumentAgencies;
        @*var activeInstrumentAgencies = instrumentAgencys.Find(i => i.IsActive == true).IsActive;
        if(activeInstrumentAgencies == true)
            instrumentAgencys = await _masterData.GetAllActiveMasterDataAsync<InstrumentAgency>("ActiveInstrumentAgencies");*@
        instrumentBrands = AppData.instrumentBrands;

        @*var activeInstrumentBrand = instrumentBrands.Find(i => i.IsActive == true).IsActive;
        if (activeInstrumentBrand == true)
            instrumentBrands = await _masterData.GetAllActiveMasterDataAsync<InstrumentBrand>("ActiveInstrumentBrand");*@

        instrumentCatagorys = AppData.instrumentCatagories;
        @*var activeInstrumentCategory = instrumentCatagorys.Find(i => i.IsActive == true).IsActive;
        if(activeInstrumentCategory == true)
            instrumentCatagorys = await _masterData.GetAllActiveMasterDataAsync<InstrumentCatagory>("ActiveInstrumentCategory");*@

        instrumentModels = AppData.instrumentModels;
        @*var activeInstrumentModel = instrumentModels.Find(i => i.IsActive == true).IsActive;
        if(activeInstrumentModel == true)
            instrumentModels = await _masterData.GetAllActiveMasterDataAsync<InstrumentModel>("ActiveInstrumentModel");*@

        instrumentLocations = AppData.instrumentLocations;
        @*var activeInstrumentLocation = instrumentLocations.Find(i => i.IsActive == true).IsActive;
        if (activeInstrumentLocation == true)
            instrumentLocations = await _masterData.GetAllActiveMasterDataAsync<InstrumentLocation>("ActiveInstrumentLocation");*@

        if (AppData.LanguageID == 0)
        {
            var resultInstrumentType = instrumentTypes.OrderBy(t => t.InstrumentTypeName).ToList();
            instrumentTypes = resultInstrumentType;
            var resultInstrumentCategory = instrumentCatagorys.OrderBy(c => c.InstrumentCatagoryName).ToList();
            instrumentCatagorys = resultInstrumentCategory;
            var resultInstrumentBrand = instrumentBrands.OrderBy(b => b.InstrumentBrandName).ToList();
            instrumentBrands = resultInstrumentBrand;
            var resultInstrumentModel = instrumentModels.OrderBy(m => m.InstrumentModelName).ToList();
            instrumentModels = resultInstrumentModel;
            var resultInstrumentLocationEN = instrumentLocations.OrderBy(l => l.InstrumentLocationNameENG).ToList();
            instrumentLocations = resultInstrumentLocationEN;
            var resultAccounts = accounts.OrderBy(r => r.FirstName).ToList();
            accounts = resultAccounts;
            var resultInstrumentAgency = instrumentAgencys.OrderBy(a => a.InstrumentAgencyName).ToList();
            instrumentAgencys = resultInstrumentAgency;
        }
        else
        {

            var resultInstrumentLocationTH = instrumentLocations.OrderBy(l => l.InstrumentLocationName).ToList();
            instrumentLocations = resultInstrumentLocationTH;

        }

        checklistTypes = AppData.instrumentChecklistTypes;

        accounts = await Http.GetFromJsonAsync<List<Account>>($"{Config["aurl"]}/api/GetAccount");

        foreach (var item in checklistTypes)
        {
            addInstrument.InstrumentCheckType.Add(new InstrumentMapCheckListType()
                {
                    InstrumentCheckListTypeID = item.InstrumentCheckListTypeID,
                    InstrumentID = addInstrument.InstrumentID,
                    IsCheck = false
                });
        }
    }

    /// <summary>
    /// clearURL
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeAsync<object>("showFileName");
            await jsRuntime.InvokeVoidAsync("clearURL");
        }
    }

    /// <summary>
    /// SetReload Instrument Brand, Instrument Model and Instrument Agency
    /// </summary>
    private async Task SetReload()
    {
        instruments = AppData.instrumentListViews;
        AppData.instrumentBrands = await _masterData.GetMasterDataAsync<InstrumentBrand>("InstrumentBrand");
        AppData.instrumentAgencies = await _masterData.GetMasterDataAsync<InstrumentAgency>("InstrumentAgency");
        instrumentAgencys = AppData.instrumentAgencies;
        instrumentBrands = AppData.instrumentBrands;
        instrumentModels = AppData.instrumentModels;
        checklistTypes = AppData.instrumentChecklistTypes;
        instrumentMapCheckListTypes = await _masterData.GetMasterDataAsync<InstrumentMapCheckListType>("InstrumentMapCheckListType");
        AppData.instrumentsList = await _masterData.GetMasterDataAsync<Instrument>("Instrument");

        if (AppData.LanguageID == 0)
        {

            var resultInstrumentBrand = instrumentBrands.OrderBy(b => b.InstrumentBrandName).ToList();
            instrumentBrands = resultInstrumentBrand;
            var resultInstrumentModel = instrumentModels.OrderBy(m => m.InstrumentModelName).ToList();
            instrumentModels = resultInstrumentModel;
            var resultInstrumentAgency = instrumentAgencys.OrderBy(a => a.InstrumentAgencyName).ToList();
            instrumentAgencys = resultInstrumentAgency;
        }
    }



    /// <summary>
    /// Varliable checkWeekly checkMonthly and checkYear
    /// </summary>
    private bool checkWeeklyChanged;
    private bool checkMonthlyChanged;
    private bool checkYearlyChanged;

    /// <summary>
    /// CheckWeeklyChanged
    /// </summary>
    private void CheckWeeklyChanged()
    {
        if (checkWeeklyChanged)
        {
            addInstrument.InstrumentWeekly = true;
            Console.WriteLine(addInstrument.InstrumentWeekly);
        }
        else
        {
            addInstrument.InstrumentWeekly = false;
            Console.WriteLine(addInstrument.InstrumentWeekly);
        }
    }

    /// <summary>
    /// CheckMonthlyChanged
    /// </summary>
    private void CheckMonthlyChanged()
    {
        if (checkMonthlyChanged)
        {
            addInstrument.InstrumentMonthly = true;
            Console.WriteLine(addInstrument.InstrumentMonthly);
        }
        else
        {
            addInstrument.InstrumentMonthly = false;
            Console.WriteLine(addInstrument.InstrumentMonthly);
        }
    }

    /// <summary>
    /// CheckYearlyChanged
    /// </summary>
    private void CheckYearlyChanged()
    {
        if (checkYearlyChanged)
        {
            addInstrument.InstrumentYearly = true;
            Console.WriteLine(addInstrument.InstrumentYearly);
        }
        else
        {
            addInstrument.InstrumentYearly = false;
            Console.WriteLine(addInstrument.InstrumentYearly);
        }
    }


    /*******************************************UploadFile*************************************************************************/
    /// <summary>
    /// Document File
    /// </summary>
    protected async Task OnInputFileDocumentChange(InputFileChangeEventArgs e)
    {
        fileDocument = e.File;
        //var formatDocumentFile = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        var fileType = fileDocument.ContentType;
        var sizefile = fileDocument.Size;

        if (sizefile > 2154227)
        {
            ToastService.ShowError("The file size cannot exceed 30MB.");
            addInstrument.InstrumentFile = "";
        }
        else if (fileType != "application/pdf")
        {
            ToastService.ShowError("File Type Document Incorrect !");
            addInstrument.InstrumentFile = "";
        }
        else
        {
            Load.Show();
            await Task.Run(Loading);
            string newFileName = await GenerateUniqueFileName(fileDocument.Name, pathDocumentFolder);
            addInstrument.InstrumentFile = newFileName;
            Load.Hide();
        }

    }

    /// <summary>
    /// Document File
    /// </summary>
    private async Task FileDocument()
    {
        if (fileDocument != null)
        {
            try
            {
                var fileType = fileDocument.ContentType;
                var sizefile = fileDocument.Size;
                if (sizefile <= 2154227 && fileType == "application/pdf")
                {
                    string newFileName = await GenerateUniqueFileName(fileDocument.Name, pathDocumentFolder);
                    string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "Instrument", "Register", pathDocumentFolder, newFileName);

                    Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "Instrument", "Register", pathDocumentFolder));

                    await using FileStream fs = new(path, FileMode.Create);
                    await fileDocument.OpenReadStream(sizefile).CopyToAsync(fs);
                }
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"File: {fileDocument.Name} Error: {ex.Message}");
            }
        }
    }

    private byte[] UploadPathDefault { get; set; }
    private byte[] UploadPathLeft { get; set; }
    private byte[] UploadPathRight { get; set; }
    /// <summary>
    /// Image Default
    /// </summary>
    private async Task OnInputFileDefaultChange(InputFileChangeEventArgs e)
    {
        fileImageDefault = e.File;
        var imageType = fileImageDefault.ContentType;
        var sizefile = fileImageDefault.Size;

        if (sizefile > 5542880)
        {
            ToastService.ShowError("The file size cannot exceed 5MB.");
            addInstrument.InstrumentPictureDefault = "";
        }
        else if (imageType != "image/png" && imageType != "image/jpeg")
        {
            ToastService.ShowError("File Type Image Incorrect !");
            addInstrument.InstrumentPictureDefault = "";
        }
        else
        {
            Load.Show();
            await Task.Run(Loading);
            var resizedImage = await fileImageDefault.RequestImageFileAsync(imageType, 550, 550);
            // อ่านข้อมูลรูปภาพและแปลงเป็น Base64
            using (var stream = resizedImage.OpenReadStream(resizedImage.Size))
            {
                var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                var buffer = memoryStream.ToArray();
                ImageShow = Convert.ToBase64String(buffer);
            }

            int maxWidth = 640;
            int maxHeight = 480;
            int quality = 90;

            byte[] compressedImage = _imageService.CompressBase64Image(ImageShow, maxWidth, maxHeight, quality);
            string compressedBase64 = Convert.ToBase64String(compressedImage);
            ImageShow = compressedBase64;
            UploadPathDefault = compressedImage;

            string newFileImageName = await GenerateUniqueFileName(fileImageDefault.Name, pathPictureDefaultFolder);
            addInstrument.InstrumentPictureDefault = newFileImageName;

            //using MemoryStream memoryStream = new MemoryStream();
            //await fileImageDefault.OpenReadStream(sizefile).CopyToAsync(memoryStream);
            //var buffer = memoryStream.GetBuffer();
            //var imageLeftDataUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffer)}";
            //ImageShow = imageLeftDataUrl;
            //string newFileImageName = await GenerateUniqueFileName(fileImageDefault.Name, pathPictureDefaultFolder);
            //addInstrument.InstrumentPictureDefault = newFileImageName;
            Load.Hide();
        }


    }
    /// <summary>
    /// Image Default
    /// </summary>
    private async Task ImageDefaultFile()
    {

        if (fileImageDefault != null)
        {
            try
            {
                var imageType = fileImageDefault.ContentType;
                var sizefile = fileImageDefault.Size;
                if (sizefile > 5542880)
                {
                    //ToastService.ShowError("The file size cannot exceed 5MB.");
                    addInstrument.InstrumentPictureDefault = "";
                }
                else if (imageType != "image/png" && imageType != "image/jpeg")
                {
                    ///ToastService.ShowError("File Type Image Incorrect !");
                    addInstrument.InstrumentPictureDefault = "";
                }
                else
                {
                    string newFileImageName = await GenerateUniqueFileName(fileImageDefault.Name, pathPictureDefaultFolder);
                    string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "Instrument", "Register", "Picture", pathPictureDefaultFolder, newFileImageName);
                    Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "Instrument", "Register", "Picture", pathPictureDefaultFolder)); // Ensure the directory exists

                    await File.WriteAllBytesAsync(path, UploadPathDefault);

                    //string newFileImageName = await GenerateUniqueFileName(fileImageDefault.Name, pathPictureDefaultFolder);
                    ////string prefixedNewFileName = $"Update_{showinstrument.InstrumentNumber}_" + newFileImageName;
                    //string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "Instrument", "Register", "Picture", pathPictureDefaultFolder, newFileImageName);

                    //Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "Instrument", "Register", "Picture", pathPictureDefaultFolder));

                    //await using FileStream fs = new(path, FileMode.Create);
                    //await fileImageDefault.OpenReadStream(sizefile).CopyToAsync(fs);


                }

            }
            catch (Exception ex)
            {
                ToastService.ShowError($"File: {fileImageDefault.Name} Error: {ex.Message}");
            }
        }

    }

    /// <summary>
    /// Image Left
    /// </summary>
    private IList<string> imageLeftDataUrls = new List<string>();
    private async Task OnInputFileLeftChange(InputFileChangeEventArgs e)
    {
        fileImageLeft = e.File;
        var imageType = fileImageLeft.ContentType;
        var sizefile = fileImageLeft.Size;

        if (sizefile > 5542880)
        {
            ToastService.ShowError("The file size cannot exceed 5MB.");
            addInstrument.InstrumentPictureLeft = "";
        }
        else if (imageType != "image/png" && imageType != "image/jpeg")
        {
            ToastService.ShowError("File Type Image Incorrect !");
            addInstrument.InstrumentPictureLeft = "";
        }
        else
        {
            Load.Show();
            await Task.Run(Loading);
            var resizedImage = await fileImageLeft.RequestImageFileAsync(imageType, 550, 550);
            // อ่านข้อมูลรูปภาพและแปลงเป็น Base64
            using (var stream = resizedImage.OpenReadStream(resizedImage.Size))
            {
                var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                var buffer = memoryStream.ToArray();
                ImageLeftShow = Convert.ToBase64String(buffer);
            }
            int maxWidth = 640;
            int maxHeight = 480;
            int quality = 90;

            byte[] compressedImage = _imageService.CompressBase64Image(ImageLeftShow, maxWidth, maxHeight, quality);
            string compressedBase64 = Convert.ToBase64String(compressedImage);
            ImageLeftShow = compressedBase64;
            UploadPathLeft = compressedImage;

            string newFileImageName = await GenerateUniqueFileName(fileImageLeft.Name, pathPictureRightFolder);
            addInstrument.InstrumentPictureLeft = newFileImageName;
            //using MemoryStream memoryStream = new MemoryStream();
            //await fileImageLeft.OpenReadStream(sizefile).CopyToAsync(memoryStream);
            //var buffer = memoryStream.GetBuffer();
            //var imageLeftDataUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffer)}";
            //ImageLeftShow = imageLeftDataUrl;
            //string newFileImageName = await GenerateUniqueFileName(fileImageLeft.Name, pathPictureLeftFolder);
            //addInstrument.InstrumentPictureLeft = newFileImageName;
            Load.Hide();
        }
    }

    /// <summary>
    /// Image Left
    /// </summary>
    private async Task ImageLeftFile()
    {

        if (fileImageLeft != null)
        {
            try
            {
                var imageType = fileImageLeft.ContentType;
                var sizefile = fileImageLeft.Size;
                if (sizefile > 5542880)
                {
                    //ToastService.ShowError("The file size cannot exceed 5MB.");
                    addInstrument.InstrumentPictureLeft = "";
                }
                else if (imageType != "image/png" && imageType != "image/jpeg")
                {
                    ///ToastService.ShowError("File Type Image Incorrect !");
                    addInstrument.InstrumentPictureLeft = "";
                }
                else
                {
                    string newFileImageName = await GenerateUniqueFileName(fileImageLeft.Name, pathPictureLeftFolder);
                    string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "Instrument", "Register", "Picture", pathPictureLeftFolder, newFileImageName);
                    Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "Instrument", "Register", "Picture", pathPictureLeftFolder)); // Ensure the directory exists

                    await File.WriteAllBytesAsync(path, UploadPathLeft);

                    //string newFileImageName = await GenerateUniqueFileName(fileImageLeft.Name, pathPictureLeftFolder);
                    ////string prefixedNewFileName = $"Update_{showinstrument.InstrumentNumber}_" + newFileImageName;
                    //string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "Instrument", "Register", "Picture", pathPictureLeftFolder, newFileImageName);

                    //Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "Instrument", "Register", "Picture", pathPictureLeftFolder));

                    //await using FileStream fs = new(path, FileMode.Create);
                    //await fileImageLeft.OpenReadStream(sizefile).CopyToAsync(fs);


                }

            }
            catch (Exception ex)
            {
                ToastService.ShowError($"File: {fileImageLeft.Name} Error: {ex.Message}");
            }
        }

    }

    /// <summary>
    /// Image Right
    /// </summary>
    private IList<string> imageRightDataUrls = new List<string>();
    private async Task OnInputFileRightChange(InputFileChangeEventArgs e)
    {
        fileImageRight = e.File;
        var imageType = fileImageRight.ContentType;
        var sizefile = fileImageRight.Size;

        if (sizefile > 5542880)
        {
            ToastService.ShowError("The file size cannot exceed 5MB.");
            addInstrument.InstrumentPictureRight = "";
        }
        else if (imageType != "image/png" && imageType != "image/jpeg")
        {
            ToastService.ShowError("File Type Image Incorrect !");
            addInstrument.InstrumentPictureRight = "";
        }
        else
        {
            Load.Show();
            await Task.Run(Loading);
            var resizedImage = await fileImageRight.RequestImageFileAsync(imageType, 550, 550);
            // อ่านข้อมูลรูปภาพและแปลงเป็น Base64
            using (var stream = resizedImage.OpenReadStream(resizedImage.Size))
            {
                var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                var buffer = memoryStream.ToArray();
                ImageRightShow = Convert.ToBase64String(buffer);
            }
            int maxWidth = 640;
            int maxHeight = 480;
            int quality = 90;

            byte[] compressedImage = _imageService.CompressBase64Image(ImageRightShow, maxWidth, maxHeight, quality);
            string compressedBase64 = Convert.ToBase64String(compressedImage);
            ImageRightShow = compressedBase64;
            UploadPathRight = compressedImage;

            string newFileImageName = await GenerateUniqueFileName(fileImageRight.Name, pathPictureRightFolder);
            addInstrument.InstrumentPictureRight = newFileImageName;


            //using MemoryStream memoryStream = new MemoryStream();
            //await fileImageRight.OpenReadStream(sizefile).CopyToAsync(memoryStream);
            //var buffer = memoryStream.GetBuffer();
            //var imageRightDataUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffer)}";
            //ImageRightShow = imageRightDataUrl;
            //string newFileImageName = await GenerateUniqueFileName(fileImageRight.Name, pathPictureRightFolder);
            //addInstrument.InstrumentPictureRight = newFileImageName;
            Load.Hide();
        }
    }


    /// <summary>
    /// Image Right
    /// </summary>
    private async Task ImageRightFile()
    {

        if (fileImageRight != null)
        {
            try
            {
                var imageType = fileImageRight.ContentType;
                var sizefile = fileImageRight.Size;
                if (sizefile > 5542880)
                {
                    //ToastService.ShowError("The file size cannot exceed 5MB.");
                    addInstrument.InstrumentPictureRight = "";
                }
                else if (imageType != "image/png" && imageType != "image/jpeg")
                {
                    ///ToastService.ShowError("File Type Image Incorrect !");
                    addInstrument.InstrumentPictureRight = "";
                }
                else
                {
                    string newFileImageName = await GenerateUniqueFileName(fileImageRight.Name, pathPictureRightFolder);
                    string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "Instrument", "Register", "Picture", pathPictureRightFolder, newFileImageName);
                    Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "Instrument", "Register", "Picture", pathPictureRightFolder)); // Ensure the directory exists

                    await File.WriteAllBytesAsync(path, UploadPathRight);

                    //string newFileImageName = await GenerateUniqueFileName(fileImageRight.Name, pathPictureRightFolder);
                    ////string prefixedNewFileName = $"Update_{showinstrument.InstrumentNumber}_" + newFileImageName;
                    //string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "Instrument", "Register", "Picture", pathPictureRightFolder, newFileImageName);

                    //Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "Instrument", "Register", "Picture", pathPictureRightFolder));

                    //await using FileStream fs = new(path, FileMode.Create);
                    //await fileImageRight.OpenReadStream(sizefile).CopyToAsync(fs);


                }

            }
            catch (Exception ex)
            {
                ToastService.ShowError($"File: {fileImageRight.Name} Error: {ex.Message}");
            }
        }

    }


    /// <summary>
    /// GenerateUniqueFileDocument
    /// </summary>
    private async Task<string> GenerateUniqueFileName(string originalFileName, string folderName)
    {
        string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(originalFileName);
        string fileExtension = Path.GetExtension(originalFileName);
        string newFileName = fileNameWithoutExtension + fileExtension;
        if (folderName == "Document")
        {
            int counter = 1;
            string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "Instrument", "Register", folderName, newFileName);

            while (File.Exists(path))
            {
                newFileName = $"{fileNameWithoutExtension}({counter}){fileExtension}";
                path = Path.Combine(Config.GetValue<string>("FileStorage")!, "Instrument", "Register", folderName, newFileName);
                counter++;
            }
        }
        else
        {
            int counter = 1;
            string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "Instrument", "Register", "Picture", folderName, newFileName);

            while (File.Exists(path))
            {
                newFileName = $"{fileNameWithoutExtension}({counter}){fileExtension}";
                path = Path.Combine(Config.GetValue<string>("FileStorage")!, "Instrument", "Register", "Picture", folderName, newFileName);
                counter++;
            }
        }


        return newFileName;
    }

    /// <summary>
    /// Modal
    /// </summary>
    BSModal AddType { get; set; }
    BSModal AddCatagory { get; set; }
    BSModal AddBrand { get; set; }
    BSModal AddModel { get; set; }
    BSModal AddAgency { get; set; }
    BSModal AddLocation { get; set; }


    /// <summary>
    /// PrintBarcodetr
    /// </summary>
    string barcode { get; set; } = "";

    public async void BarcodeQRGeneratre()
    {
        Load.Show();
        await Task.Run(Loading);
        Barcode sticker = new Barcode();
        var pdf = await sticker.GenerateBarcodeInstrumentAsync(addInstrument.InstrumentNumber, addInstrument.InstrumentENName,
            instrumentLocations.Find(i => i.InstrumentLocationID == addInstrument.InstrumentLocationID) != null ? instrumentLocations.Find(i => i.InstrumentLocationID == addInstrument.InstrumentLocationID).InstrumentLocationNameENG : "-", BarcodeType.QRCode);
        barcode = Convert.ToBase64String(pdf);
        await PrintingService.Print(new PrintOptions(barcode) { Base64 = true });
        Load.Hide();
    }

    private void Loading()
    {

        System.Threading.Thread.Sleep(300);
        // Retrieve data from the server and initialize
        // Employees property which the View will bind
    }
}