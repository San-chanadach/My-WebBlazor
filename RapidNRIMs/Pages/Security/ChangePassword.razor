@page "/Security/ChangePassword"
@inject IJSRuntime jsRuntime
@inject AppData AppData
@inject HttpClient Http
@inject IToastService ToastService
@inject IConfiguration Config

<PageTitle>Change Password Page</PageTitle>

<EditForm Model="@upPassword" OnValidSubmit="UpdateChangePassword">
    <DataAnnotationsValidator />
    <div class="row margin-row-card">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">@AppData.LangResource[AppData.LanguageID, 27]</div>
                <div class="card-body">
                    <div class="form-row input-box-bottom">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">@AppData.LangResource[AppData.LanguageID, 179]</label>
                        <div class="col-md-3">
                            <input type="@inputOldType" disabled @bind-value="showOldPassword.PasswordHash" class="form-control" name="oldpassword" id="oldpassword" placeholder="@AppData.LangResource[AppData.LanguageID,179]">
                            <span class="span-btn-type" >

                                <button type="button" class="btn btn-primary margin-btn" @onclick="ToggleOldPassword">
                                    <i  class="@iconOldPassword"></i>
                                </button>
                            </span>
                          
                        </div>
                    </div>
                    <div class="form-row input-box-bottom">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">@AppData.LangResource[AppData.LanguageID, 180]</label>
                        <div class="col-md-3">
                            <input type="password" @bind="upPassword.NewPassword" oninput="getInputValueNewPassword();" class="form-control" name="newpassword" id="newpassword" placeholder="@AppData.LangResource[AppData.LanguageID,180]">
                            <span toggle="#newpassword" class="far fa-eye field-icon eye-event-newpassword toggle-newpassword" style="display: none;"></span>
                        </div>
                    </div>
                    <div class="form-row input-box-bottom">
                        <label class="col-12 col-md-4 col-lg-2 col-form-label">@AppData.LangResource[AppData.LanguageID, 149]</label>
                        <div class="col-md-3">
                            <input type="password" @bind="upPassword.ConfirmNewPassword" oninput="getInputValueConfirmPassword();" class="form-control" name="confirmpassword" id="confirmpassword" placeholder="@AppData.LangResource[AppData.LanguageID,149]">
                            <span toggle="#confirmpassword" class="far fa-eye field-icon eye-event-confirmpassword toggle-confirmpassword" style="display: none;"></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-row input-box-bottom">
                <label class="col-12 col-md-4 col-lg-2 col-form-label"></label>
                <div class="col-md-3" style="margin-left: 0.5rem;">
                    @if (AppData.CurrentPermission.Find(i => i.permissionID == 20).permissionU)
                    {
                            <button type="submit" class="btn margin-btn" style="background-color:#4CBB17; color:#fff" name="ConfirmPassword" id="ConfirmPassword">@AppData.LangResource[AppData.LanguageID, 151]</button>
                    }
                    <button type="button" @onclick="OnClear" class="btn margin-btn" style="background-color:#B90F1B; color:#fff" name="Clear" id="Clear">@AppData.LangResource[AppData.LanguageID, 158]</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {

    /// <summary>
    /// varliable showaccount
    /// </summary>
    UserAccount showOldPassword = new UserAccount();

    /// <summary>
    /// varliable updatePassword
    /// </summary>
    SecurityChangePassword upPassword = new SecurityChangePassword();

    private string inputOldType = "password";
    private string iconOldPassword = "fa-regular fa-eye"; 
    /// <summary>
    /// UpdateChangePassword
    /// </summary>
    public async Task UpdateChangePassword()
    {
        @if (upPassword.NewPassword == upPassword.ConfirmNewPassword)
        {
            upPassword.OldPassword = showOldPassword.PasswordHash;

            var upresult = await Http.PutAsJsonAsync($"{Config["aurl"]}/api/UpdateAccountPassword/N/{AppData.UserID}", upPassword);
            ToastService.ShowSuccess("Change Password Save Successfully");

            upPassword.NewPassword = "";
            upPassword.ConfirmNewPassword = "";

            await OnInitializedAsync();
        }
        else
        {
            ToastService.ShowError("password does not match");
        }

    }

    private void ToggleOldPassword()
    {
        if (inputOldType == "password" && iconOldPassword == "fa-regular fa-eye")
        {
            inputOldType = "text";
            iconOldPassword = "fa-solid fa-eye-slash";
        }
        else
        {
            inputOldType = "password";
            iconOldPassword = "fa-regular fa-eye";
        }
    }

    /// <summary>
    /// OnInitializedAsync
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        if (AppData.UserID != null)
        {
            var respond = await Http.GetFromJsonAsync<List<UserAccount>>($"{Config["aurl"]}/api/GetUserAccount/{AppData.UserID}");
            if (respond != null)
            {
                //OldPassword = showOldPassword.PasswordHash;
                showOldPassword = respond.First();

            }

        }

    }

    /// <summary>
    /// OnClear
    /// </summary>
    public async Task OnClear()
    {
        upPassword = new SecurityChangePassword();
        // Optionally, you might want to trigger the JavaScript to hide the icon
        await jsRuntime.InvokeVoidAsync("getInputValueNewPassword"); 
        await jsRuntime.InvokeAsync<object>("showValueNewPassword");
        await jsRuntime.InvokeVoidAsync("getInputValueConfirmPassword");
        await jsRuntime.InvokeAsync<object>("showValueConfirmPassword");

    }


    /// <summary>
    /// clearURL
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("clearURL");
            await jsRuntime.InvokeAsync<object>("showValueNewPassword");
            await jsRuntime.InvokeAsync<object>("showValueConfirmPassword");
        }
    }


}
