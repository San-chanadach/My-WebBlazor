@page "/MasterData/MasterDataInstrumentAction"
@inject AppData AppData
@inject IToastService ToastService
@inject IMasterData _masterData
@inject IJSRuntime jsRuntime


@if (listInstrumentAction == null)
{
    <div class="text-center mt-3">
        <span class="spinner-border text-warning spinner-border-sm " role="status" aria-hidden="true"
              style="font-size: 16pt; width: 36px; height: 36px; color: Gold " />
    </div>
    <div class="text-center pt-3" style=" font-size: 16pt">
        @AppData.LangResource[AppData.LanguageID, 325]
    </div>
}
else
{
    
    <div class="row margin-row-card">
        <div class="col-md-12">
            <div class="float-right" style="margin-bottom:10px; margin-top:10px">
                <button class="btn btn-warning" @onclick="@(() => ModalInstrumentActionCreate.Show())">
                    @AppData.LangResource[AppData.LanguageID, 326]
                </button>
            </div>
        </div>
    </div>

    <div class="row margin-row-card">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header"><i class="fas fa-table mr-1"></i>@AppData.LangResource[AppData.LanguageID, 327]</div>
                <div class="card-body">
                    <div class="scrollBar fixTableHead table-responsive scroll-inner" style="height:700px;">
                        <table id="dataTable" class="table table-bordered table-striped text-center" width="100%">
                            <thead class="fixedthead">
                                <tr>
                                    <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 322]</th>
                                    <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 217]</th>
                                    <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 218]</th>
                                    <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 145]</th>
                                    <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 146]</th>

                                </tr>
                            </thead>
                            <tbody class="scrollContent">
                                @{int id = 1;}
                                @foreach (var item in listInstrumentAction)
                                {
                                    if (item.IsActive != null && item.IsActive == true)
                                    {
                                        <tr>
                                            <td>@id</td>
                                            <td>@item.InstrumentActionName</td>
                                            <td>@item.InstrumentActionDescription</td>
                                            <td>
                                                <button type="button" class="btn btn-warning" @onclick="@(() => InstrumentActionUpdate(item.InstrumentActionID))">
                                                    <i class="fas fa-edit fa-sm"></i>
                                                </button>
                                            </td>
                                            <td>
                                                <button type="button" class="btn btn-danger" @onclick="@(() => InstrumentActionDelete(item.InstrumentActionID))">
                                                    <i class="fas fa-trash-alt fa-sm"></i>
                                                </button>
                                            </td>
                                        </tr>
                                        id++;
                                    }
                                    
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!--Loading-->
<BSModal class="row style-justify mt-5" @ref="Load" IsCentered="true" Size="Size.Small" IgnoreEscape="true" IgnoreClickOnBackdrop="true">
    <BSModalBody>
        <div class="text-center mt-3">
            <span class="spinner-border text-warning spinner-border-sm " role="status" aria-hidden="true"
                  style="font-size: 16pt; width: 36px; height: 36px; color: Gold " />
        </div>
        <div class="text-center pt-3" style=" font-size: 16pt">
            @AppData.LangResource[AppData.LanguageID, 325]
        </div>
    </BSModalBody>
</BSModal>

<!--ModalInstrumentActionCreate-->
<BSModal @ref="ModalInstrumentActionCreate">
    <BSModalHeader OnClick="@(() => ModalInstrumentActionCreate.Hide())">@AppData.LangResource[AppData.LanguageID, 326]</BSModalHeader>
    <BSModalBody>
        <div class="row">
            <label class="col-12 col-md-4 col-lg-4 col-form-label">
                <span>@AppData.LangResource[AppData.LanguageID, 217]</span>
            </label>
            <div class="col-12 col-md-8 col-lg-7">
                <div class="input-group input-box-bottom">
                    <input type="text" @bind-value="addInstrumentAction.InstrumentActionName" placeholder="@AppData.LangResource[AppData.LanguageID, 217]" class="form-control" />
                </div>
            </div>
        </div>
        <div class="row">
            <label class="col-12 col-md-4 col-lg-4 col-form-label">
                <span>@AppData.LangResource[AppData.LanguageID, 218]</span>
            </label>
            <div class="col-12 col-md-8 col-lg-7">
                <div class="input-group input-box-bottom">
                    <textarea @bind="addInstrumentAction.InstrumentActionDescription" rows="3" placeholder="@AppData.LangResource[AppData.LanguageID, 218]" class="form-control" />
                </div>
            </div>
        </div>
    </BSModalBody>
    <BSModalFooter>
        @if (AppData.CurrentPermission.Find(i => i.permissionID == 23).permissionC)
        {
            <button type="submit" @onclick="SaveCreateInstrumentAction" class="btn btn-success">@AppData.LangResource[AppData.LanguageID, 44]</button>
        }
        else
        {
            <button type="button" disabled class="btn btn-success">@AppData.LangResource[AppData.LanguageID, 44]</button>
        }
        <button type="reset" @onclick="@(() => ModalInstrumentActionCreate.Hide())" class="btn btn-danger">@AppData.LangResource[AppData.LanguageID, 158]</button>
    </BSModalFooter>
</BSModal>

<!--ModalInstrumentActionEdit-->
<BSModal @ref="ModalInstrumentActionEdit">
    <BSModalHeader OnClick="@(() => ModalInstrumentActionEdit.Hide())">@AppData.LangResource[AppData.LanguageID, 328]</BSModalHeader>
    <BSModalBody>

        <div class="row">
            <label class="col-12 col-md-4 col-lg-4 col-form-label">
                <span>@AppData.LangResource[AppData.LanguageID, 217]</span>
            </label>
            <div class="col-12 col-md-8 col-lg-7">
                <div class="input-group input-box-bottom">
                    <input type="text" @bind-value="editInstrumentAction.InstrumentActionName" placeholder="@AppData.LangResource[AppData.LanguageID, 217]" class="form-control" />
                </div>
            </div>
        </div>

        <div class="row">
            <label class="col-12 col-md-4 col-lg-4 col-form-label">
                <span>@AppData.LangResource[AppData.LanguageID, 218]</span>
            </label>
            <div class="col-12 col-md-8 col-lg-7">
                <div class="input-group input-box-bottom">
                    <textarea @bind="editInstrumentAction.InstrumentActionDescription" rows="3" placeholder="@AppData.LangResource[AppData.LanguageID, 218]" class="form-control" />
                </div>
            </div>
        </div>

    </BSModalBody>
    <BSModalFooter>
        @if (AppData.CurrentPermission.Find(i => i.permissionID == 23).permissionU)
        {
            <button type="submit" @onclick="SaveEditInstrumentAction" class="btn btn-success">@AppData.LangResource[AppData.LanguageID, 44]</button>
        }
        else
        {
            <button type="button" disabled class="btn btn-success">@AppData.LangResource[AppData.LanguageID, 44]</button>
        }
        <button type="button" class="btn btn-danger" @onclick="@(() => ModalInstrumentActionEdit.Hide())">@AppData.LangResource[AppData.LanguageID, 158]</button>
    </BSModalFooter>
</BSModal>

<!--ModalInstrumentActionDelete-->
<BSModal @ref="ModalInstrumentActionDelete">
    <BSModalHeader OnClick="@(() => ModalInstrumentActionDelete.Hide())">@AppData.LangResource[AppData.LanguageID, 329]</BSModalHeader>
    <BSModalBody>

        <div class="row">
            <div class="col-md-12">
                <div class="alert-modal-delete">
                    @AppData.LangResource[AppData.LanguageID, 323] @AppData.LangResource[AppData.LanguageID, 217]:<br>@editInstrumentAction.InstrumentActionName @AppData.LangResource[AppData.LanguageID, 324] ?
                </div>
            </div>
        </div>

    </BSModalBody>
    <BSModalFooter>
        @if (AppData.CurrentPermission.Find(i => i.permissionID == 23).permissionD)
        {
            <button type="submit" @onclick="SaveDeleteInstrumentAction" class="btn btn-danger">@AppData.LangResource[AppData.LanguageID, 610]</button>
        }
        else
        {
            <button type="button" disabled class="btn btn-danger">@AppData.LangResource[AppData.LanguageID, 610]</button>
        }
        <button type="button" class="btn btn-info" @onclick="@(() => ModalInstrumentActionDelete.Hide())">@AppData.LangResource[AppData.LanguageID, 158]</button>
    </BSModalFooter>
</BSModal>

<!--ModalResponseError-->
<BSModal Class="text-center" @ref="ModalResponseError" IsCentered="true" Size="Size.Large">
    <BSModalBody>

        <div class="row">
            <div class="col-md-12 alert-modal-logo">
                <img src="assets/images/img-common/delete_symbol.png" width="100" height="100" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <p class="alert-modal">@RequertMessage</p>
            </div>
        </div>
        <button type="button" @onclick="@(() => ModalResponseError.Hide())" class="btn btn-success alert-modal-button">@AppData.LangResource[AppData.LanguageID, 330]</button>
    </BSModalBody>
</BSModal>

<!--ModalRespondSuccess-->
<BSModal Class="text-center alert-modal-body" @ref="ModalRespondSuccess" IsCentered="true" Size="Size.Large">
    <BSModalBody>
        <div class="row">
            <div class="col-md-12 alert-modal-logo">
                <img src="assets/images/img-common/tick_symbol.png" width="100" height="100" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <h4 class="alert-modal">@RequertMessage</h4>
            </div>
        </div>
        <button type="button" @onclick="@(() => ModalRespondSuccess.Hide())" class="btn btn-success alert-modal-button">@AppData.LangResource[AppData.LanguageID, 330]</button>
    </BSModalBody>
</BSModal>


@code {

    /// <summary>
    /// listInstrumentAction
    /// </summary>
    private List<InstrumentAction> listInstrumentAction = new List<InstrumentAction>();
    private InstrumentAction addInstrumentAction = new InstrumentAction();
    private InstrumentAction editInstrumentAction = new InstrumentAction();

    /// <summary>
    /// BSModal
    /// </summary>
    BSModal Load { get; set; }
    BSModal ModalResponseError { get; set; }
    BSModal ModalRespondSuccess { get; set; }
    BSModal ModalInstrumentActionCreate { get; set; }
    BSModal ModalInstrumentActionEdit { get; set; }
    BSModal ModalInstrumentActionDelete { get; set; }

    /// <summary>
    /// Variable
    /// </summary>
    private string RequertMessage;
    int i = 0;

    /// <summary>
    /// OnInitializedAsync
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {

        try
        {
            AppData.instrumentAction = await _masterData.GetMasterDataAsync<InstrumentAction>("InstrumentAction");
            listInstrumentAction = AppData.instrumentAction;
            //await jsRuntime.InvokeAsync<object>("ResponsiveDataTables");
        }
        catch (Exception e)
        {
            var val = e.Message;
            RequertMessage = val;
        }
    }


    /// <summary>
    /// Modal show InstrumentActionUpdate
    /// </summary>
    /// <param name="id"></param>
    private async void InstrumentActionUpdate(int id)
    {
        try
        {
            var respond = await _masterData.GetMasterDataAsyncByID<InstrumentAction>("InstrumentActionByID", id);

            if (string.IsNullOrEmpty(respond.Content))
            {
                editInstrumentAction = respond;
                ModalInstrumentActionEdit.Show();
            }
            else
            {
                var requertException = respond.Content;
                RequertMessage = requertException;
                ModalResponseError.Show();
            }
        }
        catch (Exception e)
        {
            var val = e.Message;
            RequertMessage = val;
            ModalResponseError.Show();
        }
    }

    /// <summary>
    /// Modal show InstrumentActionDelete
    /// </summary>
    /// <param name="id"></param>
    private async void InstrumentActionDelete(int id)
    {
        try
        {
            var respond = await _masterData.GetMasterDataAsyncByID<InstrumentAction>("InstrumentActionByID", id);
            if (string.IsNullOrEmpty(respond.Content))
            {
                editInstrumentAction = respond;
                ModalInstrumentActionDelete.Show();
            }
            else
            {
                var requertException = respond.Content;
                RequertMessage = requertException;
                ModalResponseError.Show();
            }
        }
        catch (Exception e)
        {
            var val = e.Message;
            RequertMessage = val;
            ModalResponseError.Show();
        }
    }

    /// <summary>
    /// SaveCreateInstrumentAction
    /// </summary>
    private async Task SaveCreateInstrumentAction()
    {
        try
        {
            var respond = await _masterData.PostMasterDataAsync("PostInstrumentAction",addInstrumentAction);
            if (!string.IsNullOrEmpty(respond.ToString()))
            {
                var requertException = respond.StatusMessage;
                RequertMessage = requertException;
                ModalRespondSuccess.Show();
            }
            else
            {
                var requertException = respond.Content;
                RequertMessage = requertException;
                ModalResponseError.Show();
            }

        }
        catch (Exception e)
        {
            var val = e.Message;
            RequertMessage = val;
            ModalResponseError.Show();
        }
        await OnInitializedAsync();
        ModalInstrumentActionCreate.Hide();
    }

    /// <summary>
    /// SaveEditInstrumentAction
    /// </summary>
    private async Task SaveEditInstrumentAction()
    {
        try
        {
            var respond = await _masterData.PutMasterDataAsync("PutInstrumentAction", editInstrumentAction, editInstrumentAction.InstrumentActionID);
            if (!string.IsNullOrEmpty(respond.ToString()))
            {
                var requertException = respond.StatusMessage;
                RequertMessage = requertException;
                await OnInitializedAsync();
                ModalRespondSuccess.Show();
            }
            else
            {
                var requertException = respond.Content;
                RequertMessage = requertException;
                ModalResponseError.Show();
            }
        }
        catch (Exception e)
        {
            var val = e.Message;
            RequertMessage = val;
            ModalResponseError.Show();
        }
        ModalInstrumentActionEdit.Hide();
    }

    /// <summary>
    /// SaveDeleteInstrumentAction
    /// </summary>
    private async Task SaveDeleteInstrumentAction()
    {
        try
        {
            var respond = await _masterData.DeleteMasterDataAsync<InstrumentAction>("DeleteInstrumentAction", editInstrumentAction.InstrumentActionID);
            if (!string.IsNullOrEmpty(respond.ToString()))
            {
                var requertException = respond.StatusMessage;
                RequertMessage = requertException;
                await OnInitializedAsync();
                ModalRespondSuccess.Show();
            }
            else
            {
                var requertException = respond.Content;
                RequertMessage = requertException;
                ModalResponseError.Show();
            }
        }
        catch (Exception e)
        {
            var val = e.Message;
            RequertMessage = val;
            ModalResponseError.Show();
        }
        ModalInstrumentActionDelete.Hide();
    }

    /// <summary>
    /// ClearCreateInstrumentAction
    /// </summary>
    private void ClearCreateInstrumentAction()
    {
        addInstrumentAction = new InstrumentAction();
    }

   
}



@*List<InventoryModel> itemList = new List<InventoryModel>();
if (ListInventory != null)
{
    itemList = ListInventory;
    itemList.Add(content.FirstOrDefault());
}
else
{
    itemList = new List<InventoryModel>(content);
}

ListInventory = new List<InventoryModel>(itemList);*@