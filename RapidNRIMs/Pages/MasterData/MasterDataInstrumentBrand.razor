@page "/MasterData/MasterDataInstrumentBrand"
@inject AppData AppData
@inject IToastService ToastService
@inject IMasterData _masterData
@inject IJSRuntime jsRuntime


@if (listInstrumentBrand == null)
{
    <div class="text-center mt-3">
        <span class="spinner-border text-warning spinner-border-sm " role="status" aria-hidden="true"
              style="font-size: 16pt; width: 36px; height: 36px; color: Gold " />
    </div>
    <div class="text-center pt-3" style=" font-size: 16pt">
        @AppData.LangResource[AppData.LanguageID, 325]
    </div>
}
else
{

    <div class="row margin-row-card">
        <div class="col-md-12">
            <div class="float-right" style="margin-bottom:10px; margin-top:10px">
                <button class="btn btn-warning" @onclick="@(() => ModalInstrumentBrandCreate.Show())">
                    @AppData.LangResource[AppData.LanguageID, 336]
                </button>

            </div>
        </div>
    </div>
    
    <div class="row margin-row-card">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header"><i class="fas fa-table mr-1"></i>@AppData.LangResource[AppData.LanguageID, 337]</div>
                <div class="card-body">
                    <div class="scrollBar fixTableHead table-responsive scroll-inner heightTable" style="height: 700px;">
                        <table id="dataTable" class="display table table-bordered table-striped text-center" width="100%">
                            <thead class="fixedthead">
                                <tr>
                                    <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 322]</th>
                                    <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 188]</th>
                                    <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 189]</th>
                                    <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 145]</th>
                                    <th class="alternateRow">@AppData.LangResource[AppData.LanguageID, 146]</th>
                                </tr>
                            </thead>
                            <tbody class="scrollContent">
                                @{int id = 1;}
                                @foreach (var item in listInstrumentBrand)
                                {
                                   
                                    if (item.InstrumentBrandName != "-" && item.IsActive != null && item.IsActive == true)
                                    {
                                         <tr>
                                            <td>@id</td>
                                            <td>@item.InstrumentBrandName</td>
                                            <td>@item.InstrumentBrandDescription</td>
                                            <td>
                                                <button type="button" class="btn btn-warning" @onclick="@(() =>InstrumentBrandUpdate(item.InstrumentBrandID))">
                                                    <i class="fas fa-edit fa-sm"></i>
                                                </button>
                                            </td>
                                            <td>
                                                <button  type="button" class="btn btn-danger" @onclick="@(() => InstrumentBrandDelete(item.InstrumentBrandID))">
                                                    <i class="fas fa-trash-alt fa-sm"></i>
                                                </button>
                                            </td>
                                        </tr>
                                        id++;
                                    }  
                                }
                            </tbody>
                           
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!--div>
    <button class="btn btn-secondary" @onclick="@(e => NavigateTo("first"))">@("<<")</button>
    <button class="btn btn-secondary" @onclick="@(e => NavigateTo("prev"))">Prev</button>
    @for (int i = 0; i < TotalPages; i++)
    {
        var pageNumber = i;
        <button class="btn @(CurrentPage == pageNumber? "btn-dark":"btn-info")" @onclick="@(e => UpdateList(pageNumber))">
            @(i + 1)
        </button>
    }
    <button class="btn btn-secondary" @onclick="@(e => NavigateTo("next"))">Next</button>
    <button class="btn btn-secondary" @onclick="@(e => NavigateTo("last"))">@(">>")</button>
</div-->

<!--Loading-->
<BSModal class="row style-justify mt-5" @ref="Load" IsCentered="true" Size="Size.Small" IgnoreEscape="true" IgnoreClickOnBackdrop="true">
    <BSModalBody>
        <div class="text-center mt-3">
            <span class="spinner-border text-warning spinner-border-sm " role="status" aria-hidden="true"
                  style="font-size: 16pt; width: 36px; height: 36px; color: Gold " />
        </div>
        <div class="text-center pt-3" style=" font-size: 16pt">
            @AppData.LangResource[AppData.LanguageID, 325]
        </div>
    </BSModalBody>
</BSModal>

<!--ModalInstrumentBrandCreate-->
<BSModal @ref="ModalInstrumentBrandCreate">
    <BSModalHeader OnClick="@(() => ModalInstrumentBrandCreate.Hide())">@AppData.LangResource[AppData.LanguageID, 336]</BSModalHeader>
    <BSModalBody>

        <div class="row">
            <label class="col-12 col-md-4 col-lg-4 col-form-label">
                <span>@AppData.LangResource[AppData.LanguageID, 188]</span>
            </label>
            <div class="col-12 col-md-8 col-lg-7">
                <div class="input-group input-box-bottom">
                    <input type="text" @bind-value="addInstrumentBrand.InstrumentBrandName" placeholder="@AppData.LangResource[AppData.LanguageID,188]" class="form-control" />
                </div>
            </div>
        </div>

        <div class="row">
            <label class="col-12 col-md-4 col-lg-4 col-form-label">
                <span>@AppData.LangResource[AppData.LanguageID, 189]</span>
            </label>
            <div class="col-12 col-md-8 col-lg-7">
                <div class="input-group input-box-bottom">
                    <input type="text" @bind-value="addInstrumentBrand.InstrumentBrandDescription" placeholder="@AppData.LangResource[AppData.LanguageID,189]" class="form-control" />
                </div>
            </div>
        </div>

    </BSModalBody>
    <BSModalFooter>
        @if (AppData.CurrentPermission.Find(i => i.permissionID == 25).permissionC)
        {
            <button type="submit" @onclick="SaveCreateInstrumentBrand" class="btn btn-success">@AppData.LangResource[AppData.LanguageID, 44]</button>
        }
        else
        {
            <button type="button" disabled class="btn btn-success">@AppData.LangResource[AppData.LanguageID, 44]</button>
        }
        <button type="reset" class="btn btn-danger" @onclick="@(() => ModalInstrumentBrandCreate.Hide())">@AppData.LangResource[AppData.LanguageID, 158]</button>
    </BSModalFooter>
</BSModal>

<!--ModalInstrumentBrandEdit-->
<BSModal @ref="ModalInstrumentBrandEdit">
    <BSModalHeader OnClick="@(() => ModalInstrumentBrandEdit.Hide())">@AppData.LangResource[AppData.LanguageID, 338]</BSModalHeader>
    <BSModalBody>

        <div class="row">
            <label class="col-12 col-md-4 col-lg-4 col-form-label">
                <span>@AppData.LangResource[AppData.LanguageID, 188]</span>
            </label>
            <div class="col-12 col-md-8 col-lg-7">
                <div class="input-group input-box-bottom">
                    <input type="text" @bind-value="editInstrumentBrand.InstrumentBrandName" placeholder="@AppData.LangResource[AppData.LanguageID,188]" class="form-control" />
                </div>
            </div>
        </div>

        <div class="row">
            <label class="col-12 col-md-4 col-lg-4 col-form-label">
                <span>@AppData.LangResource[AppData.LanguageID, 189]</span>
            </label>
            <div class="col-12 col-md-8 col-lg-7">
                <div class="input-group input-box-bottom">
                    <input type="text" @bind-value="editInstrumentBrand.InstrumentBrandDescription" placeholder="@AppData.LangResource[AppData.LanguageID,189]" class="form-control" />
                </div>
            </div>
        </div>

    </BSModalBody>
    <BSModalFooter>
        @if (AppData.CurrentPermission.Find(i => i.permissionID == 25).permissionU)
        {
            <button type="submit" @onclick="SaveEditInstrumentBrand" class="btn btn-success">@AppData.LangResource[AppData.LanguageID, 44]</button>
        }
        else
        {
            <button type="button"disabled class="btn btn-success">@AppData.LangResource[AppData.LanguageID, 44]</button>
        }
        <button type="button" class="btn btn-danger" @onclick="@(() => ModalInstrumentBrandEdit.Hide())">@AppData.LangResource[AppData.LanguageID, 158]</button>
    </BSModalFooter>
</BSModal>

<!--ModalInstrumentBrandDelete-->
<BSModal @ref="ModalInstrumentBrandDelete">
    <BSModalHeader OnClick="@(() => ModalInstrumentBrandDelete.Hide())">@AppData.LangResource[AppData.LanguageID, 339]</BSModalHeader>
    <BSModalBody>

        <div class="row">
            <div class="col-md-12">
                <div class="alert-modal-delete">
                    @AppData.LangResource[AppData.LanguageID, 323] @AppData.LangResource[AppData.LanguageID, 188]:<br>@editInstrumentBrand.InstrumentBrandName @AppData.LangResource[AppData.LanguageID, 324] ?
                </div>
            </div>
        </div>

    </BSModalBody>
    <BSModalFooter>
        @if (AppData.CurrentPermission.Find(i => i.permissionID == 25).permissionD)
        {
            <button type="submit" @onclick="SaveDeleteInstrumentBrand" class="btn btn-danger">@AppData.LangResource[AppData.LanguageID, 610]</button>
        }
        else
        {
            <button type="button" disabled class="btn btn-danger">@AppData.LangResource[AppData.LanguageID, 610]</button>
        }
        <button type="button" class="btn btn-info" @onclick="@(() => ModalInstrumentBrandDelete.Hide())">@AppData.LangResource[AppData.LanguageID, 158]</button>
    </BSModalFooter>
</BSModal>

<!--ModalResponseError-->
<BSModal Class="text-center" @ref="ModalResponseError" IsCentered="true" Size="Size.Large">
    <BSModalBody>

        <div class="row">
            <div class="col-md-12 alert-modal-logo">
                <img src="assets/images/img-common/delete_symbol.png" width="100" height="100" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <p class="alert-modal">@RequertMessage</p>
            </div>
        </div>
        <button type="button" @onclick="@(() => ModalResponseError.Hide())" class="btn btn-success alert-modal-button">@AppData.LangResource[AppData.LanguageID, 330]</button>

    </BSModalBody>
</BSModal>

<!--ModalRespondSuccess-->
<BSModal Class="text-center alert-modal-body" @ref="ModalRespondSuccess" IsCentered="true" Size="Size.Large">
    <BSModalBody>
        <div class="row">
            <div class="col-md-12 alert-modal-logo">
                <img src="assets/images/img-common/tick_symbol.png" width="100" height="100" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <h4 class="alert-modal">@RequertMessage</h4>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <button @onclick="@(() => ModalRespondSuccess.Hide())" class="btn btn-success alert-modal-button">@AppData.LangResource[AppData.LanguageID, 330]</button>
            </div>
        </div>
    </BSModalBody>
</BSModal>


@code {
    /// <summary>
    /// InstrumentBrand
    /// </summary>
    private List<InstrumentBrand> listInstrumentBrand = new List<InstrumentBrand>();
    private List<InstrumentBrand> listPaging = new List<InstrumentBrand>();
    private InstrumentBrand addInstrumentBrand = new InstrumentBrand();
    private InstrumentBrand editInstrumentBrand = new InstrumentBrand();

    /// <summary>
    /// BSModal
    /// </summary>
    BSModal Load { get; set; }
    BSModal ModalResponseError { get; set; }
    BSModal ModalRespondSuccess { get; set; }
    BSModal ModalInstrumentBrandCreate { get; set; }
    BSModal ModalInstrumentBrandEdit { get; set; }
    BSModal ModalInstrumentBrandDelete { get; set; }

    /// <summary>
    /// Variable
    /// </summary>
    private string RequertMessage;
    public int PageSize { get; set; } 
    public int TotalPages { get; set; }
    public int CurrentPage { get; set; }
    int testVariable = 1;

    /// <summary>
    /// OnInitializedAsync
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            //PageSize = 10;
            AppData.instrumentBrands = await _masterData.GetMasterDataAsync<InstrumentBrand>("InstrumentBrand");
            listInstrumentBrand = AppData.instrumentBrands;
            //var result = listInstrumentBrand.Where(c => c.IsActive == true).Count();
            //if (listInstrumentBrand != null)
            //{
            //    listPaging = listInstrumentBrand.Take(PageSize).ToList();
                
            //    TotalPages = (int)Math.Ceiling(result / (decimal)PageSize);
                
                

            //}
            ///await jsRuntime.InvokeAsync<object>("ResponsiveDataTables");
        }
        catch (Exception e)
        {
            var val = e.Message;
            RequertMessage = val;
        }
    }

    private void UpdateList(int pageNumber = 0)
    {
        //var result = listInstrumentBrand.Where(c => c.IsActive == true).Count();

        //if (listInstrumentBrand != null)
        //{
        //    //pageNumber * pageSize -> take 5

        //    listPaging = listInstrumentBrand.Skip(pageNumber * PageSize).Take(PageSize).ToList();
            
        //    TotalPages = (int)Math.Ceiling(result / (decimal)PageSize);
        //    CurrentPage = pageNumber;
        //}
    }

    private void NavigateTo(string direction)
    {
        //if (direction == "prev" && CurrentPage != 0)
        //    CurrentPage -= 1;
        //if (direction == "next" && CurrentPage != TotalPages - 1)
        //    CurrentPage += 1;
        //if (direction == "first")
        //    CurrentPage = 0;
        //if (direction == "last")
        //    CurrentPage = TotalPages - 1;

        //UpdateList(CurrentPage);
    }



    /// <summary>
    /// Modal show InstrumentBrandUpdate
    /// </summary>
    /// <param name="id"></param>
    private async Task InstrumentBrandUpdate(int? id)
    {
        try
        {
            var respond = await _masterData.GetMasterDataAsyncByID<InstrumentBrand>("InstrumentBrandByID", id);
            if (string.IsNullOrEmpty(respond.Content))
            {
                editInstrumentBrand = respond;
                ModalInstrumentBrandEdit.Show();
            }
            else
            {
                var requertException = respond.Content;
                RequertMessage = requertException;
                ModalResponseError.Show();
            }
        }
        catch (Exception e)
        {
            var val = e.Message;
            RequertMessage = val;
            ModalResponseError.Show();
        }
    }

    /// <summary>
    /// Modal show InstrumentBrandDelete
    /// </summary>
    /// <param name="id"></param>
    private async Task InstrumentBrandDelete(int? id)
    {
        try
        {
            var respond = await _masterData.GetMasterDataAsyncByID<InstrumentBrand>("InstrumentBrandByID", id);

            if (string.IsNullOrEmpty(respond.Content))
            {
                editInstrumentBrand = respond;
                ModalInstrumentBrandDelete.Show();
            }
            else
            {
                var requertException = respond.Content;
                RequertMessage = requertException;
                ModalResponseError.Show();
            }
        }
        catch (Exception e)
        {
            var val = e.Message;
            RequertMessage = val;
            ModalResponseError.Show();
        }
    }

    /// <summary>
    /// SaveCreateInstrumentBrand
    /// </summary>
    private async Task SaveCreateInstrumentBrand()
    {
        try
        {
            var respond = await _masterData.PostMasterDataAsync("PostInstrumentBrand", addInstrumentBrand);
            if (!string.IsNullOrEmpty(respond.ToString()))
            {
                var requertException = respond.StatusMessage;
                RequertMessage = requertException;
                await OnInitializedAsync();
                ModalRespondSuccess.Show();
            }
            else
            {
                var requertException = respond.Content;
                RequertMessage = requertException;
                ModalResponseError.Show();
            }

        }
        catch (Exception e)
        {
            var val = e.Message;
            RequertMessage = val;
            ModalResponseError.Show();
        }
        ModalInstrumentBrandCreate.Hide();
    }

    /// <summary>
    /// SaveEditInstrumentBrand
    /// </summary>
    private async Task SaveEditInstrumentBrand()
    {
        try
        {
            var respond = await _masterData.PutMasterDataAsync("PutInstrumentBrand", editInstrumentBrand, editInstrumentBrand.InstrumentBrandID);
            if (!string.IsNullOrEmpty(respond.ToString()))
            {
                var requertException = respond.StatusMessage;
                RequertMessage = requertException;
                await OnInitializedAsync();
                ModalRespondSuccess.Show();
            }
            else
            {
                var requertException = respond.Content;
                RequertMessage = requertException;
                ModalResponseError.Show();
            }
        }
        catch (Exception e)
        {
            var val = e.Message;
            RequertMessage = val;
            ModalResponseError.Show();
        }
        ModalInstrumentBrandEdit.Hide();
    }

    /// <summary>
    /// SaveDeleteInstrumentBrand
    /// </summary>
    private async Task SaveDeleteInstrumentBrand()
    {
        try
        {
            var respond = await _masterData.DeleteMasterDataAsync<InstrumentBrand>("DeleteInstrumentBrand", editInstrumentBrand.InstrumentBrandID);
            if (!string.IsNullOrEmpty(respond.ToString()))
            {
                var requertException = respond.StatusMessage;
                RequertMessage = requertException;
                await OnInitializedAsync();
                ModalRespondSuccess.Show();
            }
            else
            {
                var requertException = respond.Content;
                RequertMessage = requertException;
                ModalResponseError.Show();
            }
        }
        catch (Exception e)
        {
            var val = e.Message;
            RequertMessage = val;
            ModalResponseError.Show();
        }
        ModalInstrumentBrandDelete.Hide();
    }

    /// <summary>
    /// ClearCreateInstrumentBrand
    /// </summary>
    private void ClearCreateInstrumentBrand()
    {
        addInstrumentBrand = new InstrumentBrand();
    }

}
